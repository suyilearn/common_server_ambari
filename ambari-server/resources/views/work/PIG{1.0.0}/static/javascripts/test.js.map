{"version":3,"sources":["test/unit/components/code_mirror_test.js","test/unit/components/job_progress_test.js","test/unit/controllers/pig_test.js","test/unit/controllers/script_edit_test.js","test/unit/controllers/script_history_test.js","test/unit/controllers/script_job_test.js","test/unit/controllers/script_test.js","test/unit/models/job_test.js","test/unit/models/script_test.js"],"names":[],"mappingsxGA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtrSA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAztFA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;AAAA","file":"public/static/javascripts/test.js","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleForComponent('code-mirror', 'App.CodeMirrorComponent',{\n  setup:function (container) {\n    container.register('model:file', App.File);\n    container.register('model:script', App.Script);\n    container.register('store:main', DS.Store);\n    container.register('adapter:application', DS.FixtureAdapter);\n    container.register('serializer:application', DS.RESTSerializer);\n    container.register('transform:boolean', DS.BooleanTransform);\n    container.register('transform:date',    DS.DateTransform);\n    container.register('transform:number',  DS.NumberTransform);\n    container.register('transform:string',  DS.StringTransform);\n    container.register('transform:isodate',  App.IsodateTransform);\n  }\n});\n\ntest('fill editor with script',function () {\n  expect(1);\n  var editor = this.subject(),\n      store = this.container.lookup('store:main');\n\n  this.append();\n\n  Em.run(function () {\n    var script = store.createRecord('file', {fileContent:'test_content'});\n    editor.set('content',script);\n    stop();\n    script.save().then(function () {\n      start();\n      script.set('isFulfilled',true);\n      equal(editor.get('codeMirror').getValue(),'test_content');\n    });\n  });\n});\n\ntest('can toggle fullscreen mode',function  () {\n  var editor = this.subject();\n  this.append();\n\n  Em.run(function() {\n    var fs_state = editor.get('codeMirror').getOption('fullScreen');\n\n    Em.run(function() {\n      editor.toggleProperty('fullscreen');\n    });\n\n    Em.run.next(function() {\n      equal(editor.get('codeMirror').getOption('fullScreen'),!fs_state);\n    });\n  });\n});\n\ntest('sync between script and editor content', function() {\n  expect(2);\n  var editor = this.subject(),\n      store = this.container.lookup('store:main');\n\n  this.append();\n\n  var script,\n      cm = editor.get('codeMirror'),\n      test_content = 'content',\n      test_addition = 'addition',\n      final_content = test_content + test_addition;\n\n  Em.run(function() {\n    script = store.createRecord('file', {fileContent:test_content});\n  });\n\n  Em.run(function () {\n    editor.set('content',script);\n    cm.setCursor({line:0,ch:test_content.length});\n    cm.replaceRange(test_addition,{line:0,ch:test_content.length},{line:0,ch:test_content.length});\n  });\n\n  equal(cm.getCursor().ch,final_content.length,'script content updates when editor changes');\n\n  Em.run(function() {\n    script.set('fileContent',test_addition);\n  });\n\n  equal(cm.getValue(),test_addition, 'editor content updates when script changes');\n\n});\n\n\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleForComponent('job-progress', 'App.JobProgressComponent', {\n  setup:function (container) {\n    container.register('model:file', App.File);\n    container.register('model:job', App.Job);\n    container.register('store:main', DS.Store);\n  }\n});\n\ntest('update progress bar', function () {\n  var job,\n      bar,\n      wrap,\n      store = this.container.lookup('store:main');\n\n  Em.run(function() {\n    job = store.createRecord('job',{percentComplete:0});\n  });\n\n  wrap = this.subject({job:job});\n  this.append();\n  bar = wrap.$().find('.progress-bar');\n\n  ok((100 * parseFloat(bar.css('width')) / parseFloat(bar.parent().css('width'))) == 0);\n\n  Em.run(function() {\n    job.set('percentComplete',100);\n  });\n\n  andThen(function() {\n    ok((100 * parseFloat(bar.css('width')) / parseFloat(bar.parent().css('width'))) == 100);\n  });\n\n});\n\n\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleFor('controller:pig', 'App.PigController', {\n  needs:['controller:scriptEdit','controller:script','model:script'],\n  setup:function () {\n    var store = this.container.lookup('store:main');\n    var _this = this;\n    Ember.run(function() {\n      store.createRecord('script',{pigScript:store.createRecord('file')});\n      _this.subject({\n        model: store.all('script')\n      })\n    });\n  }\n},function (container) {\n  container.register('model:file', App.File);\n  container.register('model:script', App.Script);\n  container.register('store:main', DS.Store);\n  container.register('adapter:application', DS.FixtureAdapter);\n  container.register('serializer:application', DS.RESTSerializer);\n  container.register('transform:boolean', DS.BooleanTransform);\n  container.register('transform:date',    DS.DateTransform);\n  container.register('transform:number',  DS.NumberTransform);\n  container.register('transform:string',  DS.StringTransform);\n  container.register('transform:isodate',  App.IsodateTransform);\n});\n\ntest('Can get active Script after active Script Id script is set', function () {\n  var pig = this.subject();\n  var script = pig.get('content.firstObject');\n\n  Ember.run(function() {\n    pig.set('activeScriptId', script.get('id'));\n    deepEqual(script, pig.get('activeScript'), 'script is set');\n  });\n});\n\ntest('Can\\'t save Script while ranaming', function () {\n  var pig = this.subject();\n  var se = pig.get('controllers.scriptEdit');\n  var script = pig.get('content.firstObject');\n\n  Em.run(function () {\n    stop();\n    script.save().then(function () {\n      start();\n      se.set('isRenaming',true);\n      pig.set('activeScriptId', script.get('id'));\n      equal(pig.get('saveEnabled'),false,'save is disabled')\n    });\n  })\n});\n\ntest('scriptDirty property test', function () {\n  var pig = this.subject();\n  var script = pig.get('content.firstObject');\n\n  Em.run(function () {\n    stop();\n    script.save().then(function () {\n      start();\n      pig.set('activeScriptId', script.get('id'));\n      script.set('templetonArguments','test_agrument');\n      equal(pig.get('scriptDirty'),true,'scriptDirty is True when Script is modified');\n      script.set('pigScript.fileContent','test_content');\n      equal(pig.get('scriptDirty'),true,'scriptDirty is True when both Script and File is modified');\n      script.rollback();\n      equal(pig.get('scriptDirty'),true,'scriptDirty is True when File is modified');\n      script.get('pigScript').then(function (file) {\n        file.rollback();\n        equal(pig.get('scriptDirty'),false,'scriptDirty is False when File and Script is not modified');\n      });\n    });\n  })\n});\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleFor('controller:scriptEdit', 'App.ScriptEditController', {\n  needs:['controller:script'],\n  setup:function () {\n    var store = this.container.lookup('store:main');\n    var _this = this;\n    Ember.run(function() {\n      _this.subject({\n        model: store.createRecord('script',{pigScript:store.createRecord('file')})\n      });\n    });\n  }\n},function (container) {\n  container.register('model:file', App.File);\n  container.register('model:script', App.Script);\n  container.register('model:job', App.Job);\n  container.register('store:main', DS.Store);\n  container.register('adapter:application', DS.FixtureAdapter);\n  container.register('serializer:application', DS.RESTSerializer);\n  container.register('transform:boolean', DS.BooleanTransform);\n  container.register('transform:date', DS.DateTransform);\n  container.register('transform:number', DS.NumberTransform);\n  container.register('transform:string', DS.StringTransform);\n  container.register('transform:isodate', App.IsodateTransform);\n});\n\ntest('script parameters parsing test',function () {\n  var controller = this.subject();\n\n  Em.run(function () {\n    controller.set('content.pigScript.fileContent','%test_param%');\n    equal(controller.get('pigParams.length'),1,'can set pig parameter');\n    equal(controller.get('pigParams.firstObject.title'), 'test_param', 'pig parameter parsed right');\n    controller.set('content.pigScript.fileContent','%test_param% %test_param%');\n    equal(controller.get('pigParams.length'),1,'controller has no pig parameter duplicates');\n  });\n\n});\n\ntest('run job without parameters',function () {\n  expect(3);\n  var controller = this.subject();\n  var store = this.container.lookup('store:main');\n\n  Em.run(function () {\n\n    var file = store.createRecord('file', {\n      id:1,\n      fileContent:'test_content'\n    });\n\n    var script = store.createRecord('script',{\n      id:1,\n      templetonArguments:'-test_argument',\n      title:'test_script',\n      pigScript:file\n    });\n\n    controller.set('model',script);\n    controller.set('store',store);\n\n    stop();\n\n    controller.prepareJob('execute',[file,script]).then(function (job) {\n      deepEqual(job.toJSON(),{\n        title: 'test_script',\n        jobType: null,\n        pigScript: '1',\n        scriptId: 1,\n        templetonArguments: '-test_argument',\n        dateStarted: undefined,\n        duration: null,\n        forcedContent: null,\n        jobId: null,\n        owner: null,\n        percentComplete: null,\n        sourceFile: null,\n        sourceFileContent: null,\n        status: null,\n        statusDir: null\n      },'execute processed correctly');\n\n      return controller.prepareJob('explain',[file,script]);\n    }).then(function (job) {\n      deepEqual(job.toJSON(),{\n        title: 'Explain: \"test_script\"',\n        jobType: 'explain',\n        pigScript: null,\n        scriptId: 1,\n        templetonArguments: '',\n        dateStarted: undefined,\n        duration: null,\n        forcedContent: 'explain -script ${sourceFile}',\n        jobId: null,\n        owner: null,\n        percentComplete: null,\n        sourceFile: '1',\n        sourceFileContent: null,\n        status: null,\n        statusDir: null\n      },'explain processed correctly');\n\n      return controller.prepareJob('syntax_check',[file,script]);\n    }).then(function (job) {\n      deepEqual(job.toJSON(),{\n        title: 'Syntax check: \"test_script\"',\n        jobType: 'syntax_check',\n        pigScript: '1',\n        scriptId: 1,\n        templetonArguments: '-test_argument\\t-check',\n        dateStarted: undefined,\n        duration: null,\n        forcedContent: null,\n        jobId: null,\n        owner: null,\n        percentComplete: null,\n        sourceFile: null,\n        sourceFileContent: null,\n        status: null,\n        statusDir: null\n      },'syntax check processed correctly');\n      start();\n    });\n  });\n});\n\ntest('run job with parameters',function () {\n  expect(3);\n  var controller = this.subject();\n  var store = this.container.lookup('store:main');\n\n  Em.run(function () {\n\n    var file = store.createRecord('file',{\n      id:1,\n      fileContent:'test_content %test_parameter%'\n    });\n\n    var script = store.createRecord('script',{\n      id:1,\n      templetonArguments:'-test_argument',\n      title:'test_script',\n      pigScript:file\n    });\n\n    controller.get('pigParams').pushObject(Em.Object.create({param:'%test_parameter%',value:'test_parameter_value',title:'test_parameter'}));\n    controller.set('model',script);\n    controller.set('store',store);\n\n    stop();\n\n    controller.prepareJob('execute',[file,script]).then(function (job) {\n      deepEqual(job.toJSON(),{\n        title: 'test_script',\n        jobType: null,\n        pigScript: null,\n        scriptId: 1,\n        templetonArguments: '-test_argument',\n        dateStarted: undefined,\n        duration: null,\n        forcedContent: 'test_content test_parameter_value',\n        jobId: null,\n        owner: null,\n        percentComplete: null,\n        sourceFile: null,\n        sourceFileContent: null,\n        status: null,\n        statusDir: null\n      },'execute with parameters processed correctly');\n\n      return controller.prepareJob('explain',[file,script]);\n    }).then(function (job) {\n      deepEqual(job.toJSON(),{\n        title: 'Explain: \"test_script\"',\n        jobType: 'explain',\n        pigScript: null,\n        scriptId: 1,\n        templetonArguments: '',\n        dateStarted: undefined,\n        duration: null,\n        forcedContent: 'explain -script ${sourceFile}',\n        jobId: null,\n        owner: null,\n        percentComplete: null,\n        sourceFile: null,\n        sourceFileContent: 'test_content test_parameter_value',\n        status: null,\n        statusDir: null\n      },'explain with parameters processed correctly');\n\n      return controller.prepareJob('syntax_check',[file,script]);\n    }).then(function (job) {\n      deepEqual(job.toJSON(),{\n        title: 'Syntax check: \"test_script\"',\n        jobType: 'syntax_check',\n        pigScript: null,\n        scriptId: 1,\n        templetonArguments: '-test_argument\\t-check',\n        dateStarted: undefined,\n        duration: null,\n        forcedContent: 'test_content test_parameter_value',\n        jobId: null,\n        owner: null,\n        percentComplete: null,\n        sourceFile: null,\n        sourceFileContent: null,\n        status: null,\n        statusDir: null\n      },'syntax check with parameters processed correctly');\n      start();\n    });\n  });\n});\n\ntest('rename test',function () {\n  expect(3);\n  var controller = this.subject();\n  var script = controller.get('content');\n  stop();\n\n  Em.run(function () {\n    var original_title = 'test_title';\n\n    script.set('title',original_title);\n\n    script.save().then(function (script) {\n      start();\n      controller.send('rename','ask');\n\n      ok(controller.get('oldTitle') == original_title && controller.get('isRenaming'), 'start renaming ok');\n\n      script.set('title','wrong_title');\n\n      controller.send('rename','cancel');\n\n      ok(script.get('title') == original_title && controller.get('oldTitle') == '' && !controller.get('isRenaming'),'undo renaming ok');\n\n      controller.send('rename','ask');\n      script.set('title','right_title');\n      stop();\n      controller.send('rename','right_title');\n\n      script.didUpdate = function () {\n        start();\n        ok(script.get('title') == 'right_title' && controller.get('oldTitle') == '' && !controller.get('isRenaming'),'rename done');\n      };\n    });\n  });\n});\n\ntest('add templeton arguments',function () {\n  expect(4);\n  var controller = this.subject();\n  var script = controller.get('content');\n\n  Em.run(function () {\n    var arg1 = '-test_argument',\n        arg2 = '-other_test_argument';\n\n    controller.set('tmpArgument',arg1);\n    controller.send('addArgument',arg1);\n    ok(script.get('templetonArguments') == arg1 && controller.get('tmpArgument') == '','can add argument');\n\n    controller.set('tmpArgument',arg1);\n    controller.send('addArgument',arg1);\n    ok(script.get('templetonArguments') == arg1 && controller.get('tmpArgument') == arg1,'can\\'t add duplicates');\n\n    controller.set('tmpArgument',arg2);\n    controller.send('addArgument',arg2);\n    ok((script.get('templetonArguments') == arg1+'\\t'+arg2 || script.get('templetonArguments') == arg2+'\\t'+arg1) && controller.get('tmpArgument') == '','can add more arguments');\n\n    controller.send('removeArgument',arg2);\n    ok(script.get('templetonArguments') == arg1, 'can remove argument');\n  });\n});\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleFor('controller:scriptHistory', 'App.ScriptHistoryController');\n\ntest('logs action',function () {\n  var controller = this.subject();\n  var job = Em.Object.create({isJob:true});\n\n  var targetObject = {\n    send: function(action,modalName,job){\n      ok(action ==\"openModal\" && modalName == \"logDownload\" && job.get('isJob'));\n    }\n  };\n\n  controller.set('target', targetObject);\n\n  controller.send('logsPopup',job);\n\n});\n\ntest('results action',function () {\n  var controller = this.subject();\n  var job = Em.Object.create({isJob:true});\n\n  var targetObject = {\n    send: function(action,modalName,job){\n      ok(action ==\"openModal\" && modalName == \"resultsDownload\" && job.get('isJob'));\n    }\n  };\n\n  controller.set('target', targetObject);\n\n  controller.send('resultsPopup',job);\n\n});\n\ntest('delete action',function () {\n  var controller = this.subject();\n  var job = Em.Object.create({isJob:true});\n\n  var targetObject = {\n    send: function(action,modalName,job){\n      ok(action ==\"openModal\" && modalName == \"deleteJob\" && job.get('isJob'));\n    }\n  };\n\n  controller.set('target', targetObject);\n\n  controller.send('deleteJob',job);\n\n});\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleFor('controller:scriptJob', 'App.ScriptJobController',{},function (container) {\n  container.register('model:file', App.File);\n  container.register('model:script', App.Script);\n  container.register('model:job', App.Job);\n  container.register('store:main', DS.Store);\n  container.register('adapter:application', DS.FixtureAdapter);\n  container.register('serializer:application', DS.RESTSerializer);\n  container.register('transform:boolean', DS.BooleanTransform);\n  container.register('transform:date', DS.DateTransform);\n  container.register('transform:number', DS.NumberTransform);\n  container.register('transform:string', DS.StringTransform);\n  container.register('transform:isodate', App.IsodateTransform);\n});\n\ntest('filename prefix',function () {\n  var _this = this,\n      controller,\n      store = this.container.lookup('store:main'),\n      testId = 'job_1234567890000_0000';\n\n  Em.run(function () {\n    controller = _this.subject({\n      model: store.createRecord('job',{jobId:testId})\n    });\n    ok(controller.get('suggestedFilenamePrefix') == testId);\n  });\n\n});\n\ntest('get script content',function () {\n  var _this = this,\n      controller,\n      store = this.container.lookup('store:main');\n\n  Em.run(function () {\n    controller = _this.subject({\n      model: store.createRecord('job',{pigScript:store.createRecord('file',{fileContent:'test_content'})})\n    });\n    controller.get('scriptContents').then(function (scriptContents) {\n      ok(controller.get('scriptContents.isFulfilled') && controller.get('scriptContents.fileContent') == 'test_content','file loaded');\n    });\n    ok(controller.get('scriptContents.isPending'), 'file is loading');\n  });\n\n});\n\ntest('toggle fullscreen', function () {\n  var controller = this.subject();\n\n  Em.run(function () {\n    controller.send('fullscreen');\n    ok(controller.get('fullscreen'));\n  });\n});\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleFor('controller:script', 'App.ScriptController',\n  {\n    needs:['controller:pig','controller:scriptEdit'],\n    teardown:function (container) {\n      container.lookup('store:main').unloadAll('job');\n      container.lookup('store:main').unloadAll('script');\n      container.lookup('store:main').unloadAll('file');\n    }\n  },\n  function (container) {\n    container.register('model:file', App.File);\n    container.register('model:script', App.Script);\n    container.register('model:job', App.Job);\n    container.register('store:main', DS.Store);\n    container.register('adapter:application', DS.FixtureAdapter);\n    container.register('serializer:application', DS.RESTSerializer);\n    container.register('transform:boolean', DS.BooleanTransform);\n    container.register('transform:date', DS.DateTransform);\n    container.register('transform:number', DS.NumberTransform);\n    container.register('transform:string', DS.StringTransform);\n    container.register('transform:isodate', App.IsodateTransform);\n  }\n);\n\nApp.Job.reopenClass({\n  FIXTURES: [\n    { id: 1, status: 'SUBMITTED', scriptId:1, title: 'test_job'},\n    { id: 2, status: 'SUBMITTED', scriptId:1, title: 'test_job'},\n    { id: 3, status: 'SUBMITTED', scriptId:2, title: 'test_job'}\n  ]\n});\n\nApp.Script.reopenClass({\n  FIXTURES: [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 }\n  ]\n});\n\ntest('polling starts when activeJobs is set',function () {\n  expect(1);\n  var controller = this.subject(),\n      store = this.container.lookup('store:main');\n  Em.run(function () {\n    stop();\n    store.find('job',1).then(function (job) {\n      start();\n      controller.set('activeJobs',[job]);\n      ok(controller.get('pollster.timer'));\n    });\n  });\n});\n\ntest('reset activeJobs when activeScript id changes',function () {\n  expect(1);\n  var controller = this.subject(),\n      store = this.container.lookup('store:main');\n  var pig = controller.get('controllers.pig');\n\n\n  var scripts = store.find('script');\n  var jobs = store.find('job');\n  Em.run(function () {\n    stop();\n    Em.RSVP.all([scripts,jobs]).then(function () {\n      start();\n      var initialJobs = jobs.filterBy('scriptId',1);\n\n      pig.set('model',scripts);\n      pig.set('activeScriptId',1);\n      controller.set('activeJobs',initialJobs);\n\n      pig.set('activeScriptId',2);\n\n      ok(Em.isEmpty(controller.get('activeJobs')));\n    });\n  });\n});\n\ntest('tabs test',function () {\n  expect(5);\n  var controller = this.subject(),\n      store = this.container.lookup('store:main'),\n      pig = controller.get('controllers.pig');\n\n  stop();\n  store.find('job').then(function (jobs) {\n    start();\n    Em.run(function () {\n      ok(controller.get('tabs.length')==2,'start with two tabs');\n\n      controller.get('activeJobs').pushObject(jobs.objectAt(0));\n      stop();\n      Em.run.next(function () {\n        start();\n        ok(controller.get('tabs.length') == 3, 'added new tab for active job');\n\n        jobs.objectAt(0).set('status','RUNNING');\n        ok(controller.get('jobTabs.firstObject.label').toUpperCase().match(/RUNNING$/), 'label updates on job status change');\n\n        controller.get('activeJobs').pushObject(jobs.objectAt(1));\n        stop();\n        Em.run.next(function () {\n          start();\n          ok(controller.get('tabs.length') == 4, 'added one more tab for active job');\n\n          pig.set('activeScriptId',2);\n\n          stop();\n          Em.run.next(function () {\n            start();\n            ok(controller.get('tabs.length') == 2, 'reset tabs on script change');\n          })\n        });\n      });\n    });\n  });\n});\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleForModel('job', 'App.Job',{\n  needs:['model:file']\n});\n\ntest('file relationship', function() {\n  expect(2);\n  var Job = this.store().modelFor('job'),\n      relationship = Ember.get(Job, 'relationshipsByName').get('pigScript');\n\n  equal(relationship.kind, 'belongsTo');\n  equal(relationship.type.typeKey, App.File.typeKey);\n});\n\ntest('duration format',function() {\n  expect(3);\n  var job = this.subject();\n\n  Em.run(function(){\n    job.set('duration', 60);\n  });\n\n  equal(job.get('durationTime'),\"1 min, 0 sec\");\n\n  Em.run(function(){\n    job.set('duration', 60*60);\n  });\n\n  equal(job.get('durationTime'),\"1 hrs, 0 min, 0 sec\");\n\n  Em.run(function(){\n    job.set('duration', 60*60*24);\n  });\n\n  equal(job.get('durationTime'),\"24 hrs, 0 min, 0 sec\");\n});\n\ntest('percentStatus',function() {\n  expect(2);\n  var job = this.subject();\n\n  Em.run(function(){\n    job.setProperties({'percentComplete': 50,'status':'RUNNING'});\n  });\n\n  equal(job.get('percentStatus'),50);\n\n  Em.run(function(){\n    job.set('status','FAILED');\n  });\n\n  equal(job.get('percentStatus'),100);\n\n});\n\ntest('setting argumets array property',function () {\n  var job = this.subject(),\n      args = job.get('argumentsArray');\n\n  ok(args.length === 0 && !job.get('templetonArguments'));\n\n  Em.run(function(){\n    job.set('argumentsArray',args.pushObject('test_agr') && args);\n  });\n\n  ok(job.get('argumentsArray').length == 1 && job.get('templetonArguments') == 'test_agr')\n});\n\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmoduleForModel('script', 'App.Script',{\n  needs:['model:file']\n});\n\ntest('setting argumets array property',function () {\n  var script = this.subject(),\n      args = script.get('argumentsArray');\n\n  ok(args.length === 0 && !script.get('templetonArguments'));\n\n  Em.run(function(){\n    script.set('argumentsArray',args.pushObject('test_agr') && args);\n  });\n\n  ok(script.get('argumentsArray').length == 1 && script.get('templetonArguments') == 'test_agr')\n});\n\ntest('file relationship', function() {\n  var Script = this.store().modelFor('script'),\n      relationship = Ember.get(Script, 'relationshipsByName').get('pigScript');\n\n  equal(relationship.kind, 'belongsTo');\n  equal(relationship.type.typeKey, App.File.typeKey);\n});\n\ntest('blank title test',function () {\n  expect(4);\n  var script = this.subject();\n\n  Em.run(function(){\n    script.set('title','');\n  });\n\n  ok(script.get('isBlankTitle'),'script with empty string title is falsy');\n\n  Em.run(function(){\n    script.set('title',' ');\n  });\n\n  ok(script.get('isBlankTitle'),'script with whitespase title is falsy');\n\n  Em.run(function(){\n    script.set('title','\\t');\n  });\n\n  ok(script.get('isBlankTitle'),'script with tabulation title is falsy');\n\n  Em.run(function(){\n    script.set('title','test_title');\n  });\n\n  ok(!script.get('isBlankTitle'),'script with non-whitespace title is truthy');\n});\n"]}