{"version":3,"sources":["vendor/ember-cli/app-prefix.js","hive/adapters/application.js","hive/adapters/database.js","hive/adapters/file-upload.js","hive/adapters/file.js","hive/adapters/upload-table.js","hive/app.js","hive/components/alert-message-widget.js","hive/components/collapsible-widget.js","hive/components/column-filter-widget.js","hive/components/date-range-widget.js","hive/components/ember-selectize.js","hive/components/expander-widget.js","hive/components/extended-input.js","hive/components/file-upload.js","hive/components/job-tr-view.js","hive/components/jqui-autocomplete/component.js","hive/components/jqui-button/component.js","hive/components/jqui-datepicker/component.js","hive/components/jqui-progress-bar/component.js","hive/components/jqui-slider/component.js","hive/components/jqui-spinner/component.js","hive/components/modal-widget.js","hive/components/navbar-widget.js","hive/components/no-bubbling.js","hive/components/notify-widget.js","hive/components/number-range-widget.js","hive/components/panel-widget.js","hive/components/popover-widget.js","hive/components/progress-widget.js","hive/components/query-editor.js","hive/components/select-widget.js","hive/components/tabs-widget.js","hive/components/tree-view.js","hive/components/typeahead-widget.js","hive/components/udf-tr-view.js","hive/components/visualization-tabs-widget.js","hive/controllers/application.js","hive/controllers/databases.js","hive/controllers/history.js","hive/controllers/index.js","hive/controllers/index/history-query/explain.js","hive/controllers/index/history-query/logs.js","hive/controllers/index/history-query/results.js","hive/controllers/insert-udfs.js","hive/controllers/messages.js","hive/controllers/modal-delete.js","hive/controllers/modal-save-query.js","hive/controllers/modal-save.js","hive/controllers/open-queries.js","hive/controllers/queries.js","hive/controllers/query-tabs.js","hive/controllers/settings.js","hive/controllers/tez-ui.js","hive/controllers/udfs.js","hive/controllers/upload-table.js","hive/controllers/visual-explain.js","hive/controllers/visualization-ui.js","hive/helpers/all-uppercase.js","hive/helpers/code-helper.js","hive/helpers/date-binding.js","hive/helpers/dynamic-component.js","hive/helpers/fa-icon.js","hive/helpers/format-column-type.js","hive/helpers/log-helper.js","hive/helpers/path-binding.js","hive/helpers/preformatted-string.js","hive/helpers/tb-helper.js","hive/initializers/export-application-global.js","hive/initializers/i18n.js","hive/mixins/filterable.js","hive/mixins/sortable.js","hive/models/database.js","hive/models/file-resource.js","hive/models/file.js","hive/models/job.js","hive/models/saved-query.js","hive/models/udf.js","hive/router.js","hive/routes/application.js","hive/routes/history.js","hive/routes/index/history-query/explain.js","hive/routes/index/history-query/index.js","hive/routes/index/history-query/logs.js","hive/routes/index/history-query/results.js","hive/routes/index/index.js","hive/routes/index/saved-query.js","hive/routes/loading.js","hive/routes/queries.js","hive/routes/udfs.js","hive/serializers/database.js","hive/serializers/file.js","hive/services/database.js","hive/services/file.js","hive/services/job-progress.js","hive/services/job.js","hive/services/notify.js","hive/services/session.js","hive/services/settings.js","hive/templates/application.js","hive/templates/components/alert-message-widget.js","hive/templates/components/collapsible-widget.js","hive/templates/components/column-filter-widget.js","hive/templates/components/date-range-widget.js","hive/templates/components/expander-widget.js","hive/templates/components/job-tr-view.js","hive/templates/components/modal-widget.js","hive/templates/components/navbar-widget.js","hive/templates/components/no-bubbling.js","hive/templates/components/notify-widget.js","hive/templates/components/number-range-widget.js","hive/templates/components/panel-widget.js","hive/templates/components/popover-widget.js","hive/templates/components/progress-widget.js","hive/templates/components/query-editor.js","hive/templates/components/select-widget.js","hive/templates/components/tabs-widget.js","hive/templates/components/tree-view.js","hive/templates/components/udf-tr-view.js","hive/templates/components/visualization-tabs-widget.js","hive/templates/databases-search-results.js","hive/templates/databases-tree.js","hive/templates/databases.js","hive/templates/history.js","hive/templates/index.js","hive/templates/index/history-query/explain.js","hive/templates/index/history-query/logs.js","hive/templates/index/history-query/results.js","hive/templates/insert-udfs.js","hive/templates/loading.js","hive/templates/logs.js","hive/templates/message.js","hive/templates/messages.js","hive/templates/modal-delete.js","hive/templates/modal-save-query.js","hive/templates/modal-save.js","hive/templates/notification.js","hive/templates/open-queries.js","hive/templates/queries.js","hive/templates/query-tabs.js","hive/templates/redirect.js","hive/templates/settings.js","hive/templates/tez-ui.js","hive/templates/udfs.js","hive/templates/upload-table.js","hive/templates/visual-explain.js","hive/templates/visualization-ui.js","hive/tests/blanket-options.js","hive/tests/helpers/api-mock.js","hive/tests/helpers/resolver.js","hive/tests/helpers/start-app.js","hive/tests/integration/database-test.js","hive/tests/integration/history-test.js","hive/tests/integration/query-editor-test.js","hive/tests/integration/saved-queries-test.js","hive/tests/integration/tez-ui-test.js","hive/tests/integration/udfs-test.js","hive/tests/test-helper.js","hive/tests/unit/adapters/application.js","hive/tests/unit/adapters/file.js","hive/tests/unit/components/alert-message-widget-test.js","hive/tests/unit/components/collapsible-widget-test.js","hive/tests/unit/components/column-filter-widget-test.js","hive/tests/unit/components/date-range-widget-test.js","hive/tests/unit/components/expander-widget-test.js","hive/tests/unit/components/extended-input-test.js","hive/tests/unit/components/job-tr-view-test.js","hive/tests/unit/components/modal-widget-test.js","hive/tests/unit/components/no-bubbling-test.js","hive/tests/unit/components/number-range-widget-test.js","hive/tests/unit/components/popover-widget-test.js","hive/tests/unit/components/progress-widget-test.js","hive/tests/unit/components/query-editor-test.js","hive/tests/unit/components/select-widget-test.js","hive/tests/unit/components/tabs-wiget-test.js","hive/tests/unit/components/typeahead-widget-test.js","hive/tests/unit/controllers/databases-test.js","hive/tests/unit/controllers/history-test.js","hive/tests/unit/controllers/index-test.js","hive/tests/unit/controllers/insert-udfs-test.js","hive/tests/unit/controllers/messages-test.js","hive/tests/unit/controllers/open-queries-test.js","hive/tests/unit/controllers/queries-test.js","hive/tests/unit/controllers/settings-test.js","hive/tests/unit/controllers/tez-ui-test.js","hive/tests/unit/controllers/udfs-test.js","hive/tests/unit/helpers/path-binding-test.js","hive/tests/unit/services/notify-test.js","hive/tests/unit/services/settings-test.js","hive/tests/unit/views/visual-explain-test.js","hive/transforms/date.js","hive/utils/constants.js","hive/utils/dag-rules.js","hive/utils/functions.js","hive/views/index.js","hive/views/message.js","hive/views/messages.js","hive/views/notification.js","hive/views/tez-ui.js","hive/views/visual-explain.js","hive/views/visualization-ui.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('hive/adapters/application', ['exports', 'ember-data', 'hive/utils/constants'], function (exports, DS, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].RESTAdapter.extend({\n    headers: {\n      'X-Requested-By': 'ambari',\n      'Content-Type': 'application/json'\n      //,'Authorization': 'Basic YWRtaW46YWRtaW4='\n    },\n\n    buildURL: function () {\n      var version = constants['default'].adapter.version,\n          instanceName = constants['default'].adapter.instance;\n\n      var params = window.location.pathname.split('/').filter(function (param) {\n        return !!param;\n      });\n\n      if (params[params.length - 3] === 'HIVE') {\n        version = params[params.length - 2];\n        instanceName = params[params.length - 1];\n      }\n\n      var prefix = constants['default'].adapter.apiPrefix + version + constants['default'].adapter.instancePrefix + instanceName;\n      var url = this._super.apply(this, arguments);\n      return prefix + url;\n    }\n  });\n\n});","define('hive/adapters/database', ['exports', 'hive/adapters/application'], function (exports, application) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = application['default'].extend({\n    pathForType: function (type) {\n      return 'resources/ddl/' + type;\n    }\n  });\n\n});","define('hive/adapters/file-upload', ['exports', 'ember-uploader', 'ember'], function (exports, EmberUploader, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = EmberUploader['default'].Uploader.extend({\n    headers: {},\n\n    // Override\n    _ajax: function(settings) {\n      settings = Ember['default'].merge(settings, this.getProperties('headers'));\n      console.log(\"_ajax : settings: \" + JSON.stringify(settings));\n      return this._super(settings);\n    }\n  });\n\n});","define('hive/adapters/file', ['exports', 'hive/adapters/application', 'hive/utils/constants'], function (exports, application, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = application['default'].extend({\n    pathForType: function (type) {\n      return constants['default'].adapter.resourcePrefix + type;\n    }\n  });\n\n});","define('hive/adapters/upload-table', ['exports', 'ember-uploader', 'ember', 'hive/adapters/application', 'hive/adapters/file-upload'], function (exports, EmberUploader, Ember, application, FileUploader) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = application['default'].extend({\n    hdrs : function(){\n      console.log(\"inside hdrs : headers : \",this.get('headers'));\n      var h = Ember['default'].$.extend(true, {},this.get('headers'));\n      delete h['Content-Type'];\n      return h;\n    }.property('headers'),\n\n    buildUploadURL: function (path) {\n      return this.buildURL() + \"/resources/upload/\" + path;\n    },\n\n    uploadFiles: function (path, files, extras) {\n      var uploadUrl = this.buildUploadURL(path);\n\n      console.log(\"uplaoder : uploadURL : \", uploadUrl);\n      console.log(\"uploader : extras : \", extras);\n      console.log(\"uploader : files : \", files);\n\n      console.log(\"hdrs : \", this.get('hdrs'));\n      var uploader = FileUploader['default'].create({\n        headers: this.get('hdrs'),\n        url: uploadUrl\n      });\n\n      if (!Ember['default'].isEmpty(files)) {\n        var promise = uploader.upload(files[0], extras);\n        return promise;\n      }\n    },\n\n    createTable: function (tableData) {\n      var _this = this;\n      var postHeader = JSON.parse(JSON.stringify(this.get('headers')));\n      console.log(\"headers postHeadesfsfdfsfsfss : : \" , postHeader);\n      return Ember['default'].$.ajax(      {\n          url :  this.buildUploadURL(\"createTable\"),\n          type : 'post',\n          data: JSON.stringify(tableData),\n          headers: this.get('headers'),\n          dataType : 'json'\n        }\n      );\n    },\n\n    getCreateTableResult : function(jobId){\n      return Ember['default'].$.ajax(this.buildUploadURL(\"createTable/status\"),{\n        data : {\"jobId\":jobId},\n        type: \"get\",\n        headers: this.get('headers')\n      });\n    }\n  });\n\n});","define('hive/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'hive/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('hive/components/alert-message-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    actions: {\n      remove: function () {\n        this.sendAction('removeMessage', this.get('message'));\n      },\n\n      toggleMessage: function () {\n        this.toggleProperty('message.isExpanded');\n\n        if (!this.get('message.isExpanded')) {\n          this.sendAction('removeLater', this.get('message'));\n        }\n      }\n    }\n  });\n\n});","define('hive/components/collapsible-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'collapsible',\n\n    actions: {\n      toggle: function () {\n        this.toggleProperty('isExpanded');\n\n        if (this.get('isExpanded')) {\n          this.sendAction('expanded', this.get('heading'), this.get('toggledParam'));\n        }\n      },\n\n      sendControlAction: function (action) {\n        this.set('controlAction', action);\n        this.sendAction('controlAction', this.get('heading'), this.get('toggledParam'));\n      }\n    }\n  });\n\n});","define('hive/components/column-filter-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'column-filter',\n\n    didInsertElement: function () {\n      if (this.get('filterValue')) {\n        this.send('sendFilter');\n      }\n    },\n\n    isSorted: (function () {\n      var sortProperties = this.get('sortProperties');\n\n      if (sortProperties) {\n        return sortProperties[0] === this.get('column.property');\n      } else {\n        return false;\n      }\n    }).property('sortProperties'),\n\n    actions: {\n      sendSort: function () {\n        this.sendAction('columnSorted', this.get('column.property'));\n      },\n\n      sendFilter: function (params) {\n        if (params && (params.from || params.from === 0) && (params.to || params.to === 0)) {\n          this.set('filterValue', Ember['default'].Object.create({\n            min: params.from,\n            max: params.to\n          }));\n        }\n\n        this.sendAction('columnFiltered', this.get('column.property'), this.get('filterValue'));\n      }\n    }\n  });\n\n});","define('hive/components/date-range-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n   /* globals moment */\n\n  exports['default'] = Ember['default'].Component.extend({\n    displayFromDate: function () {\n      return moment(this.get('dateRange.from')).format('MM/DD/YYYY');\n    }.property('dateRange.from'),\n\n    displayToDate: function () {\n      return moment(this.get('dateRange.to')).format('MM/DD/YYYY');\n    }.property('dateRange.to'),\n\n    updateMinDate: function () {\n      if (this.get('rendered')) {\n        this.$('.toDate').datepicker(\"option\", \"minDate\", new Date(this.get('dateRange.from')));\n      }\n    }.observes('dateRange.from'),\n\n    updateMaxDate: function () {\n      if (this.get('rendered')) {\n        this.$('.fromDate').datepicker(\"option\", \"maxDate\", new Date(this.get('dateRange.to')));\n      }\n    }.observes('dateRange.to'),\n\n    didInsertElement: function () {\n      var self = this;\n      var dateRange = this.get('dateRange');\n\n      if (!dateRange.get('min') && !dateRange.get('max')) {\n        dateRange.set('max', new Date());\n      }\n\n      if (!dateRange.get('from') && !dateRange.get('to')) {\n        dateRange.set('from', dateRange.get('min'));\n        dateRange.set('to', dateRange.get('max'));\n      }\n\n      this.$(\".fromDate\").datepicker({\n        defaultDate: new Date(dateRange.get(\"from\")),\n        maxDate: new Date(dateRange.get('to')),\n\n        onSelect: function (selectedDate) {\n          self.$(\".toDate\").datepicker(\"option\", \"minDate\", selectedDate);\n\n          dateRange.set('from', new Date(selectedDate).getTime());\n          self.sendAction('rangeChanged', dateRange);\n        }\n      });\n\n      this.$(\".toDate\").datepicker({\n        defaultDate: new Date(dateRange.get('to')),\n        minDate: new Date(dateRange.get('from')),\n\n        onSelect: function (selectedDate) {\n          selectedDate += ' 23:59';\n\n          self.$(\".fromDate\").datepicker(\"option\", \"maxDate\", selectedDate);\n\n          dateRange.set('to', new Date(selectedDate).getTime());\n          self.sendAction('rangeChanged', dateRange);\n        }\n      });\n\n      this.set('rendered', true);\n    }\n  });\n\n});","define('hive/components/ember-selectize', ['exports', 'ember-cli-selectize/components/ember-selectize'], function (exports, EmberSelectizeComponent) {\n\n\t'use strict';\n\n\texports['default'] = EmberSelectizeComponent['default'];\n\n});","define('hive/components/expander-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'expander',\n\n    didInsertElement: function () {\n      if (this.get('isExpanded')) {\n        this.$('.accordion-body').toggle();\n      }\n    },\n\n    actions: {\n      toggle: function () {\n        this.toggleProperty('isExpanded');\n        this.$('.accordion-body').toggle(200);\n      }\n    }\n  });\n\n});","define('hive/components/extended-input', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].TextField.extend(Ember['default'].I18n.TranslateableProperties, {\n    didInsertElement: function () {\n      var dynamicValue = this.get('dynamicValue');\n      var dynamicContext = this.get('dynamicContext');\n\n      if (dynamicValue && dynamicContext) {\n        this.set('value', dynamicContext.get(dynamicValue));\n      }\n    },\n\n    sendValueChanged: function () {\n      var dynamicValue = this.get('dynamicValue');\n      var dynamicContext = this.get('dynamicContext');\n\n      if (dynamicValue && dynamicContext) {\n        dynamicContext.set(dynamicValue, this.get('value'));\n      }\n\n      this.sendAction('valueChanged', this.get('value'));\n    },\n\n    keyUp: function (e) {\n      //if user has pressed enter\n      if (e.keyCode === 13) {\n        this.sendAction('valueSearched', this.get('value'));\n      } else {\n        Ember['default'].run.debounce(this, this.get('sendValueChanged'), 300);\n      }\n    }\n  });\n\n});","define('hive/components/file-upload', ['exports', 'ember-uploader'], function (exports, EmberUploader) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = EmberUploader['default'].FileField.extend({\n    filesDidChange: function(files) {\n      this.sendAction('filesUploaded',files); // sends this action to controller.\n    }\n  });\n\n});","define('hive/components/job-tr-view', ['exports', 'ember', 'hive/utils/constants', 'hive/utils/functions'], function (exports, Ember, constants, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: '',\n\n    canStop: function () {\n      return utils['default'].insensitiveCompare(this.get('job.status'), constants['default'].statuses.running, constants['default'].statuses.initialized, constants['default'].statuses.pending);\n    }.property('job.status'),\n\n    actions: {\n      requestFile: function () {\n        this.toggleProperty('expanded');\n\n        this.sendAction('onFileRequested', this.get('job'));\n      },\n\n      stopJob: function () {\n        this.sendAction('onStopJob', this.get('job'));\n      }\n    }\n  });\n\n});","define('hive/components/jqui-autocomplete/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-autocomplete/component'], function (exports, Ember, jquiAutocomplete) {\n\n\t'use strict';\n\n\texports['default'] = jquiAutocomplete['default'];\n\n});","define('hive/components/jqui-button/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-button/component'], function (exports, Ember, jquiButton) {\n\n\t'use strict';\n\n\texports['default'] = jquiButton['default'];\n\n});","define('hive/components/jqui-datepicker/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-datepicker/component'], function (exports, Ember, jquiDatepicker) {\n\n\t'use strict';\n\n\texports['default'] = jquiDatepicker['default'];\n\n});","define('hive/components/jqui-progress-bar/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-progress-bar/component'], function (exports, Ember, jquiProgressBar) {\n\n\t'use strict';\n\n\texports['default'] = jquiProgressBar['default'];\n\n});","define('hive/components/jqui-slider/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-slider/component'], function (exports, Ember, jquiSlider) {\n\n\t'use strict';\n\n\texports['default'] = jquiSlider['default'];\n\n});","define('hive/components/jqui-spinner/component', ['exports', 'ember', 'ember-cli-jquery-ui/components/jqui-spinner/component'], function (exports, Ember, jquiSpinner) {\n\n\t'use strict';\n\n\texports['default'] = jquiSpinner['default'];\n\n});","define('hive/components/modal-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend(Ember['default'].I18n.TranslateableProperties, {\n    show: function () {\n      var self = this;\n\n      this.$('.modal').modal().on('hidden.bs.modal', function () {\n        self.sendAction('close');\n      });\n    }.on('didInsertElement'),\n\n    keyPress: function (e) {\n      Ember['default'].run.debounce(this, function () {\n        if (e.which === 13) {\n          this.send('ok');\n        } else if (e.which === 27) {\n          this.send('close');\n        }\n      }, 200);\n    },\n\n    setupEvents: function () {\n      this.$(document).on('keyup', Ember['default'].$.proxy(this.keyPress, this));\n    }.on('didInsertElement'),\n\n    destroyEvents: function () {\n      this.$(document).off('keyup', Ember['default'].$.proxy(this.keyPress, this));\n    }.on('willDestroyElement'),\n\n    actions: {\n      ok: function () {\n        this.$('.modal').modal('hide');\n        this.sendAction('ok');\n      },\n      close: function () {\n        this.$('.modal').modal('hide');\n        this.sendAction('close');\n      }\n    }\n  });\n\n});","define('hive/components/navbar-widget', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'navigation-bar',\n    title: constants['default'].appTitle,\n\n    items: Ember['default'].A([\n      Ember['default'].Object.create({text: 'menus.query',\n                           path: constants['default'].namingConventions.routes.index}),\n\n      Ember['default'].Object.create({text: 'menus.savedQueries',\n                           path: constants['default'].namingConventions.routes.queries}),\n\n      Ember['default'].Object.create({text: 'menus.history',\n                           path: constants['default'].namingConventions.routes.history}),\n\n      Ember['default'].Object.create({text: 'menus.udfs',\n                           path: constants['default'].namingConventions.routes.udfs}),\n\n      Ember['default'].Object.create({text: 'menus.uploadTable',\n        path: constants['default'].namingConventions.routes.uploadTable})\n    ])\n  });\n\n});","define('hive/components/no-bubbling', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    didInsertElement: function () {\n      var self = this;\n\n      this.$().click(function (e) {\n        e.stopPropagation();\n\n        self.sendAction('click', self.get('data'));\n      });\n    }\n  });\n\n});","define('hive/components/notify-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'notifications',\n    classNames: [ 'notifications-container' ],\n    removeNotificationAction: 'removeNotification',\n\n    actions: {\n      removeNotification: function (notification) {\n        this.sendAction('removeNotificationAction', notification);\n      }\n    }\n  });\n\n});","define('hive/components/number-range-widget', ['exports', 'ember', 'hive/utils/functions'], function (exports, Ember, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    didInsertElement: function () {\n      var self = this;\n      var numberRange = this.get('numberRange');\n\n      if (!numberRange.get('from') && !numberRange.get('to')) {\n        numberRange.set('from', numberRange.get('min'));\n        numberRange.set('to', numberRange.get('max'));\n        numberRange.set('fromDuration',utils['default'].secondsToHHMMSS(numberRange.get('min')));\n        numberRange.set('toDuration',utils['default'].secondsToHHMMSS(numberRange.get('max')));\n\n      }\n\n      this.$('.slider').slider({\n        range: true,\n        min: numberRange.get('min'),\n        max: numberRange.get('max'),\n        units: numberRange.get('units'),\n        values: [numberRange.get('from'), numberRange.get('to')],\n\n        slide: function (event, ui) {\n          numberRange.set('from', ui.values[0]);\n          numberRange.set('to', ui.values[1]);\n          numberRange.set('fromDuration', utils['default'].secondsToHHMMSS(ui.values[0]));\n          numberRange.set('toDuration', utils['default'].secondsToHHMMSS(ui.values[1]));\n\n        },\n\n        change: function () {\n          self.sendAction('rangeChanged', numberRange);\n        }\n      });\n\n      this.set('rendered', true);\n    },\n\n    updateMin: function () {\n      if (this.get('rendered')) {\n        this.$('.slider').slider('values', 0, this.get('numberRange.from'));\n      }\n    }.observes('numberRange.from'),\n\n    updateMax: function () {\n      if (this.get('rendered')) {\n        this.$('.slider').slider('values', 1, this.get('numberRange.to'));\n      }\n    }.observes('numberRange.to')\n  });\n\n});","define('hive/components/panel-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend(Ember['default'].I18n.TranslateableProperties, {\n    tagName: 'panel',\n\n    actions: {\n      sendMenuItemAction: function (action) {\n        this.set('menuItemAction', action);\n        this.sendAction('menuItemAction');\n      }\n    }\n  });\n\n});","define('hive/components/popover-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend(Ember['default'].I18n.TranslateableProperties, {\n    tagName: 'popover',\n    attributeBindings: [ 'title', 'content:data-content' ],\n\n    didInsertElement: function () {\n      this.$().popover({\n        html: true,\n        placement: 'left',\n        trigger: 'hover'\n      });\n\n      this.$().attr('data-content', this.$('.hide').html());\n    }\n  });\n\n});","define('hive/components/progress-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific `language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'progress-bar',\n\n    updateValue: function () {\n      var progress = this.get('value') ? this.get('value').toFixed() : 0;\n\n      this.set('style', 'width: %@%'.fmt(progress));\n      this.set('percentage', '%@%'.fmt(progress));\n    }.observes('value').on('didInsertElement')\n  });\n\n});","define('hive/components/query-editor', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /* global CodeMirror */\n\n  /**\n  /* Copyright (C) 2014 by Marijn Haverbeke <marijnh@gmail.com> and others\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n\n   * The above copyright notice and this permission notice shal l be included in\n   * all copies or substantial portions of the Software.\n  */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'query-editor',\n\n    tablesChanged: function () {\n      //Format hintOptions object as needed by the CodeMirror\n      //http://stackoverflow.com/questions/20023381/codemirror-how-add-tables-to-sql-hint\n      this.set('editor.options.hintOptions', { tables: this.get('tables') });\n    }.observes('tables'),\n\n    getColumnsHint: function (cm, tableName) {\n      var callback = function () {\n        CodeMirror.showHint(cm);\n      };\n\n      this.sendAction('columnsNeeded', tableName, callback);\n    },\n\n    initEditor: function () {\n      var editor,\n          updateSize,\n          self = this;\n\n      updateSize = function () {\n        editor.setSize(self.$(this).width(), self.$(this).height());\n        editor.refresh();\n      };\n\n      this.set('editor', CodeMirror.fromTextArea(document.getElementById('code-mirror'), {\n        mode: 'text/x-hive',\n        hint: CodeMirror.hint.sql,\n        indentWithTabs: true,\n        smartIndent: true,\n        lineNumbers: true,\n        matchBrackets : true,\n        autofocus: true,\n        extraKeys: {'Ctrl-Space': 'autocomplete'}\n      }));\n\n      CodeMirror.commands.autocomplete = function (cm) {\n        var lastWord = cm.getValue().split(' ').pop();\n\n        //if user wants to fill in a column\n        if (lastWord.indexOf('.') > -1) {\n          lastWord = lastWord.split('.')[0];\n\n          self.getColumnsHint(cm, lastWord);\n        } else {\n          CodeMirror.showHint(cm);\n        }\n      };\n\n      editor = this.get('editor');\n\n      editor.on('cursorActivity', function () {\n        self.set('highlightedText', editor.getSelections());\n      });\n\n      editor.setValue(this.get('query') || '');\n\n      editor.on('change', function (instance) {\n        Ember['default'].run(function () {\n          self.set('query', instance.getValue());\n        });\n      });\n\n      this.$('.CodeMirror').resizable({\n        handles: 's',\n\n        resize: function () {\n          Ember['default'].run.debounce(this, updateSize, 150);\n        }\n      }).find('.ui-resizable-s').addClass('grip fa fa-reorder');\n\n      this.tablesChanged();\n    }.on('didInsertElement'),\n\n    updateValue: function () {\n      var query = this.get('query');\n      var editor = this.get('editor');\n\n      var isEditorExplainQuery = (editor.getValue().toUpperCase().trim().indexOf('EXPLAIN') === 0);\n      var isFinalExplainQuery = (query.toUpperCase().trim().indexOf('EXPLAIN') === 0);\n\n      if (editor.getValue() !== query) {\n\n        if(!isEditorExplainQuery && !isFinalExplainQuery){\n          editor.setValue(query || '');\n        } else if(!isEditorExplainQuery && isFinalExplainQuery){\n          editor.setValue(editor.getValue() || '');\n        } else if(isEditorExplainQuery && isFinalExplainQuery){\n          editor.setValue(editor.getValue() || '');\n        } else{\n          editor.setValue(query || '');\n        }\n\n      }\n\n    }.observes('query')\n  });\n\n});","define('hive/components/select-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend(Ember['default'].I18n.TranslateableProperties, {\n    tagName: 'dropdown',\n\n    selectedLabel: function () {\n      var value;\n\n      //if there's an item selected, retrieve the property to be displayed as a label\n      if (this.get('selectedValue') && this.get('labelPath')) {\n        value = this.get('selectedValue').get(this.get('labelPath'));\n\n        if (value) {\n          return value;\n        }\n      }\n\n      //else if a default label has been provided, use it as the selected label.\n      if (this.get('defaultLabel')) {\n        return this.get('defaultLabel');\n      }\n    }.property('selectedValue'),\n\n    didInsertElement: function () {\n      //if no selected item nor defaultLabel, set the selected value\n      if (!this.get('selectedValue') && !this.get('defaultLabel') && this.get('items')) {\n        this.set('selectedValue', this.get('items').objectAt(0));\n      }\n    },\n\n    actions: {\n      select: function (item){\n        this.set('selectedValue', item);\n      },\n\n      add: function () {\n        this.sendAction('itemAdded');\n      },\n\n      edit: function (item) {\n        this.sendAction('itemEdited', item);\n      },\n\n      remove: function (item) {\n        this.sendAction('itemRemoved', item);\n      }\n    }\n  });\n\n});","define('hive/components/tabs-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'tabs',\n\n    didInsertElement: function () {\n      var tabToActivate,\n          tabs = this.get('tabs');\n\n      if (tabs.get('length')) {\n        tabToActivate = tabs.find(function (tab) {\n          return tab.get('active');\n        });\n\n        if (tabToActivate) {\n          this.set('selectedTab', tabToActivate);\n        } else {\n          this.set('selectedTab', tabs.objectAt(0));\n        }\n      }\n    },\n\n    activateTab: function () {\n      var selectedTab = this.get('selectedTab');\n\n      selectedTab.set('active', true);\n\n      this.get('tabs').without(selectedTab).forEach(function (tab) {\n        tab.set('active', false);\n      });\n    }.observes('selectedTab'),\n\n    removeEnabled: function () {\n      return this.get('canRemove') && this.get('tabs.length') > 1;\n    }.property('tabs.@each'),\n\n    actions: {\n      remove: function (tab) {\n        this.sendAction('removeClicked', tab);\n      },\n\n      selectTab: function (tab) {\n        this.set('selectedTab', tab);\n      },\n\n      titleClick: function(tab) {\n        this.sendAction('onActiveTitleClick', tab);\n      }\n    }\n  });\n\n});","define('hive/components/tree-view', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'tree-view'\n  });\n\n});","define('hive/components/typeahead-widget', ['exports', 'ember-cli-selectize/components/ember-selectize', 'ember'], function (exports, Typeahead, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Typeahead['default'].extend(Ember['default'].I18n.TranslateableProperties, {\n    didInsertElement: function () {\n      this._super();\n\n      if (!this.get('selection') && this.get('content.firstObject')) {\n        this.set('selection', this.get('content.firstObject'));\n      }\n\n      this.selectize.on('dropdown_close', Ember['default'].$.proxy(this.onClose, this));\n\n      if($('.selectize-input')) {$('.selectize-input').addClass( \"mozBoxSizeFix\" );}\n\n      var currentKeyName = this.get('safeValue');\n      var currentTypehead = $('*[keyname=\"' + currentKeyName +'\"]');\n\n      if (currentTypehead.find($('.selectize-input')).has('.item').length == 0) {\n        currentTypehead.find($('.selectize-input')).addClass(\"has-options has-items \");\n\n        currentTypehead.find($('.selectized option:selected')).val(currentKeyName);\n        currentTypehead.find($('.selectized option:selected')).text(currentKeyName);\n\n        currentTypehead.find($('.selectize-input input')).css({'opacity': 0 , 'position': 'absolute' , 'left': '-10000px'});\n\n        var itemHtml = '<div data-value=' + currentKeyName + ' class=item >' + currentKeyName + '</div>';\n        currentTypehead.find($('.selectize-input')).append( itemHtml );\n\n      }\n    },\n\n    removeExcludedObserver: function () {\n      var options = this.get('content');\n\n      if (!options) {\n        options = this.removeExcluded(true);\n        this.set('content', options);\n      } else {\n        this.removeExcluded();\n      }\n    }.observes('excluded.@each.key').on('init'),\n\n    removeExcluded: function (shouldReturn) {\n      var excluded        = this.get('excluded') || [];\n      var options         = this.get('options');\n      var selection       = this.get('selection');\n      var objectToModify  = this.get('content');\n      var objectsToRemove = [];\n      var objectsToAdd    = [];\n\n      if (!options) {\n        return;\n      }\n\n      if (shouldReturn) {\n        objectToModify = Ember['default'].copy(options);\n      }\n\n      var valuePath = this.get('optionValuePath');\n      var selectionName = selection ? selection[valuePath] : selection;\n\n      if (options) {\n        options.forEach(function (option) {\n          if (excluded.contains(option) && option.name !== selectionName) {\n            objectsToRemove.push(option);\n          } else if (!objectToModify.contains(option)) {\n            objectsToAdd.push(option);\n          }\n        });\n      }\n\n      objectToModify.removeObjects(objectsToRemove);\n      objectToModify.pushObjects(objectsToAdd);\n\n      return objectToModify;\n    },\n\n    onClose: function () {\n      if (!this.get('selection') && this.get('prevSelection')) {\n        this.set('selection', this.get('prevSelection'));\n      }\n    },\n\n    _onItemAdd: function (value) {\n      this._super(value);\n\n      this.set('prevSelection', this.get('selection'));\n    }\n  });\n\n});","define('hive/components/udf-tr-view', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'tr',\n\n    didInsertElement: function () {\n      this._super();\n\n      if (this.get('udf.isNew')) {\n        this.set('udf.isEditing', true);\n      }\n    },\n\n    setfileBackup: function () {\n      if (!this.get('udf.isDirty')) {\n        this.set('fileBackup', this.get('udf.fileResource'));\n      }\n    }.observes('udf.isDirty').on('didInsertElement'),\n\n    actions: {\n      editUdf: function () {\n        this.set('udf.isEditing', true);\n      },\n\n      deleteUdf: function () {\n        this.sendAction('onDeleteUdf', this.get('udf'));\n      },\n\n      addFileResource: function () {\n        this.sendAction('onAddFileResource', this.get('udf'));\n      },\n\n      editFileResource: function (file) {\n        this.set('udf.fileResource', file);\n        this.set('udf.isEditingResource', true);\n      },\n\n      deleteFileResource: function (file) {\n        this.sendAction('onDeleteFileResource', file);\n      },\n\n      save: function () {\n        this.sendAction('onSaveUdf', this.get('udf'));\n      },\n\n      cancel: function () {\n        var self = this;\n\n        this.set('udf.isEditing', false);\n        this.set('udf.isEditingResource', false);\n\n        this.udf.get('fileResource').then(function (file) {\n          if (file) {\n            file.rollback();\n          }\n\n          self.udf.rollback();\n          self.udf.set('fileResource', self.get('fileBackup'));\n        });\n      }\n    }\n  });\n\n});","define('hive/components/visualization-tabs-widget', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'tabs',\n\n    didInsertElement: function () {\n      var tabToActivate,\n          tabs = this.get('tabs');\n\n      if (tabs.get('length')) {\n        tabToActivate = tabs.find(function (tab) {\n          return tab.get('active');\n        });\n\n        if (tabToActivate) {\n          this.set('selectedTab', tabToActivate);\n        } else {\n          this.set('selectedTab', tabs.objectAt(0));\n        }\n      }\n    },\n\n    activateTab: function () {\n      var selectedTab = this.get('selectedTab');\n\n      selectedTab.set('active', true);\n\n      this.get('tabs').without(selectedTab).forEach(function (tab) {\n        tab.set('active', false);\n      });\n    }.observes('selectedTab'),\n\n    actions: {\n      selectTab: function (tab) {\n        this.set('selectedTab', tab);\n      }\n    }\n  });\n\n});","define('hive/controllers/application', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    notifications: Ember['default'].computed.alias('notifyService.notifications'),\n  });\n\n});","define('hive/controllers/databases', ['exports', 'ember', 'hive/utils/constants', 'hive/config/environment'], function (exports, Ember, constants, ENV) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    databaseService: Ember['default'].inject.service(constants['default'].namingConventions.database),\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    pageCount: 10,\n\n    selectedDatabase: Ember['default'].computed.alias('databaseService.selectedDatabase'),\n    databases: Ember['default'].computed.alias('databaseService.databases'),\n\n    tableSearchResults: Ember['default'].Object.create(),\n\n    tableControls: [\n      {\n        icon: 'fa-list',\n        action: 'loadSampleData',\n        tooltip: Ember['default'].I18n.t('tooltips.loadSample')\n      }\n    ],\n\n    panelIconActions: [\n      {\n        icon: 'fa-refresh',\n        action: 'refreshDatabaseExplorer',\n        tooltip: Ember['default'].I18n.t('tooltips.refresh')\n      }\n    ],\n\n    tabs: [\n      Ember['default'].Object.create({\n        name: Ember['default'].I18n.t('titles.explorer'),\n        visible: true,\n        view: constants['default'].namingConventions.databaseTree\n      }),\n      Ember['default'].Object.create({\n        name: Ember['default'].I18n.t('titles.results'),\n        view: constants['default'].namingConventions.databaseSearch\n      })\n    ],\n\n    _handleError: function (error) {\n      this.get('notifyService').error(error);\n      this.set('isLoading', false);\n    },\n\n    setTablePageAvailability: function (database) {\n      var result;\n\n      if (database.get('hasNext')) {\n        result = true;\n      } else if (database.tables.length > database.get('visibleTables.length')) {\n        //if there are hidden tables\n        result = true;\n      }\n\n      database.set('canGetNextPage', result);\n    },\n\n    setColumnPageAvailability: function (table) {\n      var result;\n\n      if (table.get('hasNext')) {\n        result = true;\n      } else if (table.columns.length > table.get('visibleColumns.length')) {\n        //if there are hidden columns\n        result = true;\n      }\n\n      table.set('canGetNextPage', result);\n    },\n\n    selectedDatabaseChanged: function () {\n      var self = this;\n\n      this.resetSearch();\n\n      this.set('isLoading', true);\n\n      this.get('databaseService').getAllTables().then(function () {\n        self.set('isLoading', false);\n      }, function (err) {\n        self._handleError(err);\n      });\n    }.observes('selectedDatabase'),\n\n    getNextColumnPage: function (database, table) {\n      var self = this;\n\n      this.set('isLoading', true);\n\n      if (!table.columns) {\n        table.columns = [];\n        table.set('visibleColumns', []);\n      }\n\n      this.get('databaseService').getColumnsPage(database.get('name'), table).then(function (result) {\n        table.columns.pushObjects(result.columns);\n        table.get('visibleColumns').pushObjects(result.columns);\n        table.set('hasNext', result.hasNext);\n\n        self.setColumnPageAvailability(table);\n        self.set('isLoading', false);\n      }, function (err) {\n        self._handleError(err);\n      });\n    },\n\n    getNextTablePage: function (database) {\n      var self = this;\n\n      this.set('isLoading', true);\n\n      if (!database.tables) {\n        database.tables = [];\n        database.set('visibleTables', []);\n      }\n\n      this.get('databaseService').getTablesPage(database).then(function (result) {\n        database.tables.pushObjects(result.tables);\n        database.get('visibleTables').pushObjects(result.tables);\n        database.set('hasNext', result.hasNext);\n\n        self.setTablePageAvailability(database);\n        self.set('isLoading', false);\n      }, function (err) {\n        self._handleError(err);\n      });\n    },\n\n    getDatabases: function () {\n      var self = this;\n      var selectedDatabase = this.get('selectedDatabase.name');\n\n      this.set('isLoading', true);\n\n      this.get('databaseService').getDatabases().then(function (databases) {\n        self.set('isLoading');\n        self.get('databaseService').setDatabaseByName(selectedDatabase);\n      })[\"catch\"](function (error) {\n        self._handleError(error);\n\n        if(error.status == 401) {\n           self.send('passwordLDAPDB');\n        }\n\n\n      });\n    }.on('init'),\n\n    syncDatabases: function() {\n      var oldDatabaseNames = this.store.all('database').mapBy('name');\n      var self = this;\n      return this.get('databaseService').getDatabasesFromServer().then(function(data) {\n        // Remove the databases from store which are not in server\n        data.forEach(function(dbName) {\n          if(!oldDatabaseNames.contains(dbName)) {\n            self.store.createRecord('database', {\n              id: dbName,\n              name: dbName\n            });\n          }\n        });\n        // Add the databases in store which are new in server\n        oldDatabaseNames.forEach(function(dbName) {\n          if(!data.contains(dbName)) {\n            self.store.find('database', dbName).then(function(db) {\n              self.store.unloadRecord(db);\n            });\n          }\n        });\n      });\n    },\n\n    initiateDatabaseSync: function() {\n      // This was required so that the unit test would not stall\n      if(ENV['default'].environment !== \"test\") {\n        Ember['default'].run.later(this, function() {\n          this.syncDatabases();\n          this.initiateDatabaseSync();\n        }, 15000);\n      }\n    }.on('init'),\n\n    resetSearch: function() {\n      var resultsTab = this.get('tabs').findBy('view', constants['default'].namingConventions.databaseSearch);\n      var databaseExplorerTab = this.get('tabs').findBy('view', constants['default'].namingConventions.databaseTree);\n      var tableSearchResults = this.get('tableSearchResults');\n      resultsTab.set('visible', false);\n      this.set('selectedTab', databaseExplorerTab);\n      this.set('tableSearchTerm', '');\n      this.set('columnSearchTerm', '');\n      tableSearchResults.set('tables', undefined);\n      tableSearchResults.set('hasNext', undefined);\n    },\n\n\n    actions: {\n      refreshDatabaseExplorer: function () {\n        this.getDatabases();\n        this.resetSearch();\n      },\n\n      passwordLDAPDB: function(){\n        var self = this,\n            defer = Ember['default'].RSVP.defer();\n\n        self.getDatabases = this.getDatabases;\n\n        this.send('openModal', 'modal-save', {\n          heading: \"modals.authenticationLDAP.heading\",\n          text:\"\",\n          type: \"password\",\n          defer: defer\n        });\n\n        defer.promise.then(function (text) {\n          // make a post call with the given ldap password.\n          var password = text;\n          var pathName = window.location.pathname;\n          var pathNameArray = pathName.split(\"/\");\n          var hiveViewVersion = pathNameArray[3];\n          var hiveViewName = pathNameArray[4];\n          var ldapAuthURL = \"/api/v1/views/HIVE/versions/\"+ hiveViewVersion + \"/instances/\" + hiveViewName + \"/jobs/auth\";\n\n          $.ajax({\n            url: ldapAuthURL,\n            dataType: \"json\",\n            type: 'post',\n            headers: {'X-Requested-With': 'XMLHttpRequest', 'X-Requested-By': 'ambari'},\n            contentType: 'application/json',\n            data: JSON.stringify({ \"password\" : password}),\n            success: function( data, textStatus, jQxhr ){\n              console.log( \"LDAP done: \" + data );\n              self.getDatabases();\n            },\n            error: function( jqXhr, textStatus, errorThrown ){\n              console.log( \"LDAP fail: \" + errorThrown );\n              self.get('notifyService').error( \"Wrong Credentials.\" );\n            }\n          });\n\n        });\n      },\n\n      loadSampleData: function (tableName, database) {\n        var self = this;\n        this.send('addQuery', Ember['default'].I18n.t('titles.tableSample', { tableName: tableName }));\n\n        Ember['default'].run.later(function () {\n          var query = constants['default'].sampleDataQuery.fmt(tableName);\n\n          self.set('selectedDatabase', database);\n          self.send('executeQuery', constants['default'].jobReferrer.sample, query);\n        });\n      },\n\n      getTables: function (dbName) {\n        var database = this.get('databases').findBy('name', dbName),\n            tables = database.tables,\n            pageCount = this.get('pageCount');\n\n        if (!tables) {\n          this.getNextTablePage(database);\n        } else {\n          database.set('visibleTables', tables.slice(0, pageCount));\n          this.setTablePageAvailability(database);\n        }\n      },\n\n      getColumns: function (tableName, database) {\n        var table = database.get('visibleTables').findBy('name', tableName),\n            pageCount = this.get('pageCount'),\n            columns = table.columns;\n\n        if (!columns) {\n          this.getNextColumnPage(database, table);\n        } else {\n          table.set('visibleColumns', columns.slice(0, pageCount));\n          this.setColumnPageAvailability(table);\n        }\n      },\n\n      showMoreTables: function (database) {\n        var tables = database.tables,\n            visibleTables = database.get('visibleTables'),\n            visibleCount = visibleTables.length;\n\n        if (!tables) {\n          this.getNextTablePage(database);\n        } else {\n          if (tables.length > visibleCount) {\n            visibleTables.pushObjects(tables.slice(visibleCount, visibleCount + this.get('pageCount')));\n            this.setTablePageAvailability(database);\n          } else {\n            this.getNextTablePage(database);\n          }\n        }\n      },\n\n      showMoreColumns: function (table, database) {\n        var columns = table.columns,\n            visibleColumns = table.get('visibleColumns'),\n            visibleCount = visibleColumns.length;\n\n        if (!columns) {\n          this.getNextColumnPage(database, table);\n        } else {\n          if (columns.length > visibleCount) {\n            visibleColumns.pushObjects(columns.slice(visibleCount, visibleCount + this.get('pageCount')));\n            this.setColumnPageAvailability(table);\n          } else {\n            this.getNextColumnPage(database, table);\n          }\n        }\n      },\n\n      searchTables: function (searchTerm) {\n        var self = this,\n            resultsTab = this.get('tabs').findBy('view', constants['default'].namingConventions.databaseSearch),\n            tableSearchResults = this.get('tableSearchResults');\n\n        searchTerm = searchTerm ? searchTerm.toLowerCase() : '';\n\n        this.set('tablesSearchTerm', searchTerm);\n        resultsTab.set('visible', true);\n        this.set('selectedTab', resultsTab);\n        this.set('columnSearchTerm', '');\n        this.set('isLoading', true);\n\n        this.get('databaseService').getTablesPage(this.get('selectedDatabase'), searchTerm, true).then(function (result) {\n          tableSearchResults.set('tables', result.tables);\n          tableSearchResults.set('hasNext', result.hasNext);\n\n          self.set('isLoading', false);\n        }, function (err) {\n          self._handleError(err);\n        });\n      },\n\n      searchColumns: function (searchTerm) {\n        var self = this,\n            database = this.get('selectedDatabase'),\n            resultsTab = this.get('tabs').findBy('view', constants['default'].namingConventions.databaseSearch),\n            tables = this.get('tableSearchResults.tables');\n\n        searchTerm = searchTerm ? searchTerm.toLowerCase() : '';\n\n        this.set('selectedTab', resultsTab);\n\n        this.set('isLoading', true);\n\n        tables.forEach(function (table) {\n          self.get('databaseService').getColumnsPage(database.get('name'), table, searchTerm, true).then(function (result) {\n            table.set('columns', result.columns);\n            table.set('hasNext', result.hasNext);\n\n            if (tables.indexOf(table) === tables.get('length') -1) {\n              self.set('isLoading', false);\n            }\n          }, function (err) {\n            self._handleError(err);\n          });\n        });\n      },\n\n      showMoreResultTables: function () {\n        var self = this,\n            database = this.get('selectedDatabase'),\n            tableSearchResults = this.get('tableSearchResults'),\n            searchTerm = this.get('tableSearchTerm');\n\n        this.set('isLoading', true);\n\n        this.get('databaseService').getTablesPage(database, searchTerm).then(function (tablesResult) {\n          var tables = tableSearchResults.get('tables');\n          var shouldGetColumns = tables.any(function (table) {\n            return table.get('columns.length') > 0;\n          });\n\n          tables.pushObjects(tablesResult.tables);\n          tableSearchResults.set('hasNext', tablesResult.hasNext);\n\n          //if user has already searched for columns for the previously loaded tables,\n          //load the columns search results for the newly loaded tables.\n          if (shouldGetColumns) {\n            tablesResult.tables.forEach(function (table) {\n              self.get('databaseService').getColumnsPage(database.get('name'), table, self.get('columnSearchTerm'), true).then(function (result) {\n                table.set('columns', result.columns);\n                table.set('hasNext', result.hasNext);\n\n                if (tablesResult.tables.indexOf(table) === tablesResult.tables.get('length') -1) {\n                  self.set('isLoading', false);\n                }\n              }, function (err) {\n                self._handleError(err);\n              });\n            });\n          } else {\n            self.set('isLoading', false);\n          }\n        }, function (err) {\n          self._handleError(err);\n        });\n      },\n\n      showMoreResultColumns: function (table) {\n        var self = this;\n\n        this.set('isLoading', true);\n\n        this.get('databaseService').getColumnsPage(this.get('selectedDatabase.name'), table, this.get('columnSearchTerm')).then(function (result) {\n          table.get('columns').pushObjects(result.columns);\n          table.set('hasNext', result.hasNext);\n\n          self.set('isLoading', false);\n        }, function (err) {\n          self._handleError(err);\n        });\n      }\n    }\n  });\n\n});","define('hive/controllers/history', ['exports', 'ember', 'hive/mixins/filterable', 'hive/utils/constants'], function (exports, Ember, FilterableMixin, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ArrayController.extend(FilterableMixin['default'], {\n    jobService: Ember['default'].inject.service('job'),\n    fileService: Ember['default'].inject.service('file'),\n\n    sortAscending: false,\n    sortProperties: ['dateSubmittedTimestamp'],\n\n    init: function () {\n      var oneMonthAgo = new Date();\n      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);\n\n      this._super();\n\n      this.set('columns', Ember['default'].ArrayProxy.create({ content: Ember['default'].A([\n        Ember['default'].Object.create({\n          caption: 'columns.title',\n          property: 'title',\n          link: constants['default'].namingConventions.subroutes.historyQuery\n        }),\n        Ember['default'].Object.create({\n          caption: 'columns.status',\n          property: 'status'\n        }),\n        Ember['default'].Object.create({\n          caption: 'columns.date',\n          property: 'dateSubmittedTimestamp',\n          dateRange: Ember['default'].Object.create({\n            min: oneMonthAgo,\n            max: new Date()\n          })\n        }),\n        Ember['default'].Object.create({\n          caption: 'columns.duration',\n          property: 'duration',\n          numberRange: Ember['default'].Object.create({\n            min: 0,\n            max: 10,\n            units: 'sec'\n          })\n        })\n      ])}));\n    },\n\n    model: function () {\n      return this.filter(this.get('history'));\n    }.property('history', 'filters.@each'),\n\n    updateIntervals: function () {\n      var durationColumn;\n      var maxDuration;\n      var minDuration;\n\n      if (this.get('columns')) {\n        durationColumn = this.get('columns').find(function (column) {\n          return column.get('caption') === 'columns.duration';\n        });\n\n        var items = this.get('history').map(function (item) {\n          return item.get(durationColumn.get('property'));\n        });\n\n        minDuration = items.length ? Math.min.apply(Math, items) : 0;\n        maxDuration = items.length ? Math.max.apply(Math, items) : 0;\n\n        durationColumn.set('numberRange.min', minDuration);\n        durationColumn.set('numberRange.max', maxDuration);\n      }\n    }.observes('history'),\n\n    updateDateRange: function () {\n      var dateColumn;\n      var maxDate;\n      var minDate;\n\n      if (this.get('columns')) {\n        dateColumn = this.get('columns').find(function (column) {\n          return column.get('caption') === 'columns.date';\n        });\n\n        var items = this.get('history').map(function (item) {\n          return item.get(dateColumn.get('property'));\n        });\n\n        minDate = items.length ? Math.min.apply(Math, items) : new Date();\n        maxDate = items.length ? Math.max.apply(Math, items) : new Date();\n\n        dateColumn.set('dateRange.min', minDate);\n        dateColumn.set('dateRange.max', maxDate);\n      }\n    }.observes('history'),\n\n    filterBy: function (filterProperty, filterValue, exactMatch) {\n      var column = this.get('columns').find(function (column) {\n        return column.get('property') === filterProperty;\n      });\n\n      if (column) {\n        column.set('filterValue', filterValue, exactMatch);\n      } else {\n        this.updateFilters(filterProperty, filterValue, exactMatch);\n      }\n    },\n\n    actions: {\n      sort: function (property) {\n        //if same column has been selected, toggle flag, else default it to true\n        if (this.get('sortProperties').objectAt(0) === property) {\n          this.set('sortAscending', !this.get('sortAscending'));\n        } else {\n          this.set('sortAscending', true);\n          this.set('sortProperties', [ property ]);\n        }\n      },\n\n      interruptJob: function (job) {\n        this.get('jobService').stopJob(job);\n      },\n\n      loadFile: function (job) {\n        this.get('fileService').loadFile(job.get('queryFile')).then(function (file) {\n          job.set('file', file);\n        });\n      },\n\n      clearFilters: function () {\n        var columns = this.get('columns');\n\n        if (columns) {\n          columns.forEach(function (column) {\n            var filterValue = column.get('filterValue');\n            var rangeFilter;\n\n            if (filterValue) {\n              if (typeof filterValue === 'string') {\n                column.set('filterValue');\n              } else {\n                rangeFilter = column.get('numberRange') || column.get('dateRange');\n\n                rangeFilter.set('from', rangeFilter.get('min'));\n                rangeFilter.set('to', rangeFilter.get('max'));\n              }\n            }\n          });\n        }\n\n        //call clear filters from Filterable mixin\n        this.clearFilters();\n      }\n    }\n  });\n\n});","define('hive/controllers/index', ['exports', 'ember', 'hive/utils/constants', 'hive/utils/functions'], function (exports, Ember, constants, utils) {\n\n  'use strict';\n\n  /** * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    jobService: Ember['default'].inject.service(constants['default'].namingConventions.job),\n    jobProgressService: Ember['default'].inject.service(constants['default'].namingConventions.jobProgress),\n    databaseService: Ember['default'].inject.service(constants['default'].namingConventions.database),\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n    session: Ember['default'].inject.service(constants['default'].namingConventions.session),\n    settingsService: Ember['default'].inject.service(constants['default'].namingConventions.settings),\n\n    openQueries   : Ember['default'].inject.controller(constants['default'].namingConventions.openQueries),\n    udfs          : Ember['default'].inject.controller(constants['default'].namingConventions.udfs),\n    logs          : Ember['default'].inject.controller(constants['default'].namingConventions.jobLogs),\n    results       : Ember['default'].inject.controller(constants['default'].namingConventions.jobResults),\n    explain       : Ember['default'].inject.controller(constants['default'].namingConventions.jobExplain),\n    settings      : Ember['default'].inject.controller(constants['default'].namingConventions.settings),\n    visualExplain : Ember['default'].inject.controller(constants['default'].namingConventions.visualExplain),\n    tezUI         : Ember['default'].inject.controller(constants['default'].namingConventions.tezUI),\n\n    selectedDatabase: Ember['default'].computed.alias('databaseService.selectedDatabase'),\n    isDatabaseExplorerVisible: true,\n    canKillSession: Ember['default'].computed.and('model.sessionTag', 'model.sessionActive'),\n\n    queryProcessTabs: [\n      Ember['default'].Object.create({\n        name: Ember['default'].I18n.t('menus.logs'),\n        path: constants['default'].namingConventions.subroutes.jobLogs\n      }),\n      Ember['default'].Object.create({\n        name: Ember['default'].I18n.t('menus.results'),\n        path: constants['default'].namingConventions.subroutes.jobResults\n      }),\n      Ember['default'].Object.create({\n        name: Ember['default'].I18n.t('menus.explain'),\n        path: constants['default'].namingConventions.subroutes.jobExplain\n      })\n    ],\n\n    queryPanelActions: [\n      Ember['default'].Object.create({\n        icon: 'fa-expand',\n        action: 'toggleDatabaseExplorerVisibility',\n        tooltip: Ember['default'].I18n.t('tooltips.expand')\n      })\n    ],\n\n    init: function () {\n      this._super();\n\n      // initialize queryParams with an empty array\n      this.set('queryParams', Ember['default'].ArrayProxy.create({ content: Ember['default'].A([]) }));\n\n      this.set('queryProcessTabs', Ember['default'].ArrayProxy.create({ content: Ember['default'].A([\n        Ember['default'].Object.create({\n          name: Ember['default'].I18n.t('menus.logs'),\n          path: constants['default'].namingConventions.subroutes.jobLogs\n        }),\n        Ember['default'].Object.create({\n          name: Ember['default'].I18n.t('menus.results'),\n          path: constants['default'].namingConventions.subroutes.jobResults\n        }),\n        Ember['default'].Object.create({\n          name: Ember['default'].I18n.t('menus.explain'),\n          path: constants['default'].namingConventions.subroutes.jobExplain\n        })\n      ])}));\n\n      this.set('queryPanelActions', Ember['default'].ArrayProxy.create({ content: Ember['default'].A([\n        Ember['default'].Object.create({\n          icon: 'fa-expand',\n          action: 'toggleDatabaseExplorerVisibility',\n          tooltip: Ember['default'].I18n.t('tooltips.expand')\n        })\n      ])}));\n    },\n\n    canExecute: function () {\n      var isModelRunning = this.get('model.isRunning');\n      var hasParams = this.get('queryParams.length');\n\n      if (isModelRunning) {\n        return false;\n      }\n\n      if (hasParams) {\n        // all param have values?\n        return this.get('queryParams').every(function (param) { return param.value; });\n      }\n\n      return true;\n    }.property('model.isRunning', 'queryParams.@each.value'),\n\n    currentQueryObserver: function () {\n      var query = this.get('openQueries.currentQuery.fileContent'),\n          param,\n          updatedParams = [],\n          currentParams = this.get('queryParams'),\n          paramRegExp = /\\$\\w+/ig,\n          paramNames = query.match(paramRegExp) || [];\n\n      paramNames = paramNames.uniq();\n\n      paramNames.forEach(function (name) {\n        param = currentParams.findBy('name', name);\n        if (param) {\n          updatedParams.push(param);\n        } else {\n          updatedParams.push({ name: name, value: \"\" });\n        }\n      });\n\n      currentParams.setObjects(updatedParams);\n\n      this.set('visualExplain.shouldChangeGraph', true);\n    }.observes('openQueries.currentQuery.fileContent'),\n\n    _executeQuery: function (referrer, shouldExplain, shouldGetVisualExplain) {\n      var queryId,\n          query,\n          finalQuery,\n          job,\n          defer = Ember['default'].RSVP.defer(),\n          originalModel = this.get('model');\n\n      job = this.store.createRecord(constants['default'].namingConventions.job, {\n        title: originalModel.get('title'),\n        sessionTag: originalModel.get('sessionTag'),\n        dataBase: this.get('selectedDatabase.name'),\n        referrer: referrer\n      });\n\n      if (!shouldGetVisualExplain) {\n        originalModel.set('isRunning', true);\n      }\n\n       //if it's a saved query / history entry set the queryId\n      if (!originalModel.get('isNew')) {\n        queryId = originalModel.get('constructor.typeKey') === constants['default'].namingConventions.job ?\n                  originalModel.get('queryId') :\n                  originalModel.get('id');\n\n        job.set('queryId', queryId);\n      }\n\n      query = this.get('openQueries').getQueryForModel(originalModel);\n\n      query = this.buildQuery(query, shouldExplain, shouldGetVisualExplain);\n\n\n      // Condition for no query.\n      if(query === ';') {\n        originalModel.set('isEmptyQuery', true);\n        originalModel.set('isRunning', false);\n        defer.reject({\n          message: 'No query to process.'\n        });\n        return defer.promise;\n      }\n\n      // for now we won't support multiple queries\n      // buildQuery will return false it multiple queries\n      // are selected\n      if (!query) {\n        originalModel.set('isRunning', false);\n        defer.reject({\n          message: 'Running multiple queries is not supported.'\n        });\n\n        return defer.promise;\n      }\n\n      finalQuery = query;\n      finalQuery = this.bindQueryParams(finalQuery);\n      finalQuery = this.prependGlobalSettings(finalQuery, job);\n\n      job.set('forcedContent', finalQuery);\n\n      if (shouldGetVisualExplain) {\n        return this.getVisualExplainJson(job, originalModel);\n      }\n\n      return this.createJob(job, originalModel);\n    },\n\n    getVisualExplainJson: function (job, originalModel) {\n      var self = this;\n      var defer = Ember['default'].RSVP.defer();\n\n      job.save().then(function () {\n        self.get('results').getResultsJson(job).then(function (json) {\n          defer.resolve(json);\n        }, function (err) {\n          defer.reject(err);\n        });\n      }, function (err) {\n        defer.reject(err);\n      });\n\n      return defer.promise;\n    },\n\n    createJob: function (job, originalModel) {\n      var defer = Ember['default'].RSVP.defer(),\n          self = this,\n          openQueries = this.get('openQueries');\n\n      var handleError = function (err) {\n        self.set('jobSaveSucceeded');\n        originalModel.set('isRunning', undefined);\n        defer.reject(err);\n\n        if(err.status == 401) {\n            self.send('passwordLDAP', job, originalModel);\n        }\n\n      };\n\n      job.save().then(function () {\n        //convert tab for current model since the execution will create a new job, and navigate to the new job route.\n        openQueries.convertTabToJob(originalModel, job).then(function () {\n          self.get('jobProgressService').setupProgress(job);\n          self.set('jobSaveSucceeded', true);\n\n          //reset flag on the original model\n          originalModel.set('isRunning', undefined);\n\n          defer.resolve(job);\n        }, function (err) {\n          handleError(err);\n        });\n      }, function (err) {\n        handleError(err);\n      });\n\n      return defer.promise;\n    },\n\n    prependGlobalSettings: function (query, job) {\n      var jobGlobalSettings = job.get('globalSettings');\n      var currentGlobalSettings = this.get('settingsService').getSettings();\n\n      // remove old globals\n      if (jobGlobalSettings) {\n        query.replace(jobGlobalSettings, '');\n      }\n\n      job.set('globalSettings', currentGlobalSettings);\n      query = currentGlobalSettings + query;\n\n      return query;\n    },\n\n    buildQuery: function (query, shouldExplain, shouldGetVisualExplain) {\n      var selections = this.get('openQueries.highlightedText'),\n          isQuerySelected = selections && selections[0] !== \"\",\n          queryContent = query ? query.get('fileContent') : '',\n          queryComponents = this.extractComponents(queryContent),\n          finalQuery = '',\n          queries = null;\n\n      if (isQuerySelected) {\n        queryComponents.queryString = selections.join('');\n      }\n\n      queries = queryComponents.queryString.split(';');\n      queries = queries.filter(Boolean);\n\n      queries = queries.map(function (query) {\n        if (shouldExplain) {\n          query = query.replace(/explain formatted|explain/gi, '');\n\n          if (shouldGetVisualExplain) {\n            return constants['default'].namingConventions.explainFormattedPrefix + query;\n          } else {\n            return constants['default'].namingConventions.explainPrefix + query;\n          }\n        } else {\n          return query;\n        }\n      });\n\n      if (queryComponents.files.length) {\n        finalQuery += queryComponents.files.join(\"\\n\") + \"\\n\\n\";\n      }\n\n      if (queryComponents.udfs.length) {\n        finalQuery += queryComponents.udfs.join(\"\\n\") + \"\\n\\n\";\n      }\n\n      finalQuery += queries.join(\";\");\n      finalQuery += \";\";\n      return finalQuery.trim();\n    },\n\n    bindQueryParams: function (query) {\n      var params = this.get('queryParams');\n\n      if (!params.get('length')) {\n        return query;\n      }\n\n      params.forEach(function (param) {\n        query = query.split(param.name).join(param.value);\n      });\n\n      return query;\n    },\n\n    displayJobTabs: function () {\n      return this.get('content.constructor.typeKey') === constants['default'].namingConventions.job &&\n             utils['default'].isInteger(this.get('content.id')) &&\n             this.get('jobSaveSucceeded');\n    }.property('content', 'jobSaveSucceeded'),\n\n    databasesOrModelChanged: function () {\n      this.get('databaseService').setDatabaseByName(this.get('content.dataBase'));\n    }.observes('databaseService.databases', 'content'),\n\n    selectedDatabaseChanged: function () {\n      this.set('content.dataBase', this.get('selectedDatabase.name'));\n    }.observes('selectedDatabase'),\n\n    modelChanged: function () {\n      var self = this;\n      var content = this.get('content');\n      var openQueries = this.get('openQueries');\n\n      this.set('jobSaveSucceeded', true);\n\n      //update open queries list when current query model changes\n      openQueries.update(content).then(function (isExplainedQuery) {\n        var newId = content.get('id');\n        var tab = openQueries.getTabForModel(content);\n\n        //if not an ATS job\n        if (content.get('constructor.typeKey') === constants['default'].namingConventions.job && utils['default'].isInteger(newId)) {\n          self.get('queryProcessTabs').forEach(function (queryTab) {\n            queryTab.set('id', newId);\n          });\n\n          if (isExplainedQuery) {\n            self.set('explain.content', content);\n          } else {\n            self.set('logs.content', content);\n            self.set('results.content', content);\n          }\n\n          self.setExplainVisibility(isExplainedQuery);\n\n          self.transitionToRoute(tab.get('subroute'));\n        }\n      });\n    }.observes('content'),\n\n    csvUrl: function () {\n      if (this.get('content.constructor.typeKey') !== constants['default'].namingConventions.job) {\n        return;\n      }\n\n      if (!utils['default'].insensitiveCompare(this.get('content.status'), constants['default'].statuses.succeeded)) {\n        return;\n      }\n\n      var url = this.container.lookup('adapter:application').buildURL();\n      url += '/' + constants['default'].namingConventions.jobs + '/' + this.get('content.id');\n      url += '/results/csv';\n\n      return url;\n    }.property('content'),\n\n    downloadMenu: function () {\n      var items = [];\n      var tabs = this.get('queryProcessTabs');\n      var isResultsTabVisible = tabs.findBy('path', constants['default'].namingConventions.subroutes.jobResults).get('visible');\n\n      if (utils['default'].insensitiveCompare(this.get('content.status'), constants['default'].statuses.succeeded) && isResultsTabVisible) {\n        items.push({\n          title: Ember['default'].I18n.t('buttons.saveHdfs'),\n          action: 'saveToHDFS'\n        });\n\n        if (this.get('csvUrl')) {\n          items.push(\n            Ember['default'].Object.create({\n              title: Ember['default'].I18n.t('buttons.saveCsv'),\n              action: 'downloadAsCSV'\n            })\n          );\n        }\n      }\n\n      return items.length ? items : null;\n    }.property('content.status', 'queryProcessTabs.@each.visible'),\n\n    extractComponents: function (queryString) {\n      var components = {};\n\n      var udfRegEx = new RegExp(\"(\" + constants['default'].namingConventions.udfInsertPrefix + \").+\", \"ig\");\n      var fileRegEx = new RegExp(\"(\" + constants['default'].namingConventions.fileInsertPrefix + \").+\", \"ig\");\n\n      components.udfs         = queryString.match(udfRegEx) || [];\n      components.files        = queryString.match(fileRegEx) || [];\n      components.queryString  = queryString.replace(udfRegEx, \"\").replace(fileRegEx, \"\").trim();\n\n      return components;\n    },\n\n    saveToHDFS: function (path) {\n      var job = this.get('content');\n\n      if (!utils['default'].insensitiveCompare(job.get('status'), constants['default'].statuses.succeeded)) {\n        return;\n      }\n\n      var self = this;\n\n      var file = path + \".csv\";\n      var url = this.container.lookup('adapter:application').buildURL();\n      url +=  \"/jobs/\" + job.get('id') + \"/results/csv/saveToHDFS\";\n\n      Ember['default'].$.getJSON(url, {\n          commence: true,\n          file: file\n      }).then(function (response) {\n        self.pollSaveToHDFS(response);\n      }, function (error) {\n        self.get('notifyService').error(error);\n      });\n    },\n\n    pollSaveToHDFS: function (data) {\n      var self = this;\n      var url = this.container.lookup('adapter:application').buildURL();\n      url += \"/jobs/\" + data.jobId + \"/results/csv/saveToHDFS\";\n\n      Ember['default'].run.later(function () {\n        Ember['default'].$.getJSON(url).then(function (response) {\n          if (!utils['default'].insensitiveCompare(response.status, constants['default'].results.statuses.terminated)) {\n            self.pollSaveToHDFS(response);\n          } else {\n            self.set('content.isRunning', false);\n          }\n        }, function (error) {\n          self.get('notifyService').error(error);\n        });\n      }, 2000);\n    },\n\n    setExplainVisibility: function (show) {\n      var tabs = this.get('queryProcessTabs');\n\n      tabs.findBy('path', constants['default'].namingConventions.subroutes.jobExplain).set('visible', show);\n      tabs.findBy('path', constants['default'].namingConventions.subroutes.jobLogs).set('visible', !show);\n      tabs.findBy('path', constants['default'].namingConventions.subroutes.jobResults).set('visible', !show);\n    },\n\n    queryProcessTitle: function () {\n      return Ember['default'].I18n.t('titles.query.process') + ' (' + Ember['default'].I18n.t('titles.query.status') + this.get('content.status') + ')';\n    }.property('content.status'),\n\n    updateSessionStatus: function() {\n      this.get('session').updateSessionStatus(this.get('model'));\n    }.observes('model', 'model.status'),\n\n    actions: {\n      passwordLDAP: function(){\n        var job = arguments[0],\n              originalModel = arguments[1],\n              self = this,\n              defer = Ember['default'].RSVP.defer();\n\n          self.createJob = this.createJob;\n\n          this.send('openModal', 'modal-save', {\n            heading: \"modals.authenticationLDAP.heading\",\n            text:\"\",\n            type: \"password\",\n            defer: defer\n          });\n\n          defer.promise.then(function (text) {\n              // make a post call with the given ldap password.\n              var password = text;\n              var pathName = window.location.pathname;\n              var pathNameArray = pathName.split(\"/\");\n              var hiveViewVersion = pathNameArray[3];\n              var hiveViewName = pathNameArray[4];\n              var ldapAuthURL = \"/api/v1/views/HIVE/versions/\"+ hiveViewVersion + \"/instances/\" + hiveViewName + \"/jobs/auth\";\n\n\n              $.ajax({\n                  url: ldapAuthURL,\n                  dataType: \"json\",\n                  type: 'post',\n                  headers: {'X-Requested-With': 'XMLHttpRequest', 'X-Requested-By': 'ambari'},\n                  contentType: 'application/json',\n                  data: JSON.stringify({ \"password\" : password}),\n                  success: function( data, textStatus, jQxhr ){\n                      console.log( \"LDAP done: \" + data );\n                      self.createJob (job,originalModel);\n                  },\n                  error: function( jqXhr, textStatus, errorThrown ){\n                      console.log( \"LDAP fail: \" + errorThrown );\n                          self.get('notifyService').error( \"Wrong Credentials.\" );\n                  }\n              });\n\n            });\n      },\n\n      stopCurrentJob: function () {\n        this.get('jobService').stopJob(this.get('model'));\n      },\n\n      saveToHDFS: function () {\n        var self = this,\n            defer = Ember['default'].RSVP.defer();\n\n        this.send('openModal', 'modal-save', {\n          heading: \"modals.download.hdfs\",\n          text: this.get('content.title') + '_' + this.get('content.id'),\n          defer: defer\n        });\n\n        defer.promise.then(function (text) {\n          self.set('content.isRunning', true);\n          self.saveToHDFS(text);\n        });\n      },\n\n      downloadAsCSV: function () {\n        var self = this,\n            defer = Ember['default'].RSVP.defer();\n\n        this.send('openModal', 'modal-save', {\n          heading: \"modals.download.csv\",\n          text: this.get('content.title'),\n          defer: defer\n        });\n\n        defer.promise.then(function (text) {\n          // download file ...\n          var urlString = \"%@/?fileName=%@.csv\";\n          var url = self.get('csvUrl');\n          url = urlString.fmt(url, text);\n          window.open(url);\n        });\n      },\n\n      insertUdf: function (item) {\n        var query = this.get('openQueries.currentQuery');\n\n        var queryString = query.get('fileContent');\n\n        var newUdf = constants['default'].namingConventions.udfInsertPrefix + item.get('name') + \" as '\" + item.get('classname') + \"';\";\n        var newFileResource = item.get('fileResource.path');\n\n        if (item.get('fileResource.path')) {\n          newFileResource = constants['default'].namingConventions.fileInsertPrefix + item.get('fileResource.path') + \";\";\n        }\n\n        var components = this.extractComponents(queryString);\n\n        if (!components.files.contains(newFileResource) && newFileResource) {\n          components.files.push(newFileResource);\n        }\n\n        if (!components.udfs.contains(newUdf)) {\n          components.udfs.push(newUdf);\n        }\n\n        var updatedContent = components.files.join(\"\\n\") + \"\\n\\n\";\n        updatedContent += components.udfs.join(\"\\n\") + \"\\n\\n\";\n        updatedContent += components.queryString;\n\n        query.set('fileContent', updatedContent);\n      },\n\n      addQuery: (function () {\n        var idCounter = 0;\n\n        return function (workSheetName) {\n          var model = this.store.createRecord(constants['default'].namingConventions.savedQuery, {\n            dataBase: this.get('selectedDatabase.name'),\n            title: workSheetName ? workSheetName : Ember['default'].I18n.t('titles.query.tab'),\n            queryFile: '',\n            id: 'fixture_' + idCounter\n          });\n\n          if (idCounter && !workSheetName) {\n            model.set('title', model.get('title') + ' (' + idCounter + ')');\n          }\n\n          idCounter++;\n\n          this.transitionToRoute(constants['default'].namingConventions.subroutes.savedQuery, model);\n        };\n      }()),\n\n      saveQuery: function () {\n        //case 1. Save a new query from a new query tab -> route changes to new id\n        //case 2. Save a new query from an existing query tab -> route changes to new id\n        //case 3. Save a new query from a job tab -> route doesn't change\n        //case 4. Update an existing query tab. -> route doesn't change\n\n        var self = this,\n            defer = Ember['default'].RSVP.defer(),\n            currentQuery = this.get('openQueries.currentQuery');\n\n        this.set('model.dataBase', this.get('selectedDatabase.name'));\n\n        this.send('openModal', 'modal-save-query', {\n          heading: 'modals.save.heading',\n          message: 'modals.save.overwrite',\n          text: this.get('content.title'),\n          content: this.get('content'),\n          defer: defer\n        });\n\n        defer.promise.then(function (result) {\n          // we need to update the original model\n          // because when this is executed\n          // it sets the title from the original model\n          self.set('model.title', result.get('text'));\n\n          if (result.get('overwrite')) {\n            self.get('openQueries').save(self.get('content'), null, true, result.get('text')).then(function () {\n              self.get('notifyService').success(Ember['default'].I18n.t('alerts.success.query.update'));\n            });\n          } else {\n            self.get('openQueries').save(self.get('content'), null, false, result.get('text')).then(function (newId) {\n              self.get('notifyService').success(Ember['default'].I18n.t('alerts.success.query.save'));\n\n              if (self.get('model.constructor.typeKey') !== constants['default'].namingConventions.job) {\n                self.transitionToRoute(constants['default'].namingConventions.subroutes.savedQuery, newId);\n              }\n            });\n          }\n        });\n      },\n\n      executeQuery: function (referrer, query) {\n        var self = this;\n\n        var isExplainQuery = (self.get('openQueries.currentQuery.fileContent').toUpperCase().trim().indexOf(constants['default'].namingConventions.explainPrefix) === 0);\n\n        if(isExplainQuery){\n          self.send('explainQuery');\n          return;\n        }\n\n        var subroute;\n\n        if (query) {\n          this.set('openQueries.currentQuery.fileContent', query);\n        }\n\n        referrer = referrer || constants['default'].jobReferrer.job;\n\n        this._executeQuery(referrer).then(function (job) {\n          if (job.get('status') !== constants['default'].statuses.succeeded) {\n            subroute = constants['default'].namingConventions.subroutes.jobLogs;\n          } else {\n            subroute = constants['default'].namingConventions.subroutes.jobResults;\n          }\n\n          self.get('openQueries').updateTabSubroute(job, subroute);\n          self.get('notifyService').success(Ember['default'].I18n.t('alerts.success.query.execution'));\n          self.transitionToRoute(constants['default'].namingConventions.subroutes.historyQuery, job.get('id'));\n        }, function (error) {\n          self.get('notifyService').error(error);\n        });\n      },\n\n      explainQuery: function () {\n        var self = this;\n\n        this._executeQuery(constants['default'].jobReferrer.explain, true).then(function (job) {\n          self.get('openQueries').updateTabSubroute(job, constants['default'].namingConventions.subroutes.jobExplain);\n\n          self.transitionToRoute(constants['default'].namingConventions.subroutes.historyQuery, job.get('id'));\n        }, function (error) {\n          self.get('notifyService').error(error);\n        });\n      },\n\n      toggleDatabaseExplorerVisibility: function () {\n        this.toggleProperty('isDatabaseExplorerVisible');\n      },\n\n      killSession: function() {\n        var self = this;\n        var model = this.get('model');\n\n        this.get('session').killSession(model)[\"catch\"](function (response) {\n            if ([200, 404].contains(response.status)) {\n              model.set('sessionActive', false);\n              self.notify.success(Ember['default'].I18n.t('alerts.success.sessions.deleted'));\n            } else {\n              self.notify.error(response);\n            }\n          });\n      }\n    }\n  });\n\n});","define('hive/controllers/index/history-query/explain', ['exports', 'ember', 'hive/utils/constants', 'hive/utils/functions'], function (exports, Ember, constants, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    cachedExplains: [],\n\n    clearCachedExplainSet: function (jobId) {\n      var existingJob = this.get('cachedExplains').findBy('id', jobId);\n\n      if (existingJob) {\n        this.set('cachedExplains', this.get('cachedExplains').without(existingJob));\n      }\n    },\n\n    initExplain: function () {\n      var cachedExplain;\n\n      cachedExplain = this.get('cachedExplains').findBy('id', this.get('content.id'));\n\n      if (cachedExplain) {\n        this.formatExplainResults(cachedExplain);\n      } else {\n        this.getExplain(true);\n      }\n    }.observes('content'),\n\n    getExplain: function (firstPage, rows) {\n      var self = this;\n      var url = this.container.lookup('adapter:application').buildURL();\n      url += '/' + constants['default'].namingConventions.jobs + '/' + this.get('content.id') + '/results';\n\n      if (firstPage) {\n        url += '?first=true';\n      }\n\n      this.get('content').reload().then(function () {\n        Ember['default'].$.getJSON(url).then(function (data) {\n          var explainSet;\n\n          //if rows from a previous page read exist, prepend them\n          if (rows) {\n            data.rows.unshiftObjects(rows);\n          }\n\n          if (!data.hasNext) {\n            explainSet = self.get('cachedExplains').pushObject(Ember['default'].Object.create({\n              id: self.get('content.id'),\n              explain: data\n            }));\n\n            self.set('content.explain', explainSet);\n\n            self.formatExplainResults(explainSet);\n          } else {\n            self.getExplain(false, data.rows);\n          }\n        });\n      })\n    },\n\n    formatExplainResults: function (explainSet) {\n      var formatted = [],\n          currentNode,\n          currentNodeWhitespace,\n          previousNode,\n          getLeadingWhitespacesCount = function (str) {\n            return str.replace(utils['default'].regexes.whitespaces, '$1').length;\n          };\n\n      explainSet = explainSet\n                   .get('explain.rows')\n                   .map(function (row) {\n                      return row[0];\n                    })\n                   .filter(Boolean)\n                   .map(function (str) {\n                      return {\n                        text: str,\n                        parentNode: null,\n                        contents: []\n                      };\n                    });\n\n      for (var i = 0; i < explainSet.length; i++) {\n        currentNode = explainSet[i];\n        previousNode = explainSet[i-1];\n\n        if (i > 0) {\n          currentNodeWhitespace = getLeadingWhitespacesCount(currentNode.text);\n\n          if (currentNodeWhitespace > getLeadingWhitespacesCount(previousNode.text)) {\n            currentNode.parentNode = previousNode;\n            previousNode.contents.pushObject(currentNode);\n          } else {\n            for (var j = i - 1; j >= 0; j--) {\n              if (currentNodeWhitespace === getLeadingWhitespacesCount(explainSet[j].text)) {\n                if (currentNodeWhitespace > 0) {\n                  currentNode.parentNode = explainSet[j].parentNode;\n                  currentNode.parentNode.contents.pushObject(currentNode);\n                } else {\n                  formatted.pushObject(currentNode);\n                }\n\n                break;\n              }\n            }\n          }\n        } else {\n          formatted.pushObject(currentNode);\n        }\n      }\n\n      this.set('formattedExplain', formatted);\n    }\n  });\n\n});","define('hive/controllers/index/history-query/logs', ['exports', 'ember', 'hive/utils/constants', 'hive/utils/functions'], function (exports, Ember, constants, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    fileService: Ember['default'].inject.service(constants['default'].namingConventions.file),\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    needs: [ constants['default'].namingConventions.queryTabs,\n             constants['default'].namingConventions.index,\n             constants['default'].namingConventions.openQueries ],\n\n    queryTabs: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.queryTabs),\n    index: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.index),\n    openQueries: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.openQueries),\n\n    reloadJobLogs: function (job) {\n      var self = this;\n      var handleError = function (error) {\n        job.set('isRunning', false);\n\n        self.get('notifyService').error(error);\n      };\n\n      job.reload().then(function () {\n        if (utils['default'].insensitiveCompare(job.get('status'), constants['default'].statuses.error) ||\n            utils['default'].insensitiveCompare(job.get('status'), constants['default'].statuses.failed)) {\n          handleError(job.get('statusMessage'));\n        }\n\n        self.get('fileService').reloadFile(job.get('logFile')).then(function (file) {\n          var fileContent = file.get('fileContent');\n          var stillRunning = self.isJobRunning(job);\n          var currentIndexModelId = self.get('index.model.id');\n          var currentActiveTab = self.get('queryTabs.activeTab.name');\n\n          if (fileContent) {\n            job.set('log', fileContent);\n          }\n\n          //if the current model is the same with the one displayed, continue reloading job\n          if (stillRunning) {\n            Ember['default'].run.later(self, function () {\n              this.reloadJobLogs(job);\n            }, 10000);\n          } else if (!stillRunning) {\n            job.set('isRunning', undefined);\n            job.set('retrievingLogs', false);\n\n            if (utils['default'].insensitiveCompare(job.get('status'), constants['default'].statuses.succeeded)) {\n              self.get('openQueries').updateTabSubroute(job, constants['default'].namingConventions.subroutes.jobResults);\n\n              if (job.get('id') === currentIndexModelId && currentActiveTab === constants['default'].namingConventions.index) {\n                self.transitionToRoute(constants['default'].namingConventions.subroutes.historyQuery, job.get('id'));\n              }\n            }\n          }\n\n        },function (err) {\n          handleError(err);\n        });\n      }, function (err) {\n        handleError(err);\n      });\n    },\n\n    isJobRunning: function (job) {\n      return utils['default'].insensitiveCompare(job.get('status'),\n                                      constants['default'].statuses.unknown,\n                                      constants['default'].statuses.initialized,\n                                      constants['default'].statuses.running,\n                                      constants['default'].statuses.pending);\n    },\n\n    getLogs: function () {\n      var job = this.get('content');\n\n      if (this.isJobRunning(job)) {\n        if (!job.get('retrievingLogs')) {\n          job.set('retrievingLogs', true);\n          job.set('isRunning', true);\n          this.reloadJobLogs(job);\n        }\n      } else if (utils['default'].insensitiveCompare(job.get('status'), constants['default'].statuses.succeeded) && !job.get('dagId')) {\n        //if a job that never polled for logs is succeeded, jump straight to results tab.\n        this.get('openQueries').updateTabSubroute(job, constants['default'].namingConventions.subroutes.jobResults);\n        this.transitionToRoute(constants['default'].namingConventions.subroutes.historyQuery, job.get('id'));\n      }\n    }.observes('content')\n  });\n\n});","define('hive/controllers/index/history-query/results', ['exports', 'ember', 'hive/utils/constants', 'hive/utils/functions'], function (exports, Ember, constants, utils) {\n\n  'use strict';\n\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ObjectController.extend({\n    cachedResults: [],\n    formattedResults: [],\n\n    processResults: function () {\n      var results = this.get('results');\n      var filterValue = this.get('filterValue');\n      var columns;\n      var rows;\n      var filteredColumns;\n      var filteredRows;\n\n      if (!results) {\n        return;\n      }\n\n      columns = results.schema;\n      rows = results.rows;\n\n      if (!columns || !rows) {\n        return;\n      }\n\n      columns = columns.map(function (column) {\n        return {\n          name: column[0],\n          type: column[1],\n          index: column[2] - 1 //normalize index to 0 based\n        };\n      });\n\n      if (filterValue) {\n        filteredColumns = columns.filter(function (column) {\n          return utils['default'].insensitiveContains(column.name, filterValue);\n        });\n\n        if (filteredColumns.length < columns.length) {\n          filteredRows = rows.map(function (row) {\n            var updatedRow = [];\n\n            updatedRow.pushObjects(row.filter(function (item, index) {\n              return this.findBy('index', index);\n            }, this));\n\n            return updatedRow;\n          }, filteredColumns);\n        } else {\n          filteredRows = rows;\n        }\n      } else {\n        filteredColumns = columns;\n        filteredRows = rows;\n      }\n\n      this.set('formattedResults', { columns: filteredColumns, rows: filteredRows });\n    }.observes('results', 'filterValue'),\n\n    keepAlive: function (job) {\n      Ember['default'].run.later(this, function () {\n        var self = this;\n        var url = this.container.lookup('adapter:application').buildURL();\n        url += '/' + constants['default'].namingConventions.jobs + '/' + job.get('id') + '/results/keepAlive';\n\n        var existingJob = self.cachedResults.findBy('id', job.get('id'));\n\n        if (existingJob) {\n          Ember['default'].$.getJSON(url).fail(function (data) {\n            //backend issue, this will be split in done and fail callbacks once its fixed.\n            if (data.status === 404) {\n              existingJob.set('results', []);\n              self.set('error', data.responseJSON.message);\n            } else if (data.status === 200) {\n              self.keepAlive(job);\n            }\n          });\n        }\n      }, 1000 * 300);\n    },\n\n    clearCachedResultsSet: function (jobId) {\n      this.set('cachedResults', this.get('cachedResults').without(this.get('cachedResults').findBy('id', jobId)));\n    },\n\n    initResults: function () {\n      var existingJob;\n\n      if (!utils['default'].insensitiveCompare(this.get('content.status'), constants['default'].statuses.succeeded)) {\n        return;\n      }\n\n      existingJob = this.cachedResults.findBy('id', this.get('content.id'));\n\n      if (existingJob) {\n        this.set('results', existingJob.results.findBy('offset', existingJob.get('offset')));\n      } else {\n        this.send('getNextPage', true);\n      }\n    }.observes('content.status'),\n\n    disableNext: function () {\n      return !this.get('results.hasNext');\n    }.property('results'),\n\n    disablePrevious: function () {\n      return this.cachedResults.findBy('id', this.get('content.id')).results.indexOf(this.get('results')) <= 0;\n    }.property('results'),\n\n    getResultsJson: function (job) {\n      var defer = Ember['default'].RSVP.defer();\n      var url = this.container.lookup('adapter:application').buildURL();\n      url += '/' + constants['default'].namingConventions.jobs + '/' + job.get('id') + '/results?first=true';\n\n      Ember['default'].$.getJSON(url).then(function (results) {\n        defer.resolve(JSON.parse(results.rows[0][0]));\n      }, function (err) {\n        defer.reject(err);\n      });\n\n      return defer.promise;\n    },\n\n    getResult : function(url){\n      var promise = new Ember['default'].RSVP.Promise(function(resolve,reject){\n        var getData =  function(){\n          //console.log(\"getData called.\");\n          Ember['default'].$.getJSON(url).done(function(data){\n            console.log('results.js : getResult : got success data');\n            resolve(data);\n          }).fail(function(err){\n            if(err.status == 503 && err.getResponseHeader('Retry-After')){\n              var time = Number(err.getResponseHeader('Retry-After'));\n              console.log(\"results.js : getResult : got error : \" + err.status + \" with retry.\");\n              Ember['default'].run.later(this,\n              function(){\n                getData();\n              },time*1000);\n            }else{\n              console.log(\"results.js : getResult : rejected. \");\n              reject(err);\n            }\n          });\n        };\n        getData();\n      });\n\n      return promise;\n    },\n\n    actions: {\n      getNextPage: function (firstPage, job) {\n        var self = this;\n        var id = job ? job.get('id') : this.get('content.id');\n        var existingJob = this.cachedResults.findBy('id', id);\n        var resultsIndex;\n        var url = this.container.lookup('adapter:application').buildURL();\n        url += '/' + constants['default'].namingConventions.jobs + '/' + id + '/results';\n\n        if (firstPage) {\n          url += '?first=true';\n        }\n\n        if (existingJob) {\n          resultsIndex = existingJob.results.indexOf(this.get('results'));\n\n          if (~resultsIndex && resultsIndex < existingJob.get('results.length') - 1) {\n            this.set('results', existingJob.results.objectAt(resultsIndex + 1));\n            return;\n          }\n        }\n\n        this.getResult(url)\n        .then(function (results) {\n          //console.log(\"inside then : \", results);\n          if (existingJob) {\n            existingJob.results.pushObject(results);\n            existingJob.set('offset', results.offset);\n          } else {\n            self.cachedResults.pushObject(Ember['default'].Object.create({\n              id: id,\n              results: [ results ],\n              offset: results.offset\n            }));\n          }\n\n          //only set results if the method was called for the current model, not after a keepAlive request.\n          if (!job) {\n            self.set('results', results);\n          }\n\n          if (firstPage) {\n            self.keepAlive(job || self.get('content'));\n          }\n\n        }, function (err) {\n          self.set('error', err.responseText);\n        });\n      },\n\n      getPreviousPage: function () {\n        var existingJob,\n            resultsIndex;\n\n        existingJob = this.cachedResults.findBy('id', this.get('content.id'));\n        resultsIndex = existingJob.results.indexOf(this.get('results'));\n\n        if (resultsIndex > 0) {\n          this.set('results', existingJob.results.objectAt(resultsIndex - 1));\n        }\n      },\n\n      filterResults: function (value) {\n        this.set('filterValue', value);\n      }\n    }\n  });\n\n});","define('hive/controllers/insert-udfs', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ArrayController.extend({\n    needs: [ constants['default'].namingConventions.udfs ],\n\n    model: Ember['default'].A(),\n\n    udfs: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.udfs + '.udfs'),\n\n    updateUdfs: function () {\n      var self = this,\n          udfs = this.get('udfs'),\n          udfsWithoutFiles;\n\n      this.clear();\n\n      if (udfs && udfs.get('length')) {\n        udfs.getEach('fileResource.id').uniq().forEach(function (fileResourceId) {\n          if (fileResourceId) {\n            self.pushObject(Ember['default'].Object.create({\n              file: udfs.findBy('fileResource.id', fileResourceId).get('fileResource'),\n              udfs: udfs.filterBy('fileResource.id', fileResourceId)\n            }));\n          }\n        });\n\n        udfsWithoutFiles = udfs.filter(function (udf) {\n          return !udf.get('isNew') && !udf.get('fileResource.id');\n        });\n\n        if (udfsWithoutFiles.get('length')) {\n         self.pushObject(Ember['default'].Object.create({\n            name: \"placeholders.select.noFileResource\",\n            udfs: udfsWithoutFiles\n          }));\n        }\n      }\n    }.on('init').observes('udfs.@each.isNew')\n  });\n\n});","define('hive/controllers/messages', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    messages: Ember['default'].computed.alias('notifyService.messages'),\n    count: Ember['default'].computed.alias('notifyService.unseenMessages.length'),\n\n    actions: {\n      removeMessage: function (message) {\n        this.get('notifyService').removeMessage(message);\n      },\n\n      removeAllMessages: function () {\n        this.get('notifyService').removeAllMessages();\n      },\n\n      markMessagesAsSeen: function () {\n        this.get('notifyService').markMessagesAsSeen();\n      }\n    }\n  });\n\n});","define('hive/controllers/modal-delete', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    actions: {\n       \"delete\": function () {\n        this.send('closeModal');\n        this.defer.resolve();\n      },\n\n      close: function () {\n        this.send('closeModal');\n        this.defer.reject();\n      }\n    }\n  });\n\n});","define('hive/controllers/modal-save-query', ['exports', 'ember', 'hive/controllers/modal-save', 'hive/utils/constants'], function (exports, Ember, ModalSave, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = ModalSave['default'].extend({\n    showMessage: function () {\n      var content = this.get('content');\n\n      return !content.get('isNew') &&\n              content.get('title') === this.get('text') &&\n              content.get('constructor.typeKey') !== constants['default'].namingConventions.job;\n    }.property('content.isNew', 'text'),\n\n    actions: {\n      save: function () {\n        this.send('closeModal');\n\n        this.defer.resolve(Ember['default'].Object.create({\n          text: this.get('text'),\n          overwrite: this.get('showMessage')\n        }));\n      }\n    }\n  });\n\n});","define('hive/controllers/modal-save', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    actions: {\n      save: function () {\n        this.send('closeModal');\n        this.defer.resolve(this.get('text'));\n        this.defer.resolve(this.get('type'));\n      },\n\n      close: function () {\n        this.send('closeModal');\n        this.defer.reject();\n      }\n    }\n  });\n\n});","define('hive/controllers/open-queries', ['exports', 'ember', 'hive/utils/constants', 'hive/utils/functions'], function (exports, Ember, constants, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ArrayController.extend({\n    fileService: Ember['default'].inject.service(constants['default'].namingConventions.file),\n    databaseService: Ember['default'].inject.service(constants['default'].namingConventions.database),\n\n    needs: [ constants['default'].namingConventions.jobResults,\n             constants['default'].namingConventions.jobExplain,\n             constants['default'].namingConventions.index\n           ],\n\n    jobResults: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.jobResults),\n    jobExplain: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.jobExplain),\n    index: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.index),\n\n    selectedTables: Ember['default'].computed.alias('databaseService.selectedTables'),\n    selectedDatabase: Ember['default'].computed.alias('databaseService.selectedDatabase'),\n\n    init: function () {\n      this._super();\n\n      this.set('queryTabs', Ember['default'].ArrayProxy.create({ content: Ember['default'].A([])}));\n    },\n\n    pushObject: function (queryFile, model) {\n      return this._super(queryFile || Ember['default'].Object.create({\n        id: model.get('id'),\n        fileContent: \"\"\n      }));\n    },\n\n    getTabForModel: function (model) {\n      return this.get('queryTabs').find(function (tab) {\n        return tab.id === model.get('id') && tab.type === model.get('constructor.typeKey');\n      });\n    },\n\n    updateTabSubroute: function (model, path) {\n      var tab = this.get('queryTabs').find(function (tab) {\n        return tab.id === model.get('id') && tab.type === model.get('constructor.typeKey');\n      });\n\n      if (tab) {\n        tab.set('subroute', path);\n      }\n    },\n\n    getQueryForModel: function (model) {\n      return this.find(function (openQuery) {\n        if (model.get('isNew')) {\n          return openQuery.get('id') === model.get('id');\n        }\n\n        return openQuery.get('id') === model.get('queryFile');\n      });\n    },\n\n    update: function (model) {\n      var path,\n          type,\n          currentQuery,\n          defer = Ember['default'].RSVP.defer(),\n          existentTab,\n          self = this,\n          updateSubroute = function () {\n            var isExplainedQuery,\n                subroute;\n\n            //jobs that were run from hive ui (exclude ats jobs)\n            if (model.get('constructor.typeKey') === constants['default'].namingConventions.job &&\n                utils['default'].isInteger(model.get('id'))) {\n              isExplainedQuery = self.get('currentQuery.fileContent').indexOf(constants['default'].namingConventions.explainPrefix) > -1;\n\n              if (isExplainedQuery) {\n                subroute = constants['default'].namingConventions.subroutes.jobExplain;\n              } else {\n                subroute = constants['default'].namingConventions.subroutes.jobLogs;\n              }\n\n              if (!existentTab.get('subroute')) {\n                self.updateTabSubroute(model, subroute);\n              }\n            }\n\n            defer.resolve(isExplainedQuery);\n          };\n\n      existentTab = this.getTabForModel(model);\n\n      if (!existentTab) {\n        type = model.get('constructor.typeKey');\n        path = type === constants['default'].namingConventions.job ?\n               constants['default'].namingConventions.subroutes.historyQuery :\n               constants['default'].namingConventions.subroutes.savedQuery;\n\n        existentTab = this.get('queryTabs').pushObject(Ember['default'].Object.create({\n          name: model.get('title'),\n          id: model.get('id'),\n          visible: true,\n          path: path,\n          type: type\n        }));\n\n        if (model.get('isNew')) {\n          this.set('currentQuery', this.pushObject(null, model));\n\n          defer.resolve();\n        } else {\n          this.get('fileService').loadFile(model.get('queryFile')).then(function (file) {\n            self.set('currentQuery', self.pushObject(file));\n\n            updateSubroute();\n          });\n\n          if (model.get('logFile') && !model.get('log')) {\n            this.get('fileService').loadFile(model.get('logFile')).then(function (file) {\n              model.set('log', file.get('fileContent'));\n            });\n          }\n        }\n      } else {\n        currentQuery = this.getQueryForModel(model);\n        this.set('currentQuery', currentQuery);\n\n        updateSubroute();\n      }\n\n      return defer.promise;\n    },\n\n    save: function (model, query, isUpdating, newTitle) {\n      var tab = this.getTabForModel(model),\n          self = this,\n          wasNew,\n          defer = Ember['default'].RSVP.defer(),\n          jobModel = model;\n\n      if (!query) {\n        query = this.getQueryForModel(model);\n      }\n\n      if (model.get('isNew')) {\n        wasNew = true;\n        model.set('title', newTitle);\n        model.set('id', null);\n      }\n\n      //if current query it's a job, convert it to a savedQuery before saving\n      if (model.get('constructor.typeKey') === constants['default'].namingConventions.job) {\n        model = this.store.createRecord(constants['default'].namingConventions.savedQuery, {\n          dataBase: this.get('selectedDatabase.name'),\n          title: newTitle,\n          queryFile: model.get('queryFile'),\n          owner: model.get('owner')\n        });\n      }\n\n      tab.set('name', newTitle);\n\n      //if saving a new query from an existing one create a new record and save it\n      if (!isUpdating && !model.get('isNew') && model.get('constructor.typeKey') !== constants['default'].namingConventions.job) {\n        model = this.store.createRecord(constants['default'].namingConventions.savedQuery, {\n          dataBase: this.get('selectedDatabase.name'),\n          title: newTitle,\n          owner: model.get('owner')\n        });\n\n        wasNew = true;\n      }\n\n      model.save().then(function (updatedModel) {\n        jobModel.set('queryId', updatedModel.get('id'));\n\n        tab.set('isDirty', false);\n\n        var content = query.get('fileContent');\n        content = self.get('index').buildQuery(query);\n        content = self.get('index').bindQueryParams(content);\n\n        //update query tab path with saved model id if its a new record\n        if (wasNew) {\n          tab.set('id', updatedModel.get('id'));\n\n          self.get('fileService').loadFile(updatedModel.get('queryFile')).then(function (file) {\n            file.set('fileContent', content);\n            file.save().then(function (updatedFile) {\n              self.removeObject(query);\n              self.pushObject(updatedFile);\n              self.set('currentQuery', updatedFile);\n\n              defer.resolve(updatedModel.get('id'));\n            }, function (err) {\n              defer.reject(err);\n            });\n          }, function (err) {\n            defer.reject(err);\n          });\n        } else {\n          query.set('fileContent', content);\n          query.save().then(function () {\n            self.toggleProperty('tabUpdated');\n            defer.resolve(updatedModel.get('id'));\n\n          }, function (err) {\n            defer.reject(err);\n          });\n        }\n      }, function (err) {\n        defer.reject(err);\n      });\n\n      return defer.promise;\n    },\n\n    convertTabToJob: function (model, job) {\n      var defer = Ember['default'].RSVP.defer(),\n          oldQuery = this.getQueryForModel(model),\n          tab = this.getTabForModel(model),\n          jobId = job.get('id'),\n          self = this;\n\n      tab.set('id', job.get('id'));\n      tab.set('type', constants['default'].namingConventions.job);\n      tab.set('path', constants['default'].namingConventions.subroutes.historyQuery);\n\n      this.get('fileService').loadFile(job.get('queryFile')).then(function (file) {\n        //replace old model representing file to reflect model update to job\n        if (self.keepOriginalQuery(jobId)) {\n          file.set('fileContent', oldQuery.get('fileContent'));\n        }\n\n        // Rollback the oldQuery if it is a DS model (type: 'savedQuery)\n        if (oldQuery.get('constructor.typeKey') !== undefined) {\n          oldQuery.rollback();\n        }\n\n        self.removeObject(oldQuery);\n        self.pushObject(file);\n\n        defer.resolve();\n      }, function (err) {\n        defer.reject(err);\n      });\n\n      return defer.promise;\n    },\n\n    keepOriginalQuery: function () {\n      var selected = this.get('highlightedText');\n      var hasQueryParams = this.get('index.queryParams.length');\n\n      return selected && selected[0] !== \"\" || hasQueryParams;\n    },\n\n    isDirty: function (model) {\n      var query = this.getQueryForModel(model);\n\n      if (model.get('isNew') && !query.get('fileContent')) {\n        return false;\n      }\n\n      if (query && query.get('isDirty')) {\n        return true;\n      }\n\n      return !!(!model.get('queryId') && model.get('isDirty'));\n    },\n\n    updatedDeletedQueryTab: function (model) {\n      var tab = this.getTabForModel(model);\n\n      if (tab) {\n        this.closeTab(tab);\n      }\n    },\n\n    dirtyObserver: function () {\n      var tab;\n      var model = this.get('index.model');\n\n      if (model) {\n        tab = this.getTabForModel(model);\n\n        if (tab) {\n          tab.set('isDirty', this.isDirty(model));\n        }\n      }\n    }.observes('currentQuery.isDirty', 'currentQuery.fileContent'),\n\n    closeTab: function (tab, goToNextTab) {\n      var remainingTabs = this.get('queryTabs').without(tab);\n\n      this.set('queryTabs', remainingTabs);\n\n      //remove cached results set\n      if (tab.type === constants['default'].namingConventions.job) {\n        this.get('jobResults').clearCachedResultsSet(tab.id);\n        this.get('jobExplain').clearCachedExplainSet(tab.id);\n      }\n\n      if (goToNextTab) {\n        this.navigateToLastTab();\n      }\n    },\n\n    navigateToLastTab: function () {\n      var lastTab = this.get('queryTabs.lastObject');\n\n      if (lastTab) {\n        if (lastTab.type === constants['default'].namingConventions.job) {\n          this.transitionToRoute(constants['default'].namingConventions.subroutes.historyQuery, lastTab.id);\n        } else {\n          this.transitionToRoute(constants['default'].namingConventions.subroutes.savedQuery, lastTab.id);\n        }\n      } else {\n        this.get('index').send('addQuery');\n      }\n    },\n\n    actions: {\n      removeQueryTab: function (tab) {\n        var self = this,\n            defer;\n\n        this.store.find(tab.type, tab.id).then(function (model) {\n          var query = self.getQueryForModel(model);\n\n          if (!self.isDirty(model)) {\n            self.closeTab(tab, true);\n          } else {\n            defer = Ember['default'].RSVP.defer();\n            self.send('openModal',\n                      'modal-save',\n                       {\n                          heading: \"modals.save.saveBeforeCloseHeading\",\n                          text: model.get('title'),\n                          defer: defer\n                       });\n\n            defer.promise.then(function (text) {\n              model.set('title', text);\n              self.save(model, query, false, text).then(function () {\n                self.closeTab(tab, true);\n              });\n            }, function () {\n              model.rollback();\n              query.rollback();\n              self.closeTab(tab, true);\n            });\n          }\n        });\n      },\n\n      getColumnsForAutocomplete: function (tableName, callback) {\n        this.get('databaseService').getAllColumns(tableName).then(function () {\n          callback();\n        });\n      },\n\n      changeTabTitle: function(tab) {\n        var self = this,\n            defer = Ember['default'].RSVP.defer(),\n            title = this.get('index.content.title');\n\n        this.send('openModal', 'modal-save', {\n          heading: 'modals.changeTitle.heading',\n          text: title,\n          defer: defer\n        });\n\n        defer.promise.then(function (result) {\n          self.set('index.model.title', result);\n          tab.set('name', result);\n        });\n      }\n    }\n  });\n\n});","define('hive/controllers/queries', ['exports', 'ember', 'hive/mixins/filterable', 'hive/utils/constants'], function (exports, Ember, FilterableMixin, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ArrayController.extend(FilterableMixin['default'], {\n    needs: [ constants['default'].namingConventions.routes.history,\n             constants['default'].namingConventions.openQueries ],\n\n    history: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.routes.history),\n    openQueries: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.openQueries),\n\n    sortAscending: true,\n    sortProperties: [],\n\n    init: function () {\n      this._super();\n\n      this.set('columns', Ember['default'].ArrayProxy.create({ content: Ember['default'].A([\n         Ember['default'].Object.create({\n          caption: \"columns.shortQuery\",\n          property: 'shortQuery',\n          link: constants['default'].namingConventions.subroutes.savedQuery\n        }),\n        Ember['default'].Object.create({\n          caption: \"columns.title\",\n          property: 'title',\n          link: constants['default'].namingConventions.subroutes.savedQuery\n        }),\n        Ember['default'].Object.create({\n          caption: \"columns.database\",\n          property: 'dataBase',\n          link: constants['default'].namingConventions.subroutes.savedQuery\n        }),\n        Ember['default'].Object.create({\n          caption: \"columns.owner\",\n          property: 'owner',\n          link: constants['default'].namingConventions.subroutes.savedQuery\n        })\n      ])}));\n    },\n\n    //row buttons\n    links: [\n      \"buttons.history\",\n      \"buttons.delete\"\n    ],\n\n    model: function () {\n      return this.filter(this.get('queries'));\n    }.property('queries', 'filters.@each'),\n\n    actions: {\n      executeAction: function (action, savedQuery) {\n        var self = this;\n\n        switch (action) {\n          case \"buttons.history\":\n            this.get('history').filterBy('queryId', savedQuery.get('id'), true);\n            this.transitionToRoute(constants['default'].namingConventions.routes.history);\n            break;\n          case \"buttons.delete\":\n            var defer = Ember['default'].RSVP.defer();\n            this.send('openModal',\n                      'modal-delete',\n                       {\n                          heading: \"modals.delete.heading\",\n                          text: \"modals.delete.message\",\n                          defer: defer\n                       });\n\n            defer.promise.then(function () {\n              savedQuery.destroyRecord();\n              self.get('openQueries').updatedDeletedQueryTab(savedQuery);\n            });\n\n            break;\n        }\n      },\n\n      sort: function (property) {\n        //if same column has been selected, toggle flag, else default it to true\n        if (this.get('sortProperties').objectAt(0) === property) {\n          this.set('sortAscending', !this.get('sortAscending'));\n        } else {\n          this.set('sortAscending', true);\n          this.set('sortProperties', [ property ]);\n        }\n      },\n\n      clearFilters: function () {\n        var columns = this.get('columns');\n\n        if (columns) {\n          columns.forEach(function (column) {\n            var filterValue = column.get('filterValue');\n\n            if (filterValue && typeof filterValue === 'string') {\n              column.set('filterValue');\n            }\n          });\n        }\n\n        //call clear filters from Filterable mixin\n        this.clearFilters();\n      }\n    }\n  });\n\n});","define('hive/controllers/query-tabs', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    jobProgressService: Ember['default'].inject.service(constants['default'].namingConventions.jobProgress),\n    openQueries   : Ember['default'].inject.controller(constants['default'].namingConventions.openQueries),\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n    index: Ember['default'].inject.controller(),\n\n    tabClassNames : \"fa queries-icon query-context-tab\",\n\n    tabs: [\n      Ember['default'].Object.create({\n        iconClass: 'text-icon',\n        id: 'query-icon',\n        text: 'SQL',\n        action: 'setDefaultActive',\n        name: constants['default'].namingConventions.index,\n        tooltip: Ember['default'].I18n.t('tooltips.query')\n      }),\n      Ember['default'].Object.create({\n        iconClass: 'fa-gear',\n        id: 'settings-icon',\n        action: 'toggleOverlay',\n        template: 'settings',\n        outlet: 'overlay',\n        into: 'open-queries',\n        tooltip: Ember['default'].I18n.t('tooltips.settings')\n      }),\n      Ember['default'].Object.create({\n        iconClass: 'fa-area-chart',\n        id: 'visualization-icon',\n        action: 'toggleOverlay',\n        tooltip: Ember['default'].I18n.t('tooltips.visualization'),\n        into: 'index',\n        outlet: 'overlay',\n        template: 'visualization-ui',\n        onTabOpen: 'onTabOpen'\n      }),\n      Ember['default'].Object.create({\n        iconClass: 'fa-link',\n        id: 'visual-explain-icon',\n        action: 'toggleOverlay',\n        template: 'visual-explain',\n        outlet: 'overlay',\n        into: 'index',\n        onTabOpen: 'onTabOpen',\n        tooltip: Ember['default'].I18n.t('tooltips.visualExplain')\n      }),\n      Ember['default'].Object.create({\n        iconClass: 'text-icon',\n        id: 'tez-icon',\n        text: 'TEZ',\n        action: 'toggleOverlay',\n        template: 'tez-ui',\n        outlet: 'overlay',\n        into: 'index',\n        tooltip: Ember['default'].I18n.t('tooltips.tez')\n      }),\n      Ember['default'].Object.create({\n        iconClass: 'fa-envelope',\n        id: 'notifications-icon',\n        action: 'toggleOverlay',\n        template: 'messages',\n        outlet: 'overlay',\n        into: 'index',\n        badgeProperty: 'count',\n        onTabOpen: 'markMessagesAsSeen',\n        tooltip: Ember['default'].I18n.t('tooltips.notifications')\n      })\n    ],\n\n    init: function() {\n      this.setupControllers();\n      this.setDefaultTab();\n      this.setupTabsBadges();\n    },\n\n    setupControllers: function() {\n      var tabs = this.get('tabs');\n      var self = this;\n\n      tabs.map(function (tab) {\n        var controller;\n\n        if (tab.get('template')) {\n          controller = self.container.lookup('controller:' + tab.get('template'));\n          tab.set('controller', controller);\n        }\n      });\n    },\n\n    setDefaultTab: function () {\n      var defaultTab = this.get('tabs.firstObject');\n\n      defaultTab.set('active', true);\n\n      this.set('default', defaultTab);\n      this.set('activeTab', defaultTab);\n    },\n\n    setupTabsBadges: function () {\n      var tabs = this.get('tabs').filterProperty('badgeProperty');\n\n      tabs.map(function (tab) {\n          Ember['default'].oneWay(tab, 'badge', 'controller.' + tab.badgeProperty);\n      });\n    },\n\n    closeActiveOverlay: function () {\n      this.send('closeOverlay', this.get('activeTab'));\n    },\n\n    onTabOpen: function (tab) {\n      if (!tab.onTabOpen) {\n        return;\n      }\n\n      var controller = this.container.lookup('controller:' + tab.template);\n      controller.send(tab.onTabOpen, controller);\n    },\n\n    openOverlay: function (tab) {\n      this.closeActiveOverlay();\n      this.set('activeTab.active', false);\n      tab.set('active', true);\n      this.set('activeTab', tab);\n\n      this.onTabOpen(tab);\n      this.send('openOverlay', tab);\n    },\n\n    setDefaultActive: function () {\n      var activeTab = this.get('activeTab');\n      var defaultTab = this.get('default');\n\n      if (activeTab !== defaultTab) {\n        this.closeActiveOverlay();\n        defaultTab.set('active', true);\n        activeTab.set('active', false);\n        this.set('activeTab', defaultTab);\n      }\n    },\n\n    actions: {\n      toggleOverlay: function (tab) {\n        if (tab !== this.get('default') && tab.get('active')) {\n          this.setDefaultActive();\n        } else {\n          this.openOverlay(tab);\n        }\n      },\n\n      setDefaultActive: function () {\n        this.setDefaultActive();\n      }\n    }\n  });\n\n});","define('hive/controllers/settings', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    openQueries: Ember['default'].inject.controller(),\n    index: Ember['default'].inject.controller(),\n\n    settingsService: Ember['default'].inject.service('settings'),\n\n    predefinedSettings: Ember['default'].computed.alias('settingsService.predefinedSettings'),\n    settings: Ember['default'].computed.alias('settingsService.settings'),\n\n    init: function() {\n      this._super();\n\n      this.get('settingsService').loadDefaultSettings();\n    },\n\n    excluded: function() {\n      var settings = this.get('settings');\n\n      return this.get('predefinedSettings').filter(function(setting) {\n        return settings.findBy('key.name', setting.name);\n      });\n    }.property('settings.@each.key'),\n\n    parseGlobalSettings: function () {\n      this.get('settingsService').parseGlobalSettings(this.get('openQueries.currentQuery'), this.get('index.model'));\n    }.observes('openQueries.currentQuery', 'openQueries.currentQuery.fileContent', 'openQueries.tabUpdated').on('init'),\n\n    actions: {\n      add: function () {\n        this.get('settingsService').add();\n      },\n\n      remove: function (setting) {\n        this.get('settingsService').remove(setting);\n      },\n\n      addKey: function (name) {\n        this.get('settingsService').createKey(name);\n      },\n\n      removeAll: function () {\n        this.get('settingsService').removeAll();\n      },\n\n      saveDefaultSettings: function() {\n        this.get('settingsService').saveDefaultSettings();\n      }\n    }\n  });\n\n});","define('hive/controllers/tez-ui', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    needs: [ constants['default'].namingConventions.index ],\n\n    index: Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.index),\n\n    tezViewURL: null,\n    tezApiURL: '/api/v1/views/TEZ',\n    tezURLPrefix: '/views/TEZ',\n    tezDagPath: '?viewPath=/#/dag/',\n\n    isTezViewAvailable: Ember['default'].computed.bool('tezViewURL'),\n\n    dagId: function () {\n      if (this.get('isTezViewAvailable')) {\n        return this.get('index.model.dagId');\n      }\n\n      return false;\n    }.property('index.model.dagId', 'isTezViewAvailable'),\n\n    dagURL: function () {\n      if (this.get('dagId')) {\n        return \"%@%@%@\".fmt(this.get('tezViewURL'), this.get('tezDagPath'), this.get('dagId'));\n      }\n\n      return false;\n    }.property('dagId'),\n\n    getTezView: function () {\n      if (this.get('isTezViewAvailable')) {\n        return;\n      }\n\n      var self = this;\n      Ember['default'].$.getJSON(this.get('tezApiURL'))\n        .then(function (response) {\n          self.getTezViewInstance(response);\n        })\n        .fail(function (response) {\n          self.setTezViewError(response);\n        });\n    }.on('init'),\n\n    getTezViewInstance: function (data) {\n      var self = this;\n      var url = data.versions[0].href;\n\n      Ember['default'].$.getJSON(url)\n        .then(function (response) {\n          if (!response.instances.length) {\n            self.setTezViewError(response);\n            return;\n          }\n\n          self.set('isTezViewAvailable', true);\n\n          var instance = response.instances[0].ViewInstanceInfo;\n          self.setTezViewURL(instance);\n        });\n    },\n\n    setTezViewURL: function (instance) {\n      var url = \"%@/%@/%@/\".fmt(\n        this.get('tezURLPrefix'),\n        instance.version,\n        instance.instance_name\n      );\n\n      this.set('tezViewURL', url);\n    },\n\n    setTezViewError: function (data) {\n      // status: 404 => Tev View isn't deployed\n      if (data.status && data.status === 404) {\n        this.set('error', 'tez.errors.not.deployed');\n        return;\n      }\n\n      // no instance created\n      if (data.instances && !data.instances.length) {\n        this.set('error', 'tez.errors.no.instance');\n        return;\n      }\n    }\n  });\n\n});","define('hive/controllers/udfs', ['exports', 'ember', 'hive/mixins/filterable', 'hive/utils/constants'], function (exports, Ember, FilterableMixin, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ArrayController.extend(FilterableMixin['default'], {\n    fileResources: [],\n\n    sortAscending: true,\n    sortProperties: [],\n\n    columns: [\n      Ember['default'].Object.create({\n        caption: 'placeholders.udfs.name',\n        property: 'name'\n      }),\n      Ember['default'].Object.create({\n        caption: 'placeholders.udfs.className',\n        property: 'classname'\n      })\n    ],\n\n    model: function () {\n      return this.filter(this.get('udfs'));\n    }.property('udfs', 'filters.@each'),\n\n    actions: {\n      handleAddFileResource: function (udf) {\n        var file = this.store.createRecord(constants['default'].namingConventions.fileResource);\n        udf.set('fileResource', file);\n        udf.set('isEditingResource', true);\n      },\n\n      handleDeleteFileResource: function (file) {\n        var defer = Ember['default'].RSVP.defer();\n\n        this.send('openModal',\n                  'modal-delete',\n                   {\n                      heading: 'modals.delete.heading',\n                      text: 'modals.delete.message',\n                      defer: defer\n                   });\n\n        defer.promise.then(function () {\n          file.destroyRecord();\n        });\n      },\n\n      handleSaveUdf: function (udf) {\n        var self = this,\n            saveUdf = function () {\n              udf.save().then(function () {\n                udf.set('isEditing', false);\n                udf.set('isEditingResource', false);\n              });\n            };\n\n        //replace with a validation system if needed.\n        if (!udf.get('name') || !udf.get('classname')) {\n          return;\n        }\n\n        udf.get('fileResource').then(function (file) {\n          if (file) {\n            if (!file.get('name') || !file.get('path')) {\n              return;\n            }\n\n            file.save().then(function () {\n              saveUdf();\n            });\n          } else {\n            saveUdf();\n          }\n        });\n      },\n\n      handleDeleteUdf: function (udf) {\n        var defer = Ember['default'].RSVP.defer();\n\n        this.send('openModal',\n                  'modal-delete',\n                   {\n                      heading: 'modals.delete.heading',\n                      text: 'modals.delete.message',\n                      defer: defer\n                   });\n\n        defer.promise.then(function () {\n          udf.destroyRecord();\n        });\n      },\n\n      sort: function (property) {\n        //if same column has been selected, toggle flag, else default it to true\n        if (this.get('sortProperties').objectAt(0) === property) {\n          this.set('sortAscending', !this.get('sortAscending'));\n        } else {\n          this.set('sortAscending', true);\n          this.set('sortProperties', [ property ]);\n        }\n      },\n\n      add: function () {\n        this.store.createRecord(constants['default'].namingConventions.udf);\n      },\n\n      clearFilters: function () {\n        var columns = this.get('columns');\n\n        if (columns) {\n          columns.forEach(function (column) {\n            var filterValue = column.get('filterValue');\n\n            if (filterValue && typeof filterValue === 'string') {\n              column.set('filterValue');\n            }\n          });\n        }\n\n        //call clear filters from Filterable mixin\n        this.clearFilters();\n      }\n    }\n  });\n\n});","define('hive/controllers/upload-table', ['exports', 'ember', 'hive/adapters/upload-table', 'hive/utils/constants'], function (exports, Ember, Uploader, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n    needs : ['databases'],\n    showErrors : false,\n    uploader: Uploader['default'].create(),\n    baseUrl: \"/resources/upload\",\n    isFirstRowHeader: null, // is first row  header\n    header: null,  // header received from server\n    files: null, // files that need to be uploaded only file[0] is relevant\n    firstRow: [], // the actual first row of the table.\n    rows: null,  // preview rows received from server\n    databaseName:null,\n    selectedDatabase : null,\n    filePath : null,\n    tableName: null,\n    dataTypes : [\n       \"TINYINT\", //\n       \"SMALLINT\", //\n       \"INT\", //\n       \"BIGINT\", //\n       \"BOOLEAN\", //\n       \"FLOAT\", //\n       \"DOUBLE\", //\n       \"STRING\", //\n       \"BINARY\", // -- (Note: Available in Hive 0.8.0 and later)\n       \"TIMESTAMP\", // -- (Note: Available in Hive 0.8.0 and later)\n       \"DECIMAL\", // -- (Note: Available in Hive 0.11.0 and later)\n       \"DATE\", // -- (Note: Available in Hive 0.12.0 and later)\n       \"VARCHAR\", // -- (Note: Available in Hive 0.12.0 and later)\n       \"CHAR\" // -- (Note: Available in Hive 0.13.0 and later)\n    ],\n    isFirstRowHeaderDidChange: function () {\n      console.log(\"inside onFirstRowHeader : isFirstRowHeader : \" + this.get('isFirstRowHeader'));\n      if (this.get('isFirstRowHeader') != null && typeof this.get('isFirstRowHeader') !== 'undefined') {\n        if (this.get('isFirstRowHeader') == false) {\n          if (this.get('rows')) {\n            this.get('rows').unshiftObject({row: this.get('firstRow')});\n          }\n        } else {\n          // take first row of\n          this.get('header').forEach(function (item, index) {\n            console.log(\"item : \", item);\n            console.log(\"this.get('firstRow').objectAt(index)  : \", this.get('firstRow').objectAt(index));\n            Ember['default'].set(item, 'name', this.get('firstRow')[index]);\n          }, this);\n\n          this.get('rows').removeAt(0);\n        }\n\n        this.printValues();\n      }\n    }.observes('isFirstRowHeader'),\n\n    uploadForPreview: function (files) {\n      console.log(\"uploaderForPreview called.\");\n      return this.get('uploader').uploadFiles('preview', files);\n    },\n\n    clearFields: function () {\n      this.set(\"header\");\n      this.set(\"rows\");\n      this.set(\"error\");\n      this.set('isFirstRowHeader');\n      this.set('files');\n      this.set(\"firstRow\");\n      this.set(\"selectedDatabase\");\n      this.set(\"databaseName\");\n      this.set(\"filePath\");\n      this.set('tableName');\n\n      this.printValues();\n    },\n\n    printValues: function () {\n      console.log(\"printing all values : \");\n      console.log(\"header : \", this.get('header'));\n      console.log(\"rows : \", this.get('rows'));\n      console.log(\"error : \", this.get('error'));\n      console.log(\"isFirstRowHeader : \", this.get('isFirstRowHeader'));\n      console.log(\"files : \", this.get('files'));\n      console.log(\"firstRow : \", this.get('firstRow'));\n    },\n    previewTable: function (data) {\n      console.log('inside previewTable');\n      this.set(\"header\", data.header);\n      this.set(\"rows\", data.rows);\n      this.set(\"firstRow\", data.rows[0].row);\n      console.log(\"firstRow : \", this.get('firstRow'));\n      this.set('isFirstRowHeader', data.isFirstRowHeader);\n    },\n\n    fetchCreateTableStatus: function (jobId, resolve, reject) {\n      var self = this;\n      this.get('uploader').getCreateTableResult(jobId).then(function (data) {\n        console.log(\"fetchCreateTableStatus : data : \", data);\n        var status = data.status;\n        if (status == \"Succeeded\") {\n          console.log(\"resolving fetchCreateTableStatus with : \" + data);\n          resolve(status);\n        } else if (status == \"Canceled\" || status == \"Closed\" || status == \"Error\") {\n          console.log(\"rejecting fetchCreateTableStatus with : \" + status);\n          reject(new Error(status));\n        } else {\n          console.log(\"retrying fetchCreateTableStatus : \");\n          self.fetchCreateTableStatus(jobId, resolve, reject);\n        }\n      }, function (error) {\n        console.log(\"rejecting fetchCreateTableStatus with : \" + error);\n        reject(error);\n      })\n    },\n\n    waitForResult: function (jobId) {\n      var self = this;\n      return new Ember['default'].RSVP.Promise(function (resolve, reject) {\n        self.fetchCreateTableStatus(jobId,resolve,reject);\n      });\n    },\n\n    createTable: function () {\n      var headers = JSON.stringify(this.get('header'));\n\n      var selectedDatabase = this.get('selectedDatabase');\n      if( null == selectedDatabase || typeof selectedDatabase === 'undefined'){\n        throw new Error(constants['default'].hive.errors.emptyDatabase);\n      }\n\n      this.set('databaseName',this.get('selectedDatabase').get('name'));\n      var databaseName = this.get('databaseName');\n      var tableName = this.get('tableName');\n      var isFirstRowHeader = this.get('isFirstRowHeader');\n      console.log(\"databaseName : \" , databaseName, \", tableName : \", tableName, \", isFirstRowHeader : \" , isFirstRowHeader , \", headers : \", headers);\n\n      if( null == databaseName || typeof databaseName === 'undefined'){\n        throw new Error(constants['default'].hive.errors.emptyDatabase);\n      }\n      if( null == tableName || typeof tableName === 'undefined'){\n        throw new Error(constants['default'].hive.errors.emptyTableName);\n      }\n      if( null == isFirstRowHeader || typeof isFirstRowHeader === 'undefined'){\n        throw new Error(constants['default'].hive.errors.emptyIsFirstRow);\n      }\n\n      this.validateColumns();\n\n      return this.get('uploader').createTable({\n        \"isFirstRowHeader\": isFirstRowHeader,\n        \"header\": headers,\n        \"tableName\": tableName,\n        \"databaseName\": databaseName\n      });\n    },\n\n    validateColumns: function(){\n      // TODO :check validation of columnames.\n      // throw exception if invalid.\n    },\n    setError: function(error){\n      this.set('error',JSON.stringify(error));\n      console.log(\"upload table error : \",error);\n      this.get('notifyService').error(error);\n    },\n\n    previewError: function (error) {\n      this.setError(error);\n    },\n\n    uploadTable: function () {\n      this.printValues();\n      return this.get('uploader').uploadFiles('upload', this.get('files'), {\n        \"isFirstRowHeader\": this.get(\"isFirstRowHeader\"),\n        \"filePath\": this.get('filePath')\n      });\n    },\n\n    onUploadSuccessfull: function (data) {\n      console.log(\"onUploadSuccessfull : \", data);\n      this.get('notifyService').success( \"Uploaded Successfully\", \"Table \" + this.get('tableName') + \" created in database \" + this.get(\"databaseName\"));\n      this.clearFields();\n    },\n\n    onUploadError: function (error) {\n      console.log(\"onUploadError : \", error);\n      this.setError(error);\n    },\n\n    actions: {\n      toggleErrors : function(){\n        this.toggleProperty('showErrors');\n      },\n      filesUploaded: function (files) {\n        console.log(\"upload-table.js : uploaded new files : \", files);\n\n        this.clearFields();\n\n        this.set('files', files);\n        var name = files[0].name;\n        var i = name.indexOf(\".\");\n        var tableName = name.substr(0, i);\n        this.set('tableName', tableName);\n        var self = this;\n        return this.uploadForPreview(files).then(function (data) {\n          self.previewTable(data);\n        }, function (error) {\n          self.previewError(error);\n        });\n      },\n\n      createTableAndUploadFile: function () {\n        var self = this;\n\n        try {\n          this.createTable()\n            .then(function (jobData) {\n              console.log(\"jobData : \", jobData);\n              self.set('filePath', jobData.filePath);\n              self.waitForResult(jobData.jobId)\n                .then(function (successStatus) {\n                  console.log(\"successStatus : \", successStatus);\n                  self.uploadTable().then(function (operationData) {\n                    console.log(\"operation successfull operationData : \", operationData);\n                    self.onUploadSuccessfull(operationData);\n                  }, function (error) {\n                    self.onUploadError(error);\n                  });\n                }, function (error) {\n                  self.onUploadError(error);\n                })\n            }, function (error) {\n              self.onUploadError(error);\n            })\n        }catch(e){\n          self.onUploadError(e);\n        }\n      }\n\n    }\n  });\n\n});","define('hive/controllers/visual-explain', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    jobProgressService: Ember['default'].inject.service(constants['default'].namingConventions.jobProgress),\n    openQueries   : Ember['default'].inject.controller(constants['default'].namingConventions.openQueries),\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    index: Ember['default'].inject.controller(),\n    verticesProgress: Ember['default'].computed.alias('jobProgressService.currentJob.stages'),\n\n    actions: {\n      onTabOpen: function () {\n        var self = this;\n\n        // Empty query\n        if(this.get('openQueries.currentQuery.fileContent').length == 0){\n          this.set('json', undefined);\n          this.set('noquery', 'hive.errors.no.query');\n          return;\n        } else {\n          this.set('noquery', undefined);\n        }\n        // Introducing a common function\n        var getVisualExplainJson = function(){\n          self.set('rerender');\n          self.get('index')._executeQuery(constants['default'].jobReferrer.visualExplain, true, true).then(function (json) {\n            //this condition should be changed once we change the way of retrieving this json\n            if (json['STAGE PLANS']['Stage-1']) {\n              self.set('json', json);\n            } else {\n              self.set('json', {})\n            }\n          }, function (error) {\n            self.set('json', undefined);\n            self.get('notifyService').error(error);\n          });\n          self.toggleProperty('shouldChangeGraph');\n        }\n\n        if(this.get('json') == undefined) {\n          getVisualExplainJson();\n\n        } else if (this.get('shouldChangeGraph')){\n          getVisualExplainJson();\n\n        } else {\n          this.set('rerender', true);\n          return;\n        }\n\n      }\n    }\n  });\n\n});","define('hive/controllers/visualization-ui', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  exports['default'] = Ember['default'].Controller.extend({\n    selectedRowCount: constants['default'].defaultVisualizationRowCount,\n    needs: [ constants['default'].namingConventions.index,\n              constants['default'].namingConventions.openQueries,\n              constants['default'].namingConventions.jobResults\n            ],\n    index         : Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.index),\n    openQueries   : Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.openQueries),\n    results   : Ember['default'].computed.alias('controllers.' + constants['default'].namingConventions.jobResults),\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    polestarUrl: '',\n    voyagerUrl: '',\n    polestarPath: 'polestar/#/',\n    voyagerPath: 'voyager/#/',\n\n    showDataExplorer: true,\n    showAdvVisulization: false,\n\n    visualizationTabs: function () {\n      return [\n        Ember['default'].Object.create({\n          name: 'Data Visualization',\n          id: 'visualization',\n          url: this.get('polestarUrl')\n        }),\n        Ember['default'].Object.create({\n          name: 'Data Explorer',\n          id: 'data_explorer',\n          url: this.get('voyagerUrl')\n        })\n      ]\n    }.property('polestarUrl', 'voyagerUrl'),\n\n    activeTab: function () {\n      console.log(\"I am in activeTab function.\");\n      this.get('visualizationTabs')[0].active = this.get(\"showDataExplorer\");\n      this.get('visualizationTabs')[1].active = this.get(\"showAdvVisulization\");\n    }.observes('polestarUrl', 'voyagerUrl'),\n\n    alterIframe: function () {\n      Ember['default'].$(\"#visualization_frame\").height(Ember['default'].$(\"#visualization\").height());\n    },\n\n    actions: {\n      onTabOpen: function () {\n        var self = this;\n        var model = this.get('index.model');\n        if (model) {\n          var existingJob = this.get('results').get('cachedResults').findBy('id', model.get('id'));\n          var url = this.container.lookup('adapter:application').buildURL();\n          url += '/' + constants['default'].namingConventions.jobs + '/' + model.get('id') + '/results?&first=true';\n          url += '&count='+self.get('selectedRowCount')+'&job_id='+model.get('id')\n          if (existingJob) {\n            if(existingJob.results[0].rows.length === 0){\n              this.set(\"error\", \"Query has insufficient results to visualize the data.\");\n              return;\n            }\n            this.set(\"error\", null);\n            var id = model.get('id');\n            this.set(\"polestarUrl\", this.get('polestarPath') + \"?url=\" + url);\n            this.set(\"voyagerUrl\", this.get('voyagerPath') + \"?url=\" + url);\n            Ember['default'].run.scheduleOnce('afterRender', this, function(){\n              self.alterIframe();\n            });\n          } else {\n            this.set(\"error\", \"No visualization available. Please execute a query and wait for the results to visualize the data.\");\n          }\n        }\n      },\n\n        changeRowCount: function () {\n          var self = this;\n          if(isNaN(self.get('selectedRowCount')) || !(self.get('selectedRowCount')%1 === 0) || (self.get('selectedRowCount') <= 0)){\n            self.get('notifyService').error(\"Please enter a posive integer number.\");\n            return;\n          }\n          var model = this.get('index.model');\n          if (model) {\n            var existingJob = this.get('results').get('cachedResults').findBy('id', model.get('id'));\n            var url = this.container.lookup('adapter:application').buildURL();\n            url += '/' + constants['default'].namingConventions.jobs + '/' + model.get('id') + '/results?&first=true';\n            url += '&count='+self.get('selectedRowCount')+'&job_id='+model.get('id');\n            if (existingJob) {\n              this.set(\"error\", null);\n              var id = model.get('id');\n\n              $('.nav-tabs.visualization-tabs li.active').each(function( index ) {\n\n                if($(this)[index].innerText.indexOf(\"Data Explorer\") > -1){\n                  self.set(\"showDataExplorer\",true);\n                  self.set(\"showAdvVisulization\",false);\n                  self.set(\"voyagerUrl\", self.get('voyagerPath') + \"?url=\" + url);\n                  self.set(\"polestarUrl\", self.get('polestarPath') + \"?url=\" + url);\n                  document.getElementById(\"visualization_frame\").src =  self.get(\"voyagerUrl\");\n                }\n                if($(this)[index].innerText.indexOf(\"Advanced Visualization\") > -1){\n                  self.set(\"showAdvVisulization\",true);\n                  self.set(\"showDataExplorer\",false);\n                  self.set(\"voyagerUrl\", self.get('voyagerPath') + \"?url=\" + url);\n                  self.set(\"polestarUrl\", self.get('polestarPath') + \"?url=\" + url);\n                  document.getElementById(\"visualization_frame\").src = self.get(\"polestarUrl\");\n                }\n              })\n              document.getElementById(\"visualization_frame\").contentWindow.location.reload();\n            } else {\n              this.set(\"error\", \"No visualization available. Please execute a query and wait for the results to visualize data.\");\n            }\n          }\n\n        }\n    }\n  });\n\n});","define('hive/helpers/all-uppercase', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.allUppercase = allUppercase;\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  function allUppercase (input) {\n    return input ? input.toUpperCase() : input;\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(allUppercase);\n\n});","define('hive/helpers/code-helper', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.code = code;\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  function code (text) {\n    text = Ember['default'].Handlebars.Utils.escapeExpression(text);\n    text = text.replace(/(\\r\\n|\\n|\\r)/gm, '<br>');\n\n    return new Ember['default'].Handlebars.SafeString('<code>' + text + '</code>');\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(code);\n\n});","define('hive/helpers/date-binding', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.pathBinding = pathBinding;\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /* globals moment */\n\n  function pathBinding (data, key) {\n    return moment(data.get(key)).fromNow();\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(pathBinding);\n\n});","define('hive/helpers/dynamic-component', ['exports', 'ember', 'ember-dynamic-component'], function (exports, Ember, ember_dynamic_component) {\n\n  'use strict';\n\n  exports['default'] = function(options) {\n    Ember['default'].assert(\"You can only pass attributes (such as name=value) not bare \" +\n                     \"values to {{dynamic-component}} '\", arguments.length < 2);\n\n    // pass the options through to the resulting view\n    // is there a valid type to use here?\n    // this works but...\n    options.hashTypes['_dynamicOptions'] = \"OBJECT\";\n    options.hash['_dynamicOptions']      = options;\n\n    return Ember['default'].Handlebars.helpers.view.call(this, ember_dynamic_component.DynamicComponentView, options);\n  }\n\n});","define('hive/helpers/fa-icon', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var FA_PREFIX = /^fa\\-.+/;\n\n  var warn = Ember['default'].Logger.warn;\n\n  /**\n   * Handlebars helper for generating HTML that renders a FontAwesome icon.\n   *\n   * @param  {String} name    The icon name. Note that the `fa-` prefix is optional.\n   *                          For example, you can pass in either `fa-camera` or just `camera`.\n   * @param  {Object} options Options passed to helper.\n   * @return {Ember.Handlebars.SafeString} The HTML markup.\n   */\n  var faIcon = function(name, options) {\n    if (Ember['default'].typeOf(name) !== 'string') {\n      var message = \"fa-icon: no icon specified\";\n      warn(message);\n      return new Ember['default'].Handlebars.SafeString(message);\n    }\n\n    var params = options.hash,\n      classNames = [],\n      html = \"\";\n\n    classNames.push(\"fa\");\n    if (!name.match(FA_PREFIX)) {\n      name = \"fa-\" + name;\n    }\n    classNames.push(name);\n    if (params.spin) {\n      classNames.push(\"fa-spin\");\n    }\n    if (params.flip) {\n      classNames.push(\"fa-flip-\" + params.flip);\n    }\n    if (params.rotate) {\n      classNames.push(\"fa-rotate-\" + params.rotate);\n    }\n    if (params.lg) {\n      warn(\"fa-icon: the 'lg' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\\\"lg\\\"}}\");\n      classNames.push(\"fa-lg\");\n    }\n    if (params.x) {\n      warn(\"fa-icon: the 'x' parameter is deprecated. Use 'size' instead. I.e. {{fa-icon size=\\\"\" + params.x + \"\\\"}}\");\n      classNames.push(\"fa-\" + params.x + \"x\");\n    }\n    if (params.size) {\n      if (Ember['default'].typeOf(params.size) === \"number\") {\n        classNames.push(\"fa-\" + params.size + \"x\");\n      } else {\n        classNames.push(\"fa-\" + params.size);\n      }\n    }\n    if (params.fixedWidth) {\n      classNames.push(\"fa-fw\");\n    }\n    if (params.listItem) {\n      classNames.push(\"fa-li\");\n    }\n    if (params.pull) {\n      classNames.push(\"pull-\" + params.pull);\n    }\n    if (params.border) {\n      classNames.push(\"fa-border\");\n    }\n    if (params.classNames && !Ember['default'].isArray(params.classNames)) {\n      params.classNames = [ params.classNames ];\n    }\n    if (!Ember['default'].isEmpty(params.classNames)) {\n      Array.prototype.push.apply(classNames, params.classNames);\n    }\n\n    html += \"<i\";\n    html += \" class='\" + classNames.join(\" \") + \"'\";\n    if (params.title) {\n      html += \" title='\" + params.title + \"'\";\n    }\n    html += \"></i>\";\n    return new Ember['default'].Handlebars.SafeString(html);\n  };\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(faIcon);\n\n  exports.faIcon = faIcon;\n\n});","define('hive/helpers/format-column-type', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   used to format the precision and scale of type in database's table's columns\n  **/\n\n  var columnTypeFormatter = function(column) {\n    var type = column.type;\n    var ext = type;\n    if( type === \"VARCHAR\" || type === \"CHAR\" || type == \"DECIMAL\"  ) {\n        ext += '(' + column.precision;\n      if (type == \"DECIMAL\") {\n          ext += \",\" + column.scale;\n      }\n      ext += \")\";\n    }\n\n    return ext;\n  };\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(columnTypeFormatter);\n\n});","define('hive/helpers/log-helper', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.log = log;\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  function log (text) {\n    text = Ember['default'].Handlebars.Utils.escapeExpression(text);\n    text = text.replace(/(\\r\\n|\\n|\\r)/gm, '<br>');\n\n    return new Ember['default'].Handlebars.SafeString(text);\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(log);\n\n});","define('hive/helpers/path-binding', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.pathBinding = pathBinding;\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  function pathBinding (data, key) {\n    if (!data || !key) {\n      return;\n    }\n\n    return data.get ? data.get(key) : data[key];\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(pathBinding);\n\n});","define('hive/helpers/preformatted-string', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.preformattedString = preformattedString;\n\n  /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  function preformattedString (string) {\n    string = string.replace(/\\\\n/g, '&#10;'); // newline\n    string = string.replace(/\\\\t/g, '&#09;'); // tabs\n    string = string.replace(/^\\s+|\\s+$/g, ''); // trim\n\n    return new Ember['default'].Handlebars.SafeString(string);\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(preformattedString);\n\n});","define('hive/helpers/tb-helper', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.tb = tb;\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  function tb (key, data) {\n    var path = data.get ? data.get(key) : data[key];\n\n    if (!path && key) {\n      return Ember['default'].I18n.t(key);\n    }\n\n    if (path) {\n      return Ember['default'].I18n.t(path);\n    }\n  }\n\n  exports['default'] = Ember['default'].Handlebars.makeBoundHelper(tb);\n\n});","define('hive/initializers/export-application-global', ['exports', 'ember', 'hive/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (config['default'].exportApplicationGlobal !== false) {\n      var value = config['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember['default'].String.classify(config['default'].modulePrefix);\n      }\n\n      if (!window[globalName]) {\n        window[globalName] = application;\n\n        application.reopen({\n          willDestroy: function() {\n            this._super.apply(this, arguments);\n            delete window[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('hive/initializers/i18n', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var TRANSLATIONS;\n\n  exports['default'] = {\n    name: 'i18n',\n    initialize: function () {\n      Ember['default'].ENV.I18N_COMPILE_WITHOUT_HANDLEBARS = true;\n      Ember['default'].FEATURES.I18N_TRANSLATE_HELPER_SPAN = false;\n      Ember['default'].I18n.translations = TRANSLATIONS;\n      Ember['default'].TextField.reopen(Ember['default'].I18n.TranslateableAttributes);\n    }\n  };\n\n  TRANSLATIONS = {\n    tooltips: {\n      refresh: 'Refresh database',\n      loadSample: 'Load sample data',\n      query: 'Query',\n      settings: 'Settings',\n      visualExplain: 'Visual Explain',\n      tez: 'Tez',\n      visualization: 'Visualization',\n      notifications: 'Notifications',\n      expand: 'Expand query panel',\n      makeSettingGlobal: 'Make setting global',\n      overwriteGlobalValue: 'Overwrite global setting value'\n    },\n\n    alerts: {\n      errors: {\n        save: {\n          query: \"Error when trying to execute the query\",\n          results: \"Error when trying to save the results.\"\n        },\n        get: {\n          tables: 'Error when trying to retrieve the tables for the selected database',\n          columns: 'Error when trying to retrieve the table columns.'\n        },\n        sessions: {\n          \"delete\": 'Error invalidating sessions'\n        },\n        job: {\n          status: \"An error occured while processing the job.\"\n        }\n      },\n      success: {\n        sessions: {\n          deleted: 'Session invalidated.'\n        },\n        settings: {\n          saved: 'Settings have been saved.'\n        },\n        query: {\n          execution: 'Query has been submitted.',\n          save: 'The query has been saved.',\n          update: 'The query has been updated.'\n        }\n      }\n    },\n\n    modals: {\n      \"delete\": {\n        heading: 'Confirm deletion',\n        message: 'Are you sure you want to delete this item?',\n        emptyQueryMessage: \"Your query is empty. Do you want to delete this item?\"\n      },\n\n      save: {\n        heading: 'Saving item',\n        saveBeforeCloseHeading: \"Save item before closing?\",\n        message: 'Enter name:',\n        overwrite: 'Saving will overwrite previously saved query'\n      },\n\n      download: {\n        csv: 'Download results as CSV',\n        hdfs: 'Please enter save path and name'\n      },\n\n      changeTitle: {\n        heading: 'Rename worksheet'\n      },\n      authenticationLDAP: {\n         heading: 'Enter the LDAP password'\n      }\n    },\n\n    titles: {\n      database: 'Database Explorer',\n      explorer: 'Databases',\n      results: 'Search Results',\n      settings: 'Database Settings',\n      query: {\n        tab: 'Worksheet',\n        editor: 'Query Editor',\n        process: 'Query Process Results',\n        parameters: 'Parameters',\n        visualExplain: 'Visual Explain',\n        tez: 'TEZ',\n        status: 'Status: ',\n        messages: 'Messages',\n        visualization: 'Visualization'\n      },\n      download: 'Save results...',\n      tableSample: '{{tableName}} sample'\n    },\n\n    placeholders: {\n      search: {\n        tables: 'Search tables...',\n        columns: 'Search columns in result tables...',\n        results: 'Filter columns...'\n      },\n      select: {\n        database: 'Select Database...',\n        udfs: 'Insert udfs',\n        file: 'Select File Resource...',\n        noFileResource: '(no file)',\n        value: \"Select value...\"\n      },\n      fileResource: {\n        name: \"resource name\",\n        path: \"resource path\"\n      },\n      udfs: {\n        name: 'udf name',\n        className: 'udf class name',\n        path: \"resource path\",\n        database: 'Select Database...'\n      },\n      settings: {\n        key: 'mapred.reduce.tasks',\n        value: '1'\n      }\n    },\n\n    menus: {\n      query: 'Query',\n      savedQueries: 'Saved Queries',\n      history: 'History',\n      udfs: 'UDFs',\n      uploadTable: 'Upload Table',\n      logs: 'Logs',\n      results: 'Results',\n      explain: 'Explain'\n    },\n\n    columns: {\n      id: 'id',\n      shortQuery: 'preview',\n      fileResource: 'file resource',\n      title: 'title',\n      database: 'database',\n      owner: 'owner',\n      user: 'user',\n      date: 'date submitted',\n      duration: 'duration',\n      status: 'status',\n      expand: '',\n      actions: ''\n    },\n\n    buttons: {\n      addItem: 'Add new item...',\n      insert: 'Insert',\n      \"delete\": 'Delete',\n      cancel: 'Cancel',\n      edit: 'Edit',\n      execute: 'Execute',\n      explain: 'Explain',\n      saveAs: 'Save as...',\n      save: 'Save',\n      newQuery: 'New Worksheet',\n      newUdf: 'New UDF',\n      history: 'History',\n      ok: 'OK',\n      stopJob: 'Stop execution',\n      stoppingJob: 'Stopping...',\n      close: 'Close',\n      clearFilters: 'Clear filters',\n      expand: 'Expand message',\n      collapse: 'Collapse message',\n      previousPage: 'previous',\n      uploadTable: 'Upload Table',\n      nextPage: 'next',\n      loadMore: 'Load more...',\n      saveHdfs: 'Save to HDFS',\n      saveCsv: 'Download as CSV',\n      runOnTez: 'Run on Tez',\n      killSession: 'Kill Session'\n    },\n\n    labels: {\n      noTablesMatch: 'No tables match',\n      table: 'Table '\n    },\n\n    popover: {\n      visualExplain: {\n        statistics: \"Statistics\"\n      },\n      queryEditorHelp: {\n        title: \"Did you know?\",\n        content: {\n          line1: \"Press CTRL + Space to autocomplete\",\n          line2: \"You can execute queries with multiple SQL statements delimited by a semicolon ';'\",\n          line3: \"You can highlight and run a fragment of a query\"\n        }\n      },\n      add: 'Add'\n    },\n\n    tez: {\n      errors: {\n        'not.deployed': \"Tez View isn't deployed.\",\n        'no.instance': \"No instance of Tez View found.\",\n        'no.dag': \"No DAG available\"\n      }\n    },\n\n    hive: {\n      errors: {\n        'no.query': \"No query to process.\",\n        'emptyDatabase' : \"Please select Database.\",\n        'emptyTableName' : \"Please enter tableName.\",\n        'emptyIsFirstRow' : \"Please select is First Row Header?\"\n      }\n    },\n\n    emptyList: {\n      history: {\n        noItems: \"No queries were run.\",\n        noMatches: \"No jobs match your filtering criteria\",\n      },\n      savedQueries: {\n        noItems: \"No queries were saved.\",\n        noMatches: \"No queries match your filtering criteria\"\n      }\n    },\n\n    settings: {\n      parsed: \"Query settings added\"\n    },\n\n    generalError: 'Unexpected error'\n  };\n\n});","define('hive/mixins/filterable', ['exports', 'ember', 'hive/utils/functions'], function (exports, Ember, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Mixin.create({\n    init: function () {\n      this._super();\n      this.clearFilters();\n    },\n\n    filter: function (items) {\n      var self = this;\n\n      if (items && this.get('filters.length')) {\n        items = items.filter(function (item) {\n          return self.get('filters').every(function (filter) {\n            var propValue = item.get(filter.property);\n\n            if (!!filter.value) {\n              if (filter.min !== undefined && filter.max !== undefined) {\n                if (utils['default'].isInteger(propValue)) {\n                  return +propValue >= +filter.min && +propValue <= +filter.max;\n                } else if (utils['default'].isDate(propValue)) {\n                  return propValue >= filter.min && propValue <= filter.max;\n                } else {\n                  return false;\n                }\n              } else if (filter.exactMatch) {\n                return propValue == filter.value;\n              } else {\n                return propValue && propValue.toLowerCase().indexOf(filter.value.toLowerCase()) > -1;\n              }\n            }\n\n            return false;\n          });\n        });\n      }\n\n      return items;\n    },\n\n    updateFilters: function (property, filterValue, exactMatch) {\n      var addFilter = function () {\n        if (!filterValue) {\n          return;\n        }\n\n        this.get('filters').pushObject(Ember['default'].Object.create({\n          property: property,\n          exactMatch: exactMatch,\n          min: filterValue.min,\n          max: filterValue.max,\n          value: filterValue\n        }));\n      };\n\n      var existentFilter = this.get('filters').find(function (filter) {\n        return filter.property === property;\n      });\n\n      if (existentFilter) {\n        if (filterValue) {\n          //remove and add again for triggering collection change thus avoiding to add observers on individual properties of a filter\n          this.get('filters').removeObject(existentFilter);\n          addFilter.apply(this);\n        } else {\n          //ensures removal of the filterValue when it's an empty string\n          this.set('filters', this.get('filters').without(existentFilter));\n        }\n      } else {\n         addFilter.apply(this);\n      }\n    },\n\n    clearFilters: function () {\n      var filters = this.get('filters');\n\n      if (!filters || filters.get('length')) {\n        this.set('filters', Ember['default'].A());\n      }\n    },\n\n    actions: {\n      filter: function (property, filterValue) {\n        this.updateFilters(property, filterValue);\n      }\n    }\n  });\n\n});","define('hive/mixins/sortable', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].SortableMixin.reopen({\n    sort: function (property) {\n      //if same column has been selected, toggle flag, else default it to true\n      if (this.get('sortProperties').objectAt(0) === property) {\n        this.set('sortAscending', !this.get('sortAscending'));\n      } else {\n        this.set('sortAscending', true);\n        this.set('sortProperties', [ property ]);\n      }\n    }\n  });\n\n});","define('hive/models/database', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var Database = DS['default'].Model.extend({\n    name: DS['default'].attr()\n  });\n\n  exports['default'] = Database;\n\n});","define('hive/models/file-resource', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr(),\n    path: DS['default'].attr(),\n    owner: DS['default'].attr()\n  });\n\n});","define('hive/models/file', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].Model.extend({\n    fileContent: DS['default'].attr(),\n    hasNext: DS['default'].attr(),\n    page: DS['default'].attr('number'),\n    pageCount: DS['default'].attr()\n  });\n\n});","define('hive/models/job', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].Model.extend({\n    title: DS['default'].attr('string'),\n    queryId: DS['default'].attr(),\n    queryFile: DS['default'].attr('string'),\n    owner: DS['default'].attr('string'),\n    dataBase: DS['default'].attr('string'),\n    duration: DS['default'].attr(),\n    status: DS['default'].attr('string'),\n    statusMessage: DS['default'].attr('string'),\n    dateSubmitted: DS['default'].attr('date'),\n    forcedContent: DS['default'].attr('string'),\n    logFile: DS['default'].attr('string'),\n    dagName:  DS['default'].attr('string'),\n    dagId: DS['default'].attr('string'),\n    sessionTag: DS['default'].attr('string'),\n    page: DS['default'].attr(),\n    statusDir: DS['default'].attr('string'),\n    applicationId: DS['default'].attr(),\n    referrer: DS['default'].attr('string'),\n    confFile: DS['default'].attr('string'),\n    globalSettings: DS['default'].attr('string'),\n\n    dateSubmittedTimestamp: function () {\n      var date = this.get('dateSubmitted');\n\n      return date ? date * 1000 : date;\n    }.property('dateSubmitted'),\n\n    uppercaseStatus: function () {\n      var status = this.get('status');\n\n      return status ? status.toUpperCase() : status;\n    }.property('status')\n  });\n\n});","define('hive/models/saved-query', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var Model = DS['default'].Model.extend({\n    dataBase: DS['default'].attr('string'),\n    title: DS['default'].attr('string'),\n    queryFile: DS['default'].attr('string'),\n    owner: DS['default'].attr('string'),\n    shortQuery: DS['default'].attr('string')\n  });\n\n  exports['default'] = Model;\n\n});","define('hive/models/udf', ['exports', 'ember-data', 'hive/utils/constants'], function (exports, DS, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].Model.extend({\n    name: DS['default'].attr(),\n    classname: DS['default'].attr(),\n    fileResource: DS['default'].belongsTo(constants['default'].namingConventions.fileResource, { async: true }),\n    owner: DS['default'].attr()\n  });\n\n});","define('hive/router', ['exports', 'ember', 'hive/config/environment', 'hive/utils/constants'], function (exports, Ember, config, constants) {\n\n  'use strict';\n\n   /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    var savedQueryPath = constants['default'].namingConventions.routes.queries + '/:' + constants['default'].namingConventions.savedQuery + '_id';\n    var historyQueryPath = constants['default'].namingConventions.routes.history + '/:' + constants['default'].namingConventions.job + '_id';\n\n    this.route(constants['default'].namingConventions.routes.queries);\n    this.route(constants['default'].namingConventions.routes.history);\n    this.route(constants['default'].namingConventions.routes.udfs);\n    this.route(constants['default'].namingConventions.routes.uploadTable);\n\n    this.resource(constants['default'].namingConventions.routes.index, { path: '/' }, function () {\n      this.route(constants['default'].namingConventions.routes.savedQuery, { path: savedQueryPath});\n      this.route(constants['default'].namingConventions.routes.historyQuery, { path: historyQueryPath}, function () {\n        this.route(constants['default'].namingConventions.routes.logs);\n        this.route(constants['default'].namingConventions.routes.results);\n        this.route(constants['default'].namingConventions.routes.explain);\n      });\n    });\n\n    this.route('loading');\n  });\n\n  exports['default'] = Router;\n\n});","define('hive/routes/application', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    setupController: function (controller, model) {\n      var self = this;\n\n      this.store.find(constants['default'].namingConventions.udf).then(function (udfs) {\n        self.controllerFor(constants['default'].namingConventions.udfs).set('udfs', udfs);\n      }, function (error) {\n        self.get('notifyService').error(error);\n      });\n    },\n\n    actions: {\n      openModal: function (modalTemplate, options) {\n        this.controllerFor(modalTemplate).setProperties({\n          content: options.content || {},\n          message: options.message,\n          heading: options.heading,\n          text: options.text,\n          type: options.type || \"text\",\n          defer: options.defer\n        });\n\n        return this.render(modalTemplate, {\n          into: 'application',\n          outlet: 'modal'\n        });\n      },\n\n      closeModal: function () {\n        return this.disconnectOutlet({\n          outlet: 'modal',\n          parentView: 'application'\n        });\n      },\n\n      openOverlay: function (overlay) {\n        return this.render(overlay.template, {\n          outlet: overlay.outlet,\n          into: overlay.into\n        });\n      },\n\n      closeOverlay: function (overlay) {\n        return this.disconnectOutlet({\n          outlet: overlay.outlet,\n          parentView: overlay.into\n        });\n      },\n\n      removeNotification: function (notification) {\n        this.get('notifyService').removeNotification(notification);\n      },\n\n      willTransition: function(transition) {\n        // close active overlay if we transition\n        this.controllerFor('queryTabs').setDefaultActive();\n\n        return transition;\n      }\n    }\n  });\n\n});","define('hive/routes/history', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    model: function () {\n      var self = this;\n\n      return this.store.find(constants['default'].namingConventions.job)[\"catch\"](function (error) {\n        self.get('notifyService').error(error);\n      });\n    },\n\n    setupController: function (controller, model) {\n      if (!model) {\n        return;\n      }\n\n      var filteredModel = model.filter(function (job) {\n         //filter out jobs with referrer type of sample, explain and visual explain\n         return (!job.get('referrer') || job.get('referrer') === constants['default'].jobReferrer.job) &&\n                !!job.get('id');\n      });\n\n      controller.set('history', filteredModel);\n    }\n  });\n\n});","define('hive/routes/index/history-query/explain', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    setupController: function (controller, model) {\n      this.controllerFor(constants['default'].namingConventions.openQueries).updateTabSubroute(model, constants['default'].namingConventions.subroutes.jobExplain);\n\n      this.controllerFor(constants['default'].namingConventions.routes.index).set('model', model);\n    }\n  });\n\n});","define('hive/routes/index/history-query/index', ['exports', 'ember', 'hive/utils/constants', 'hive/utils/functions'], function (exports, Ember, constants, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    setupController: function (controller, model) {\n      var subroute;\n      var existingTab = this.controllerFor(constants['default'].namingConventions.openQueries).getTabForModel(model);\n\n      if (existingTab) {\n        subroute = existingTab.get('subroute');\n      }\n\n      // filter out hdfs jobs\n      if (utils['default'].isInteger(model.get('id'))) {\n        if (subroute) {\n          this.transitionTo(subroute, model);\n        } else {\n          this.transitionTo(constants['default'].namingConventions.subroutes.jobLogs, model);\n        }\n      } else {\n        this.transitionTo(constants['default'].namingConventions.subroutes.historyQuery, model);\n        this.controllerFor(constants['default'].namingConventions.routes.index).set('model', model);\n      }\n    }\n  });\n\n});","define('hive/routes/index/history-query/logs', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    setupController: function (controller, model) {\n      this.controllerFor(constants['default'].namingConventions.openQueries).updateTabSubroute(model, constants['default'].namingConventions.subroutes.jobLogs);\n\n      this.controllerFor(constants['default'].namingConventions.routes.index).set('model', model);\n    }\n  });\n\n});","define('hive/routes/index/history-query/results', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    setupController: function (controller, model) {\n      this.controllerFor(constants['default'].namingConventions.openQueries).updateTabSubroute(model, constants['default'].namingConventions.subroutes.jobResults);\n\n      this.controllerFor(constants['default'].namingConventions.routes.index).set('model', model);\n    }\n  });\n\n});","define('hive/routes/index/index', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    beforeModel: function () {\n      var model = this.controllerFor(constants['default'].namingConventions.routes.index).get('model');\n\n      if (model && !model.get('isDeleted')) {\n        if (model.get('constructor.typeKey') === constants['default'].namingConventions.job) {\n          this.transitionTo(constants['default'].namingConventions.subroutes.historyQuery, model);\n        } else {\n          this.transitionTo(constants['default'].namingConventions.subroutes.savedQuery, model);\n        }\n      } else {\n        this.controllerFor(constants['default'].namingConventions.openQueries).navigateToLastTab();\n      }\n    }\n  });\n\n});","define('hive/routes/index/saved-query', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    setupController: function (controller, model) {\n      // settings modify fileContent to extract the settings\n      // when you load a saved query use the original fileContent\n      // this.store.find('file', model.get('queryFile'))\n      //   .then(function(queryFile) {\n      //     var changes = queryFile.changedAttributes();\n      //     if (changes.fileContent && changes.fileContent[0]) {\n      //       queryFile.set('fileContent', changes.fileContent[0]);\n      //     }\n      //   });\n\n      this.controllerFor(constants['default'].namingConventions.routes.index).set('model', model);\n    },\n\n    actions: {\n      error: function () {\n        this.store.unloadAll(constants['default'].namingConventions.savedQuery);\n        this.transitionTo(constants['default'].namingConventions.routes.index);\n      }\n    }\n  });\n\n});","define('hive/routes/loading', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\t/**\n\t * Licensed to the Apache Software Foundation (ASF) under one\n\t * or more contributor license agreements.  See the NOTICE file\n\t * distributed with this work for additional information\n\t * regarding copyright ownership.  The ASF licenses this file\n\t * to you under the Apache License, Version 2.0 (the\n\t * \"License\"); you may not use this file except in compliance\n\t * with the License.  You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\n\texports['default'] = Ember['default'].Route.extend({\n\t});\n\n});","define('hive/routes/queries', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    model: function () {\n      var self = this;\n\n      return this.store.find(constants['default'].namingConventions.savedQuery)[\"catch\"](function (error) {\n        self.get('notifyService').error(error);\n      });\n    },\n\n    setupController: function (controller, model) {\n      if (!model) {\n        return;\n      }\n\n      controller.set('queries', model);\n    }\n  });\n\n});","define('hive/routes/udfs', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Route.extend({\n    notifyService: Ember['default'].inject.service(constants['default'].namingConventions.notify),\n\n    setupController: function (controller, model) {\n      this._super();\n\n      var self = this;\n\n      this.store.find(constants['default'].namingConventions.fileResource).then(function (fileResources) {\n        controller.set('fileResources', fileResources);\n      })[\"catch\"](function (error) {\n        self.get('notifyService').error(error);\n      });;\n    }\n  });\n\n});","define('hive/serializers/database', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].JSONSerializer.extend({\n    extractArray: function (store, primaryType, rawPayload) {\n      var databases = rawPayload.databases.map(function (database) {\n        return {\n          id: database,\n          name: database\n        };\n      });\n\n      var payload = { databases: databases };\n      return this._super(store, primaryType, payload);\n    },\n\n    normalizePayload: function (payload) {\n      var normalized = payload.databases.map(function (database) {\n        return database;\n      });\n\n      return this._super(normalized);\n    }\n  });\n\n});","define('hive/serializers/file', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].RESTSerializer.extend({\n    primaryKey: 'filePath'\n  });\n\n});","define('hive/services/database', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Service.extend({\n    store: Ember['default'].inject.service(),\n\n    pageCount: 10,\n    selectedDatabase: null,\n    selectedTables: null,\n    databases: [],\n\n    init: function () {\n      this._super();\n\n      var databaseAdapter = this.container.lookup('adapter:database');\n      var baseUrl = databaseAdapter.buildURL() + '/' +\n                    databaseAdapter.pathForType(constants['default'].namingConventions.database) + '/';\n\n      this.set('baseUrl', baseUrl);\n    },\n\n    getDatabases: function () {\n      var defer = Ember['default'].RSVP.defer();\n      var self = this;\n\n      this.get('store').unloadAll(constants['default'].namingConventions.database);\n      this.get('store').fetchAll(constants['default'].namingConventions.database).then(function (databases) {\n        self.set('databases', databases);\n        defer.resolve(databases);\n      }, function (error) {\n        defer.reject(error);\n      })\n\n      return defer.promise;\n    },\n\n    // This will do a ajax call to fetch the current database by by-passing the store.\n    // As we want to retain the current state of databases in store and just want to\n    // find the current databases in the server\n    getDatabasesFromServer: function() {\n      var defer = Ember['default'].RSVP.defer();\n      var url = this.get('baseUrl');\n      Ember['default'].$.getJSON(url).then(function(data) {\n        defer.resolve(data.databases);\n      }, function(err) {\n        defer.reject(err);\n      });\n      return defer.promise;\n    },\n\n    setDatabaseByName: function (name) {\n      var database = this.databases.findBy('name', name);\n\n      if (database) {\n        this.set('selectedDatabase', database);\n      }\n    },\n\n    getColumnsPage: function (databaseName, table, searchTerm, firstSearchPage) {\n      var defer = Ember['default'].RSVP.defer();\n\n      var url = this.get('baseUrl') +\n                databaseName +\n                '/table/' +\n                table.get('name');\n\n      url += '.page?searchId&count=' + this.get('pageCount');\n      url += '&columns=3,5,6,8';\n\n      if (searchTerm) {\n        url += '&searchId=searchColumns' + '&like=' + searchTerm;\n\n        if (firstSearchPage) {\n          url += '&first=true';\n        }\n      } else if (!table.get('columns.length')) {\n        url += '&first=true';\n      }\n\n      Ember['default'].$.getJSON(url).then(function (data) {\n        Ember['default'].run(function () {\n          var columns;\n\n          columns = data.rows.map(function (row) {\n              return Ember['default'].Object.create({\n                name: row[0],\n                type: row[1],\n                precision : row[2],\n                scale : row[3]\n              });\n          });\n\n          defer.resolve({\n            columns: columns,\n            hasNext: data.hasNext\n          });\n        });\n      }, function (err) {\n        defer.reject(err);\n      });\n\n      return defer.promise;\n    },\n\n    getTablesPage: function (database, searchTerm, firstSearchPage) {\n      var defer = Ember['default'].RSVP.defer(),\n          url = this.get('baseUrl') +\n                database.get('name') +\n                '/table.page?count=';\n\n      url += this.get('pageCount');\n\n      if (searchTerm) {\n        url += '&searchId=searchTables' + '&like=' + searchTerm;\n\n        if (firstSearchPage) {\n          url += '&first=true';\n        }\n      } else if (!database.get('tables.length')) {\n        url += '&first=true';\n      }\n\n      Ember['default'].$.getJSON(url).then(function (data) {\n        var tables;\n\n        tables = data.rows.map(function (row) {\n          return Ember['default'].Object.create({\n            name: row[0]\n          });\n        });\n\n        defer.resolve({\n          tables: tables,\n          hasNext: data.hasNext\n        });\n      }, function (err) {\n        defer.reject(err);\n      });\n\n      return defer.promise;\n    },\n\n    getAllTables: function (db) {\n      var defer = Ember['default'].RSVP.defer();\n      var database = db || this.get('selectedDatabase');\n      var self;\n      var url;\n\n      if (!database) {\n        defer.resolve();\n      } else if (database.tables && !database.get('hasNext')) {\n        this.set('selectedTables', database.tables.mapProperty('name'));\n        defer.resolve();\n      } else {\n        self = this;\n        url = this.get('baseUrl') + database.get('name') + '/table';\n\n        Ember['default'].$.getJSON(url).then(function (data) {\n          var tables = data.tables.map(function (table) {\n            return Ember['default'].Object.create({\n              name: table\n            });\n          });\n\n          //don't use Ember.Object.set since it can be very expensive for large collections (e.g. 15000 tables),\n          //thus we should not do any bindings directly on the 'tables' collection.\n          database.tables = tables;\n\n          Ember['default'].run(function () {\n            self.set('selectedTables', tables.mapProperty('name'));\n          });\n\n          defer.resolve();\n        }, function (err) {\n          defer.reject(err);\n        });\n      }\n\n      return defer.promise;\n    },\n\n    getAllColumns: function (tableName, db) {\n      var database = db || this.get('selectedDatabase');\n      var defer = Ember['default'].RSVP.defer();\n      var table;\n      var self;\n      var url;\n\n      if (!database) {\n        defer.resolve();\n      } else {\n        table = database.tables.findBy('name', tableName);\n\n        if (!table) {\n          defer.resolve();\n        } else if (table.columns && !table.get('hasNext')) {\n          this.get('selectedTables')[tableName] = table.columns.mapProperty('name');\n          defer.resolve();\n        } else {\n          self = this;\n          url = this.get('baseUrl') + database.get('name') + '/table/' + tableName\n\n          Ember['default'].$.getJSON(url).then(function (data) {\n            var columns = data.columns.map(function (column) {\n              return Ember['default'].Object.create({\n                name: column[0],\n                type: column[1]\n              });\n            });\n\n            table.columns = columns;\n            table.set('hasNext', false);\n\n            self.get('selectedTables')[tableName] = columns.mapProperty('name');\n\n            defer.resolve();\n          }, function (err) {\n            defer.reject(err);\n          });\n        }\n      }\n\n      return defer.promise;\n    }\n  });\n\n});","define('hive/services/file', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Service.extend({\n    files: [],\n    store: Ember['default'].inject.service(),\n\n    loadFile: function (path) {\n      var self = this;\n      var defer = Ember['default'].RSVP.defer();\n      var file = this.files.findBy('id', path);\n\n      if (file) {\n        defer.resolve(file);\n      } else {\n        this.get('store').find(constants['default'].namingConventions.file, path).then(function (file) {\n          defer.resolve(self.files.pushObject(file));\n        }, function (err) {\n          defer.reject(err);\n        });\n      }\n\n      return defer.promise;\n    },\n\n    reloadFile: function (path) {\n      var defer = Ember['default'].RSVP.defer();\n\n      this.get('store').find(constants['default'].namingConventions.file, path).then(function (file) {\n        file.reload().then(function (reloadedFile) {\n          defer.resolve(reloadedFile);\n        }, function (err) {\n          defer.reject(err);\n        });\n      }, function (err) {\n        defer.reject(err);\n      });\n\n      return defer.promise;\n    }\n  });\n\n});","define('hive/services/job-progress', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Service.extend({\n    jobs: [],\n\n    setupProgress: function (currentModel) {\n      var job = this.jobs.findBy('model', currentModel);\n\n      if (!job) {\n        job = this.jobs.pushObject(Ember['default'].Object.create({\n          model: currentModel,\n          stages: [],\n          totalProgress: 0,\n          retrievingProgress: false,\n        }));\n      }\n\n      this.set('currentJob', job);\n    },\n\n    updateProgress: function () {\n      var job = this.get('currentJob');\n\n      if (!job.get('model.dagId')) {\n        return;\n      }\n\n      if (job.get('totalProgress') < 100 && !job.get('retrievingProgress')) {\n        this.reloadProgress(job);\n      }\n    }.observes('currentJob.model.dagId'),\n\n    reloadProgress: function (job) {\n      var self = this;\n      var url = '%@/%@/%@/progress'.fmt(this.container.lookup('adapter:application').buildURL(),\n                                           constants['default'].namingConventions.jobs,\n                                           job.get('model.id'));\n\n      job.set('retrievingProgress', true);\n\n      Ember['default'].$.getJSON(url).then(function (data) {\n        var total = 0;\n        var length = Object.keys(data.vertexProgresses).length;\n\n        if (!job.get('stages.length')) {\n          data.vertexProgresses.forEach(function (vertexProgress) {\n            var progress = vertexProgress.progress * 100;\n\n            job.get('stages').pushObject(Ember['default'].Object.create({\n              name: vertexProgress.name,\n              value: progress\n            }));\n\n            total += progress;\n          });\n        } else {\n          data.vertexProgresses.forEach(function (vertexProgress) {\n            var progress = vertexProgress.progress * 100;\n\n            job.get('stages').findBy('name', vertexProgress.name).set('value', progress);\n\n            total += progress;\n          });\n        }\n\n        total /= length;\n\n        job.set('totalProgress', total);\n\n        if (job.get('model.isRunning') && total < 100) {\n          Ember['default'].run.later(function () {\n            self.reloadProgress(job);\n          }, 1000);\n        } else {\n          job.set('retrievingProgress');\n        }\n      });\n    },\n\n    isJob: function (model) {\n      return model.get('constructor.typeKey') === constants['default'].namingConventions.job;\n    }\n  });\n\n});","define('hive/services/job', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Service.extend({\n    stopJob: function (job) {\n      var self = this;\n      var id = job.get('id');\n      var url = this.container.lookup('adapter:application').buildURL();\n      url +=  \"/jobs/\" + id;\n\n      job.set('isCancelling', true);\n\n      Ember['default'].$.ajax({\n         url: url,\n         type: 'DELETE',\n         headers: {\n          'X-Requested-By': 'ambari',\n         },\n         success: function () {\n           job.reload();\n         }\n      });\n    }\n  });\n\n});","define('hive/services/notify', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  exports['default'] = Ember['default'].Service.extend({\n    types: constants['default'].notify,\n\n    messages       : Ember['default'].ArrayProxy.create({ content : [] }),\n    notifications  : Ember['default'].ArrayProxy.create({ content : [] }),\n    unseenMessages : Ember['default'].ArrayProxy.create({ content : [] }),\n\n    add: function (type, message, body) {\n      var formattedBody = this.formatMessageBody(body);\n\n      var notification = Ember['default'].Object.create({\n        type    : type,\n        message : message,\n        body    : formattedBody\n      });\n\n      this.messages.pushObject(notification);\n      this.notifications.pushObject(notification);\n      this.unseenMessages.pushObject(notification);\n    },\n\n    info: function (message, body) {\n      this.add(this.types.INFO, message, body);\n    },\n\n    warn: function (message, body) {\n      this.add(this.types.WARN, message, body);\n    },\n\n    error: function (error) {\n      var message,\n          body;\n\n      if (error.responseJSON) {\n        message = error.responseJSON.message;\n        body = error.responseJSON.trace;\n      } else if (error.errorThrown) {\n        message = error.errorThrown;\n      } else if (error.message) {\n        message = error.message;\n      } else {\n        message = error;\n      }\n\n      this.add(this.types.ERROR, message, body);\n    },\n\n    success: function (message, body) {\n      this.add(this.types.SUCCESS, message, body);\n    },\n\n    formatMessageBody: function (body) {\n      if (!body) {\n        return;\n      }\n\n      if (typeof body === \"string\") {\n        return body;\n      }\n\n      if (typeof body === \"object\") {\n        var formattedBody = \"\";\n        for (var key in body) {\n          formattedBody += \"\\n\\n%@:\\n%@\".fmt(key, body[key]);\n        }\n\n        return formattedBody;\n      }\n    },\n\n    removeMessage: function (message) {\n      this.messages.removeObject(message);\n      this.notifications.removeObject(message);\n    },\n\n    removeNotification: function (notification) {\n      this.notifications.removeObject(notification);\n    },\n\n    removeAllMessages: function () {\n      this.messages.clear();\n    },\n\n    markMessagesAsSeen: function () {\n      if (this.unseenMessages.get('length')) {\n        this.unseenMessages.removeAt(0, this.unseenMessages.get('length'));\n      }\n    }\n  });\n\n});","define('hive/services/session', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Service.extend({\n\n    updateSessionStatus: function (model) {\n      var sessionActive = model.get('sessionActive');\n      var sessionTag    = model.get('sessionTag');\n      var adapter       = this.container.lookup('adapter:application');\n      var url           = adapter.buildURL() + '/jobs/sessions/' + sessionTag;\n\n      if (sessionTag && sessionActive === undefined) {\n        adapter.ajax(url, 'GET')\n          .then(function (response) {\n            model.set('sessionActive', response.session.actual);\n          })[\"catch\"](function () {\n            model.set('sessionActive', false);\n          });\n      }\n    },\n\n    killSession: function (model) {\n      var sessionTag = model.get('sessionTag');\n      var adapter    = this.container.lookup('adapter:application');\n      var url        = adapter.buildURL() + '/jobs/sessions/' + sessionTag;\n\n      return adapter.ajax(url, 'DELETE');\n    }\n\n  });\n\n});","define('hive/services/settings', ['exports', 'ember', 'hive/utils/constants'], function (exports, Ember, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Service.extend({\n\n    notifyService: Ember['default'].inject.service('notify'),\n\n    settings: Ember['default'].ArrayProxy.create({ content: [] }),\n    predefinedSettings: constants['default'].hiveParameters,\n\n    _createSetting: function(name, value) {\n      var setting = Ember['default'].Object.createWithMixins({\n        valid     : true,\n        value     : Ember['default'].computed.alias('selection.value'),\n        selection : Ember['default'].Object.create()\n      });\n\n      if (name) {\n        setting.set('key', Ember['default'].Object.create({ name: name }));\n      }\n\n      if (value) {\n        setting.set('selection.value', value);\n      }\n\n      return setting;\n    },\n\n    _createDefaultSettings: function(settings) {\n      if (!settings) {\n        return;\n      }\n\n      for (var key in settings) {\n        this.get('settings').pushObject(this._createSetting(key, settings[key]));\n      }\n    },\n\n    _validate: function () {\n      var settings = this.get('settings');\n      var predefinedSettings = this.get('predefinedSettings');\n\n      settings.forEach(function (setting) {\n        var predefined = predefinedSettings.findBy('name', setting.get('key.name'));\n\n        if (!predefined) {\n          return;\n        }\n\n        if (predefined.values && predefined.values.contains(setting.get('value'))) {\n          setting.set('valid', true);\n          return;\n        }\n\n        if (predefined.validate && predefined.validate.test(setting.get('value'))) {\n          setting.set('valid', true);\n          return;\n        }\n\n        if (!predefined.validate) {\n          setting.set('valid', true);\n          return;\n        }\n\n        setting.set('valid', false);\n      });\n    }.observes('settings.@each.value', 'settings.@each.key'),\n\n    add: function() {\n      this.get('settings').pushObject(this._createSetting());\n    },\n\n    createKey: function(name) {\n      var key = { name: name };\n      this.get('predefinedSettings').pushObject(key);\n\n      this.get('settings').findBy('key', null).set('key', key);\n    },\n\n    remove: function(setting) {\n      this.get('settings').removeObject(setting);\n    },\n\n    removeAll: function() {\n      this.get('settings').clear();\n    },\n\n    loadDefaultSettings: function() {\n      var adapter       = this.container.lookup('adapter:application');\n      var url           = adapter.buildURL() + '/savedQueries/defaultSettings';\n      var self = this;\n\n      adapter.ajax(url)\n        .then(function(response) {\n          self._createDefaultSettings(response.settings);\n        })[\"catch\"](function(error) {\n          self.get('notifyService').error(error);\n        });\n    },\n\n    saveDefaultSettings: function() {\n      var self     = this;\n      var data     = {};\n      var adapter  = this.container.lookup('adapter:application');\n      var url      = adapter.buildURL() + '/savedQueries/defaultSettings';\n      var settings = this.get('settings');\n\n      settings.forEach(function(setting) {\n        data[ setting.get('key.name') ] = setting.get('value');\n      });\n\n      adapter.ajax(url, 'POST', {\n        data: {settings: data }\n      })\n      .then(function(response) {\n        if (response && response.settings) {\n          self.get('notifyService').success(Ember['default'].I18n.t('alerts.success.settings.saved'));\n        } else {\n          self.get('notifyService').error(response);\n        }\n      });\n    },\n\n    getSettings: function() {\n      var settings = this.get('settings');\n      var asString = \"\";\n\n      if (!settings.get('length')) {\n        return asString;\n      }\n\n      settings.forEach(function(setting) {\n        asString += \"set %@=%@;\\n\".fmt(setting.get('key.name'), setting.get('value'));\n      });\n\n      asString += constants['default'].globalSettings.comment;\n\n      return asString;\n    },\n\n    parseGlobalSettings: function(query, model) {\n      if (!query || !model || !model.get('globalSettings')) {\n        return;\n      }\n\n      var globals = model.get('globalSettings');\n      var content = query.get('fileContent');\n\n      if (globals !== this.getSettings()) {\n        return;\n      }\n\n      query.set('fileContent', content.replace(globals, ''));\n    }\n\n  });\n\n});","define('hive/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"content\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [3]);\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        var morph2 = dom.createMorphAt(element0,0,1);\n        var morph3 = dom.createMorphAt(element0,1,2);\n        inline(env, morph0, context, \"notify-widget\", [], {\"notifications\": get(env, context, \"notifications\")});\n        content(env, morph1, context, \"navbar-widget\");\n        content(env, morph2, context, \"outlet\");\n        inline(env, morph3, context, \"outlet\", [\"modal\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/alert-message-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"alert-message\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          content(env, morph0, context, \"message.content\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"close\");\n        dom.setAttribute(el2,\"data-dismiss\",\"alert\");\n        dom.setAttribute(el2,\"aria-hidden\",\"true\");\n        var el3 = dom.createTextNode(\"×\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"strong\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element0, [3]);\n        var morph0 = dom.createMorphAt(element2,-1,-1);\n        var morph1 = dom.createMorphAt(element0,4,-1);\n        element(env, element0, context, \"bind-attr\", [], {\"class\": \":alert :alert-dismissible message.typeClass\"});\n        element(env, element1, context, \"action\", [\"remove\"], {});\n        element(env, element2, context, \"action\", [\"toggleMessage\"], {});\n        inline(env, morph0, context, \"tb-helper\", [get(env, context, \"message.title\")], {});\n        block(env, morph1, context, \"if\", [get(env, context, \"message.isExpanded\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/collapsible-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"a\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          element(env, element0, context, \"action\", [\"sendControlAction\", get(env, context, \"control.action\")], {});\n          element(env, element0, context, \"bind-attr\", [], {\"class\": \":fa control.icon\", \"title\": \"control.tooltip\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"clearfix\");\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"data-toggle\",\"tooltip\");\n        dom.setAttribute(el2,\"data-placement\",\"top\");\n        dom.setAttribute(el2,\"title\",\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"pull-right widget-controls\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }\n        var element1 = dom.childAt(fragment, [1]);\n        var element2 = dom.childAt(element1, [1]);\n        var morph0 = dom.createMorphAt(element2,-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n        var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);\n        element(env, element2, context, \"action\", [\"toggle\"], {});\n        element(env, element2, context, \"bind-attr\", [], {\"class\": \":fa iconClass :collapsible-row\", \"data-original-title\": get(env, context, \"heading\")});\n        content(env, morph0, context, \"heading\");\n        block(env, morph1, context, \"each\", [get(env, context, \"controls\")], {\"keyword\": \"control\"}, child0, null);\n        block(env, morph2, context, \"if\", [get(env, context, \"isExpanded\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/column-filter-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"date-range-widget\", [], {\"class\": \"pull-left\", \"rangeChanged\": \"sendFilter\", \"dateRange\": get(env, context, \"column.dateRange\")});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"number-range-widget\", [], {\"class\": \"pull-left\", \"numberRange\": get(env, context, \"column.numberRange\"), \"rangeChanged\": \"sendFilter\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"extended-input\", [], {\"type\": \"text\", \"class\": \"pull-left form-control input-sm\", \"placeholderTranslation\": get(env, context, \"column.caption\"), \"value\": get(env, context, \"filterValue\"), \"valueChanged\": \"sendFilter\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"column.numberRange\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"a\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          element(env, element0, context, \"bind-attr\", [], {\"class\": \":pull-right :fa sortAscending:fa-sort-asc:fa-sort-desc\"});\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"i\");\n          dom.setAttribute(el1,\"class\",\"pull-right fa fa-unsorted\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"span\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [1]);\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(element1,0,-1);\n        block(env, morph0, context, \"if\", [get(env, context, \"column.dateRange\")], {}, child0, child1);\n        element(env, element1, context, \"action\", [\"sendSort\"], {});\n        block(env, morph1, context, \"if\", [get(env, context, \"isSorted\")], {}, child2, child3);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/date-range-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"form-inline\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var morph0 = dom.createMorphAt(element0,0,1);\n        var morph1 = dom.createMorphAt(element0,1,2);\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"value\": get(env, context, \"displayFromDate\"), \"class\": \"input-sm form-control fromDate\"});\n        inline(env, morph1, context, \"input\", [], {\"type\": \"text\", \"value\": get(env, context, \"displayToDate\"), \"class\": \"input-sm form-control toDate\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/expander-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"panel panel-default no-margin\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel-heading accordion-heading\");\n        var el3 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"a\");\n        dom.setAttribute(el3,\"class\",\"accordion-toggle\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"badge pull-right\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel-body accordion-body collapse\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"accordion-inner\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [3]),-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element1, [5]),-1,-1);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [3, 1]),0,1);\n        element(env, element1, context, \"action\", [\"toggle\"], {});\n        element(env, element2, context, \"bind-attr\", [], {\"class\": \":fa isExpanded:fa-caret-down:fa-caret-right\"});\n        content(env, morph0, context, \"heading\");\n        content(env, morph1, context, \"count\");\n        content(env, morph2, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/job-tr-view', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"job.title\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"spinner small inline-spinner\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"t\", [\"buttons.stoppingJob\"], {});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"t\", [\"buttons.stopJob\"], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element0,0,1);\n            element(env, element0, context, \"bind-attr\", [], {\"class\": \":btn :btn-warning :btn-sm :pull-right job.isCancelling:disabled\"});\n            element(env, element0, context, \"action\", [\"stopJob\"], {});\n            block(env, morph0, context, \"if\", [get(env, context, \"job.isCancelling\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"tr\");\n          dom.setAttribute(el1,\"class\",\"secondary-row\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          dom.setAttribute(el2,\"colspan\",\"5\");\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1, 1]);\n          var morph0 = dom.createMorphAt(element1,0,1);\n          var morph1 = dom.createMorphAt(element1,1,2);\n          inline(env, morph0, context, \"code-helper\", [get(env, context, \"job.file.fileContent\")], {});\n          block(env, morph1, context, \"if\", [get(env, context, \"canStop\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"tr\");\n        dom.setAttribute(el1,\"class\",\"main-row\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"td\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"td\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"td\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"td\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"td\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"a\");\n        dom.setAttribute(el3,\"class\",\"fa fa-expand pull-right\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }\n        var element2 = dom.childAt(fragment, [1]);\n        var element3 = dom.childAt(element2, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element2, [1]),0,1);\n        var morph1 = dom.createMorphAt(element3,-1,-1);\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [5]),-1,-1);\n        var morph3 = dom.createMorphAt(dom.childAt(element2, [7]),-1,-1);\n        var morph4 = dom.createMorphAt(fragment,2,3,contextualElement);\n        element(env, element2, context, \"action\", [\"requestFile\"], {});\n        block(env, morph0, context, \"link-to\", [\"index.historyQuery\", get(env, context, \"job\")], {}, child0, null);\n        element(env, element3, context, \"bind-attr\", [], {\"class\": get(env, context, \"job.uppercaseStatus\")});\n        inline(env, morph1, context, \"all-uppercase\", [get(env, context, \"job.status\")], {});\n        inline(env, morph2, context, \"date-binding\", [get(env, context, \"job\"), \"dateSubmittedTimestamp\"], {});\n        content(env, morph3, context, \"job.duration\");\n        block(env, morph4, context, \"if\", [get(env, context, \"expanded\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/modal-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"modal fade\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"modal-dialog\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"modal-content\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"modal-header\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"close\");\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"aria-hidden\",\"true\");\n        dom.setAttribute(el6,\"data-dismiss\",\"modal\");\n        var el7 = dom.createTextNode(\"×\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"span\");\n        dom.setAttribute(el6,\"class\",\"sr-only\");\n        var el7 = dom.createTextNode(\"Close\");\n        dom.appendChild(el6, el7);\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"h4\");\n        dom.setAttribute(el5,\"class\",\"modal-title\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"modal-body\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"div\");\n        dom.setAttribute(el4,\"class\",\"modal-footer\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-sm btn-danger\");\n        dom.setAttribute(el5,\"data-dismiss\",\"modal\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"button\");\n        dom.setAttribute(el5,\"class\",\"btn btn-sm btn-success\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1, 1, 1]);\n        var element1 = dom.childAt(element0, [5]);\n        var element2 = dom.childAt(element1, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1, 3]),-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element1, [1]),-1,-1);\n        var morph3 = dom.createMorphAt(element2,-1,-1);\n        inline(env, morph0, context, \"tb-helper\", [get(env, context, \"heading\")], {});\n        content(env, morph1, context, \"yield\");\n        inline(env, morph2, context, \"t\", [\"buttons.close\"], {});\n        element(env, element2, context, \"action\", [\"ok\"], {});\n        inline(env, morph3, context, \"t\", [\"buttons.ok\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/navbar-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"view.title\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"a\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n            inline(env, morph0, context, \"tb-helper\", [\"text\", get(env, context, \"item\")], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"link-to\", [get(env, context, \"item.path\")], {\"tagName\": \"li\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"nav\");\n        dom.setAttribute(el1,\"class\",\"navbar navbar-default no-margin\");\n        dom.setAttribute(el1,\"role\",\"navigation\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"container-fluid\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\" Brand and toggle get grouped for better mobile display \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"navbar-header\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"button\");\n        dom.setAttribute(el4,\"type\",\"button\");\n        dom.setAttribute(el4,\"class\",\"navbar-toggle collapsed\");\n        dom.setAttribute(el4,\"data-toggle\",\"collapse\");\n        dom.setAttribute(el4,\"data-target\",\"#bs-example-navbar-collapse-1\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"sr-only\");\n        var el6 = dom.createTextNode(\"Toggle navigation\");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"icon-bar\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"icon-bar\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"span\");\n        dom.setAttribute(el5,\"class\",\"icon-bar\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\" Collect the nav links, forms, and other content for toggling \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"collapse navbar-collapse\");\n        dom.setAttribute(el3,\"id\",\"bs-example-navbar-collapse-1\");\n        var el4 = dom.createTextNode(\"\\n       \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"ul\");\n        dom.setAttribute(el4,\"class\",\"nav navbar-nav\");\n        var el5 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, get = hooks.get;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [3]),2,3);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [7, 1]),0,1);\n        block(env, morph0, context, \"link-to\", [\"index\"], {\"classNames\": \"navbar-brand mozBoxSizeFix\"}, child0, null);\n        block(env, morph1, context, \"each\", [get(env, context, \"view.items\")], {\"keyword\": \"item\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/no-bubbling', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/notify-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"view\", [\"notification\"], {\"notification\": get(env, context, \"notification\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"notifications\")], {\"keyword\": \"notification\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/number-range-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"slider\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"slider-labels\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"pull-left\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"span\");\n        dom.setAttribute(el2,\"class\",\"pull-right\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),-1,-1);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),-1,-1);\n        content(env, morph0, context, \"numberRange.fromDuration\");\n        content(env, morph1, context, \"numberRange.toDuration\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/panel-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                          \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"li\");\n                var el2 = dom.createElement(\"a\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element2 = dom.childAt(fragment, [1, 0]);\n                var morph0 = dom.createMorphAt(element2,-1,-1);\n                element(env, element2, context, \"bind-attr\", [], {\"href\": get(env, context, \"item.href\")});\n                content(env, morph0, context, \"item.title\");\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                          \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"li\");\n                var el2 = dom.createElement(\"a\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element1 = dom.childAt(fragment, [1, 0]);\n                var morph0 = dom.createMorphAt(element1,-1,-1);\n                element(env, element1, context, \"action\", [\"sendMenuItemAction\", get(env, context, \"item.action\")], {});\n                content(env, morph0, context, \"item.title\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              block(env, morph0, context, \"if\", [get(env, context, \"item.href\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"dropdown pull-right\");\n            var el2 = dom.createTextNode(\"\\n              \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"a\");\n            dom.setAttribute(el2,\"href\",\"#\");\n            dom.setAttribute(el2,\"class\",\"dropdown-toggle\");\n            dom.setAttribute(el2,\"data-toggle\",\"dropdown\");\n            var el3 = dom.createTextNode(\" \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"b\");\n            dom.setAttribute(el3,\"class\",\"caret\");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\\n              \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"ul\");\n            dom.setAttribute(el2,\"class\",\"dropdown-menu\");\n            dom.setAttribute(el2,\"role\",\"menu\");\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"              \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element3 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(dom.childAt(element3, [1]),-1,0);\n            var morph1 = dom.createMorphAt(dom.childAt(element3, [3]),0,1);\n            content(env, morph0, context, \"menuHeading\");\n            block(env, morph1, context, \"each\", [get(env, context, \"menuItems\")], {\"keyword\": \"item\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"i\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              element(env, element0, context, \"action\", [\"sendMenuItemAction\", get(env, context, \"iconAction.action\")], {});\n              element(env, element0, context, \"bind-attr\", [], {\"class\": \":pull-right :panel-action-icon :fa iconAction.icon\", \"title\": \"iconAction.tooltip\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"each\", [get(env, context, \"iconActions\")], {\"keyword\": \"iconAction\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"spinner small pull-right\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"panel-heading\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"strong\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element4 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element4,0,1);\n          var morph1 = dom.createMorphAt(element4,1,2);\n          var morph2 = dom.createMorphAt(dom.childAt(element4, [3]),-1,-1);\n          var morph3 = dom.createMorphAt(element4,4,5);\n          block(env, morph0, context, \"if\", [get(env, context, \"menuItems\")], {}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"iconActions\")], {}, child1, null);\n          content(env, morph2, context, \"heading\");\n          block(env, morph3, context, \"if\", [get(env, context, \"isLoading\")], {}, child2, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"panel-body\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element5 = dom.childAt(fragment, [1]);\n        var morph0 = dom.createMorphAt(element5,0,1);\n        var morph1 = dom.createMorphAt(dom.childAt(element5, [2]),0,1);\n        element(env, element5, context, \"bind-attr\", [], {\"class\": \":panel :panel-default classNames\"});\n        block(env, morph0, context, \"if\", [get(env, context, \"heading\")], {}, child0, null);\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/popover-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"span\");\n        dom.setAttribute(el1,\"class\",\"hide\");\n        var el2 = dom.createTextNode(\" \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\" \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/progress-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"progress\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1, 1]);\n        var morph0 = dom.createMorphAt(element0,0,1);\n        element(env, element0, context, \"bind-attr\", [], {\"class\": \":progress-bar :progress-bar-success\", \"style\": get(env, context, \"style\")});\n        content(env, morph0, context, \"percentage\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/query-editor', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        inline(env, morph0, context, \"textarea\", [], {\"id\": \"code-mirror\", \"rows\": \"15\", \"cols\": \"20\", \"value\": get(env, context, \"query\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/select-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"fa fa-remove pull-right\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"fa fa-edit pull-right\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [1]);\n            var element2 = dom.childAt(fragment, [3]);\n            element(env, element1, context, \"action\", [\"remove\", get(env, context, \"item\")], {});\n            element(env, element2, context, \"action\", [\"edit\", get(env, context, \"item\")], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element3 = dom.childAt(fragment, [1]);\n          var element4 = dom.childAt(element3, [1]);\n          var morph0 = dom.createMorphAt(element4,-1,0);\n          var morph1 = dom.createMorphAt(element4,0,1);\n          element(env, element3, context, \"action\", [\"select\", get(env, context, \"item\")], {});\n          inline(env, morph0, context, \"path-binding\", [get(env, context, \"item\"), get(env, context, \"labelPath\")], {});\n          block(env, morph1, context, \"if\", [get(env, context, \"canEdit\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createElement(\"a\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [0]),-1,-1);\n          element(env, element0, context, \"action\", [\"add\"], {});\n          inline(env, morph0, context, \"t\", [\"buttons.addItem\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"btn-group\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"a\");\n        dom.setAttribute(el2,\"class\",\"btn btn-default dropdown-toggle\");\n        dom.setAttribute(el2,\"data-toggle\",\"dropdown\");\n        var el3 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"selected-item pull-left\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"class\",\"pull-right fa fa-caret-down\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"ul\");\n        dom.setAttribute(el2,\"class\",\"dropdown-menu\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element5 = dom.childAt(fragment, [1]);\n        var element6 = dom.childAt(element5, [3]);\n        if (this.cachedFragment) { dom.repairClonedNode(element6,[1]); }\n        var morph0 = dom.createMorphAt(dom.childAt(element5, [1, 1]),-1,-1);\n        var morph1 = dom.createMorphAt(element6,0,1);\n        var morph2 = dom.createMorphAt(element6,1,2);\n        content(env, morph0, context, \"selectedLabel\");\n        block(env, morph1, context, \"each\", [get(env, context, \"items\")], {\"keyword\": \"item\"}, child0, null);\n        block(env, morph2, context, \"if\", [get(env, context, \"canAdd\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/tabs-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createTextNode(\"*\");\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  return fragment;\n                }\n              };\n            }());\n            var child1 = (function() {\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"              \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"i\");\n                  dom.setAttribute(el1,\"class\",\"fa fa-remove\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, get = hooks.get, element = hooks.element;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var element1 = dom.childAt(fragment, [1]);\n                  element(env, element1, context, \"action\", [\"remove\", get(env, context, \"tab\")], {});\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"          \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"a\");\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"          \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element2 = dom.childAt(fragment, [1]);\n                var morph0 = dom.createMorphAt(element2,0,1);\n                var morph1 = dom.createMorphAt(element2,1,2);\n                var morph2 = dom.createMorphAt(element2,2,3);\n                element(env, element2, context, \"action\", [\"titleClick\", get(env, context, \"tab\")], {\"on\": \"doubleClick\"});\n                content(env, morph0, context, \"tab.name\");\n                block(env, morph1, context, \"if\", [get(env, context, \"tab.isDirty\")], {}, child0, null);\n                block(env, morph2, context, \"if\", [get(env, context, \"view.removeEnabled\")], {}, child1, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              block(env, morph0, context, \"link-to\", [get(env, context, \"tab.path\"), get(env, context, \"tab.id\")], {\"tagName\": \"li\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"li\");\n              var el2 = dom.createTextNode(\"\\n          \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"a\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, get = hooks.get, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),-1,-1);\n              element(env, element0, context, \"bind-attr\", [], {\"class\": \"tab.active:active\"});\n              element(env, element0, context, \"action\", [\"selectTab\", get(env, context, \"tab\")], {});\n              content(env, morph0, context, \"tab.name\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"tab.path\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"tab.visible\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"nav nav-tabs\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"tabs\")], {\"keyword\": \"tab\"}, child0, null);\n        content(env, morph1, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/tree-view', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"tree-view\", [], {\"content\": get(env, context, \"item.contents\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          var morph1 = dom.createMorphAt(element0,1,2);\n          content(env, morph0, context, \"item.text\");\n          block(env, morph1, context, \"if\", [get(env, context, \"item.contents\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"list-unstyled\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"each\", [get(env, context, \"content\")], {\"keyword\": \"item\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/udf-tr-view', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n            inline(env, morph0, context, \"extended-input\", [], {\"type\": \"text\", \"class\": \"pull-left form-control halfed input-sm\", \"placeholderTranslation\": \"placeholders.fileResource.name\", \"value\": get(env, context, \"udf.fileResource.name\")});\n            inline(env, morph1, context, \"extended-input\", [], {\"type\": \"text\", \"class\": \"pull-left form-control halfed input-sm\", \"placeholderTranslation\": \"placeholders.fileResource.path\", \"value\": get(env, context, \"udf.fileResource.path\")});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"select-widget\", [], {\"items\": get(env, context, \"fileResources\"), \"selectedValue\": get(env, context, \"udf.fileResource\"), \"labelPath\": \"name\", \"defaultLabelTranslation\": \"placeholders.select.file\", \"itemAdded\": \"addFileResource\", \"itemEdited\": \"editFileResource\", \"itemRemoved\": \"deleteFileResource\", \"canAdd\": true, \"canEdit\": true});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"udf.isEditingResource\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"  (\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\")\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n            content(env, morph0, context, \"udf.fileResource.name\");\n            content(env, morph1, context, \"udf.fileResource.path\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"udf.fileResource\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"extended-input\", [], {\"type\": \"text\", \"class\": \"pull-left form-control input-sm\", \"placeholderTranslation\": get(env, context, \"column.caption\"), \"dynamicContextBinding\": \"udf\", \"dynamicValueBinding\": \"column.property\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"path-binding\", [get(env, context, \"udf\"), get(env, context, \"column.property\")], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"td\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"udf.isEditing\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"pull-right\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"type\",\"button\");\n          dom.setAttribute(el2,\"class\",\"btn btn-sm btn-warning\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"type\",\"button\");\n          dom.setAttribute(el2,\"class\",\"btn btn-sm btn-success\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element3 = dom.childAt(fragment, [1]);\n          var element4 = dom.childAt(element3, [1]);\n          var element5 = dom.childAt(element3, [3]);\n          var morph0 = dom.createMorphAt(element4,-1,-1);\n          var morph1 = dom.createMorphAt(element5,-1,-1);\n          element(env, element4, context, \"action\", [\"cancel\"], {});\n          inline(env, morph0, context, \"t\", [\"buttons.cancel\"], {});\n          element(env, element5, context, \"action\", [\"save\"], {});\n          inline(env, morph1, context, \"t\", [\"buttons.save\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"btn-group pull-right\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"span\");\n          dom.setAttribute(el2,\"data-toggle\",\"dropdown\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"a\");\n          dom.setAttribute(el3,\"class\",\"fa fa-gear\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"ul\");\n          dom.setAttribute(el2,\"class\",\"dropdown-menu\");\n          dom.setAttribute(el2,\"role\",\"menu\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"li\");\n          var el4 = dom.createElement(\"a\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"li\");\n          var el4 = dom.createElement(\"a\");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 3]);\n          var element1 = dom.childAt(element0, [1]);\n          var element2 = dom.childAt(element0, [3]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [0]),-1,-1);\n          var morph1 = dom.createMorphAt(dom.childAt(element2, [0]),-1,-1);\n          element(env, element1, context, \"action\", [\"editUdf\"], {});\n          inline(env, morph0, context, \"t\", [\"buttons.edit\"], {});\n          element(env, element2, context, \"action\", [\"deleteUdf\"], {});\n          inline(env, morph1, context, \"t\", [\"buttons.delete\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"td\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"td\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n        var morph2 = dom.createMorphAt(dom.childAt(fragment, [3]),0,-1);\n        block(env, morph0, context, \"if\", [get(env, context, \"udf.isEditing\")], {}, child0, child1);\n        block(env, morph1, context, \"each\", [get(env, context, \"columns\")], {\"keyword\": \"column\"}, child2, null);\n        block(env, morph2, context, \"if\", [get(env, context, \"udf.isEditing\")], {}, child3, child4);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/components/visualization-tabs-widget', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, get = hooks.get, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),-1,-1);\n          element(env, element0, context, \"bind-attr\", [], {\"class\": \"tab.active:active\"});\n          element(env, element0, context, \"action\", [\"selectTab\", get(env, context, \"tab\")], {});\n          content(env, morph0, context, \"tab.name\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        dom.setAttribute(el1,\"class\",\"nav nav-tabs visualization-tabs\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"iframe\");\n        dom.setAttribute(el1,\"id\",\"visualization_frame\");\n        dom.setAttribute(el1,\"style\",\"width:100%;height:1000px;border:0px;\");\n        dom.setAttribute(el1,\"allowfullscreen\",\"true\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"each\", [get(env, context, \"tabs\")], {\"keyword\": \"tab\"}, child0, null);\n        element(env, element1, context, \"bind-attr\", [], {\"src\": get(env, context, \"selectedTab.url\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/databases-search-results', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              var el2 = dom.createTextNode(\"\\n              \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"strong\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n              \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"span\");\n              dom.setAttribute(el2,\"class\",\"pull-right\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element3 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(dom.childAt(element3, [1]),-1,-1);\n              var morph1 = dom.createMorphAt(dom.childAt(element3, [3]),-1,-1);\n              content(env, morph0, context, \"column.name\");\n              content(env, morph1, context, \"column.type\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"strong\");\n              var el2 = dom.createElement(\"a\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element2 = dom.childAt(fragment, [1, 0]);\n              var morph0 = dom.createMorphAt(element2,-1,-1);\n              element(env, element2, context, \"action\", [\"showMoreResultColumns\", get(env, context, \"table\")], {});\n              inline(env, morph0, context, \"t\", [\"buttons.loadMore\"], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"a\");\n            dom.setAttribute(el1,\"class\",\"fa fa-th\");\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"columns\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element4 = dom.childAt(fragment, [3]);\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n            var morph1 = dom.createMorphAt(element4,0,1);\n            var morph2 = dom.createMorphAt(element4,1,2);\n            content(env, morph0, context, \"table.name\");\n            block(env, morph1, context, \"each\", [get(env, context, \"table.columns\")], {\"keyword\": \"column\"}, child0, null);\n            block(env, morph2, context, \"if\", [get(env, context, \"table.hasNext\")], {}, child1, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"strong\");\n            var el2 = dom.createElement(\"a\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [1, 0]);\n            var morph0 = dom.createMorphAt(element1,-1,-1);\n            element(env, element1, context, \"action\", [\"showMoreResultTables\", get(env, context, \"database\")], {});\n            inline(env, morph0, context, \"t\", [\"buttons.loadMore\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"databases\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          dom.setAttribute(el2,\"class\",\"fa fa-database\");\n          var el3 = dom.createTextNode(\" \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"tables\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element5 = dom.childAt(fragment, [1]);\n          var element6 = dom.childAt(element5, [3]);\n          var morph0 = dom.createMorphAt(dom.childAt(element5, [1]),0,-1);\n          var morph1 = dom.createMorphAt(element6,0,1);\n          var morph2 = dom.createMorphAt(element6,1,2);\n          content(env, morph0, context, \"selectedDatabase.name\");\n          block(env, morph1, context, \"each\", [get(env, context, \"tableSearchResults.tables\")], {\"keyword\": \"table\"}, child0, null);\n          block(env, morph2, context, \"if\", [get(env, context, \"tableSearchResults.hasNext\")], {}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"alert alert-warning database-explorer-alert\");\n          dom.setAttribute(el1,\"role\",\"alert\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"strong\");\n          var el3 = dom.createTextNode(\"\\\"\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [2]),0,1);\n          inline(env, morph0, context, \"t\", [\"labels.noTablesMatch\"], {});\n          content(env, morph1, context, \"tablesSearchTerm\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"if\", [get(env, context, \"tableSearchResults.tables\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/databases-tree', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              var child0 = (function() {\n                var child0 = (function() {\n                  return {\n                    isHTMLBars: true,\n                    blockParams: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    build: function build(dom) {\n                      var el0 = dom.createDocumentFragment();\n                      var el1 = dom.createTextNode(\"                    \");\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createElement(\"div\");\n                      var el2 = dom.createTextNode(\"\\n                      \");\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createElement(\"div\");\n                      dom.setAttribute(el2,\"class\",\"column-name\");\n                      dom.setAttribute(el2,\"data-toggle\",\"tooltip\");\n                      dom.setAttribute(el2,\"data-placement\",\"top\");\n                      dom.setAttribute(el2,\"title\",\"\");\n                      var el3 = dom.createTextNode(\"\\n                      \");\n                      dom.appendChild(el2, el3);\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createTextNode(\"\\n                      \");\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createElement(\"span\");\n                      dom.setAttribute(el2,\"class\",\"pull-right widget-controls\");\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createTextNode(\"\\n                    \");\n                      dom.appendChild(el1, el2);\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createTextNode(\"\\n\");\n                      dom.appendChild(el0, el1);\n                      return el0;\n                    },\n                    render: function render(context, env, contextualElement) {\n                      var dom = env.dom;\n                      var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content, inline = hooks.inline;\n                      dom.detectNamespace(contextualElement);\n                      var fragment;\n                      if (env.useFragmentCache && dom.canClone) {\n                        if (this.cachedFragment === null) {\n                          fragment = this.build(dom);\n                          if (this.hasRendered) {\n                            this.cachedFragment = fragment;\n                          } else {\n                            this.hasRendered = true;\n                          }\n                        }\n                        if (this.cachedFragment) {\n                          fragment = dom.cloneNode(this.cachedFragment, true);\n                        }\n                      } else {\n                        fragment = this.build(dom);\n                      }\n                      var element2 = dom.childAt(fragment, [1]);\n                      var element3 = dom.childAt(element2, [1]);\n                      var morph0 = dom.createMorphAt(element3,-1,0);\n                      var morph1 = dom.createMorphAt(dom.childAt(element2, [3]),-1,-1);\n                      element(env, element3, context, \"bind-attr\", [], {\"data-original-title\": get(env, context, \"column.name\")});\n                      content(env, morph0, context, \"column.name\");\n                      inline(env, morph1, context, \"format-column-type\", [get(env, context, \"column\")], {});\n                      return fragment;\n                    }\n                  };\n                }());\n                var child1 = (function() {\n                  return {\n                    isHTMLBars: true,\n                    blockParams: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    build: function build(dom) {\n                      var el0 = dom.createDocumentFragment();\n                      var el1 = dom.createTextNode(\"                    \");\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createElement(\"strong\");\n                      var el2 = dom.createElement(\"a\");\n                      dom.appendChild(el1, el2);\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createTextNode(\"\\n\");\n                      dom.appendChild(el0, el1);\n                      return el0;\n                    },\n                    render: function render(context, env, contextualElement) {\n                      var dom = env.dom;\n                      var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;\n                      dom.detectNamespace(contextualElement);\n                      var fragment;\n                      if (env.useFragmentCache && dom.canClone) {\n                        if (this.cachedFragment === null) {\n                          fragment = this.build(dom);\n                          if (this.hasRendered) {\n                            this.cachedFragment = fragment;\n                          } else {\n                            this.hasRendered = true;\n                          }\n                        }\n                        if (this.cachedFragment) {\n                          fragment = dom.cloneNode(this.cachedFragment, true);\n                        }\n                      } else {\n                        fragment = this.build(dom);\n                      }\n                      var element1 = dom.childAt(fragment, [1, 0]);\n                      var morph0 = dom.createMorphAt(element1,-1,-1);\n                      element(env, element1, context, \"action\", [\"showMoreColumns\", get(env, context, \"table\"), get(env, context, \"database\")], {});\n                      inline(env, morph0, context, \"t\", [\"buttons.loadMore\"], {});\n                      return fragment;\n                    }\n                  };\n                }());\n                return {\n                  isHTMLBars: true,\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"                \");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createElement(\"div\");\n                    dom.setAttribute(el1,\"class\",\"columns\");\n                    var el2 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el1, el2);\n                    var el2 = dom.createTextNode(\"\");\n                    dom.appendChild(el1, el2);\n                    var el2 = dom.createTextNode(\"                \");\n                    dom.appendChild(el1, el2);\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    var element4 = dom.childAt(fragment, [1]);\n                    if (this.cachedFragment) { dom.repairClonedNode(element4,[1]); }\n                    var morph0 = dom.createMorphAt(element4,0,1);\n                    var morph1 = dom.createMorphAt(element4,1,2);\n                    block(env, morph0, context, \"each\", [get(env, context, \"table.visibleColumns\")], {\"keyword\": \"column\"}, child0, null);\n                    block(env, morph1, context, \"if\", [get(env, context, \"table.canGetNextPage\")], {}, child1, null);\n                    return fragment;\n                  }\n                };\n              }());\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n                  var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                  block(env, morph0, context, \"if\", [get(env, context, \"table.isExpanded\")], {}, child0, null);\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n                var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                block(env, morph0, context, \"collapsible-widget\", [], {\"heading\": get(env, context, \"table.name\"), \"isExpanded\": get(env, context, \"table.isExpanded\"), \"toggledParam\": get(env, context, \"database\"), \"iconClass\": \"fa-table\", \"expanded\": \"getColumns\", \"controls\": get(env, context, \"tableControls\")}, child0, null);\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"strong\");\n                var el2 = dom.createElement(\"a\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element0 = dom.childAt(fragment, [1, 0]);\n                var morph0 = dom.createMorphAt(element0,-1,-1);\n                element(env, element0, context, \"action\", [\"showMoreTables\", get(env, context, \"database\")], {});\n                inline(env, morph0, context, \"t\", [\"buttons.loadMore\"], {});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"tables\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element5 = dom.childAt(fragment, [1]);\n              if (this.cachedFragment) { dom.repairClonedNode(element5,[1]); }\n              var morph0 = dom.createMorphAt(element5,0,1);\n              var morph1 = dom.createMorphAt(element5,1,2);\n              block(env, morph0, context, \"each\", [get(env, context, \"database.visibleTables\")], {\"keyword\": \"table\"}, child0, null);\n              block(env, morph1, context, \"if\", [get(env, context, \"database.canGetNextPage\")], {}, child1, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"database.isExpanded\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"collapsible-widget\", [], {\"heading\": get(env, context, \"database.name\"), \"isExpanded\": get(env, context, \"database.isExpanded\"), \"iconClass\": \"fa-database\", \"expanded\": \"getTables\", \"toggledParam\": get(env, context, \"database\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"databases\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"each\", [get(env, context, \"databases\")], {\"keyword\": \"database\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/databases', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"hr\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"extended-input\", [], {\"class\": \"form-control input-sm mozBoxSizeFix\", \"placeholderTranslation\": \"placeholders.search.tables\", \"valueSearched\": \"searchTables\", \"value\": get(env, context, \"tableSearchTerm\")});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\\n      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"hr\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"extended-input\", [], {\"class\": \"form-control input-sm mozBoxSizeFix\", \"placeholderTranslation\": \"placeholders.search.columns\", \"valueSearched\": \"searchColumns\", \"value\": get(env, context, \"columnSearchTerm\")});\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"partial\", [get(env, context, \"selectedTab.view\")], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"hr\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[6]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,3,4,contextualElement);\n            var morph2 = dom.createMorphAt(fragment,4,5,contextualElement);\n            var morph3 = dom.createMorphAt(fragment,5,6,contextualElement);\n            inline(env, morph0, context, \"typeahead-widget\", [], {\"content\": get(env, context, \"databases\"), \"optionValuePath\": \"id\", \"optionLabelPath\": \"name\", \"selection\": get(env, context, \"selectedDatabase\")});\n            block(env, morph1, context, \"if\", [get(env, context, \"selectedDatabase\")], {}, child0, null);\n            block(env, morph2, context, \"if\", [get(env, context, \"tableSearchResults.tables\")], {}, child1, null);\n            block(env, morph3, context, \"tabs-widget\", [], {\"tabs\": get(env, context, \"tabs\"), \"selectedTab\": get(env, context, \"selectedTab\")}, child2, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"databases\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"panel-widget\", [], {\"headingTranslation\": \"titles.database\", \"isLoading\": get(env, context, \"isLoading\"), \"classNames\": \"database-explorer\", \"iconActions\": get(env, context, \"panelIconActions\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/history', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"column-filter-widget\", [], {\"class\": \"pull-left\", \"column\": get(env, context, \"column\"), \"filterValue\": get(env, context, \"column.filterValue\"), \"sortAscending\": get(env, context, \"controller.sortAscending\"), \"sortProperties\": get(env, context, \"controller.sortProperties\"), \"columnSorted\": \"sort\", \"columnFiltered\": \"filter\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"tb-helper\", [\"caption\", get(env, context, \"column\")], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"th\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"column.caption\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"job-tr-view\", [], {\"job\": get(env, context, \"item\"), \"onStopJob\": \"interruptJob\", \"onFileRequested\": \"loadFile\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"each\", [get(env, context, \"this\")], {\"keyword\": \"item\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"tr\");\n            var el2 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"td\");\n            dom.setAttribute(el2,\"colspan\",\"5\");\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"h4\");\n            dom.setAttribute(el3,\"class\",\"empty-list\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),-1,-1);\n            inline(env, morph0, context, \"t\", [\"emptyList.history.noMatches\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"model.length\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"tr\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          dom.setAttribute(el2,\"colspan\",\"5\");\n          var el3 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"h4\");\n          dom.setAttribute(el3,\"class\",\"empty-list\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),-1,-1);\n          inline(env, morph0, context, \"t\", [\"emptyList.history.noItems\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"table\");\n        dom.setAttribute(el1,\"class\",\"table table-expandable\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"thead\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"tr\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"btn\");\n        dom.setAttribute(el5,\"class\",\"btn btn-sm btn-warning pull-right clear-filters\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"tbody\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var element1 = dom.childAt(element0, [1, 1]);\n        var element2 = dom.childAt(element1, [2, 1]);\n        var morph0 = dom.createMorphAt(element1,0,1);\n        var morph1 = dom.createMorphAt(element2,-1,-1);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n        block(env, morph0, context, \"each\", [get(env, context, \"columns\")], {\"keyword\": \"column\"}, child0, null);\n        element(env, element2, context, \"action\", [\"clearFilters\"], {});\n        inline(env, morph1, context, \"t\", [\"buttons.clearFilters\"], {});\n        block(env, morph2, context, \"if\", [get(env, context, \"history.length\")], {}, child1, child2);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            dom.setAttribute(el1,\"class\",\"btn btn-sm btn-success execute-query\");\n            var el2 = dom.createTextNode(\"\\n              \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element4 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element4,0,1);\n            element(env, element4, context, \"action\", [\"executeQuery\"], {});\n            inline(env, morph0, context, \"t\", [\"buttons.execute\"], {});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"spinner small inline-spinner\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"t\", [\"buttons.stoppingJob\"], {});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"                \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              inline(env, morph0, context, \"t\", [\"buttons.stopJob\"], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"            \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element3 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element3,0,1);\n            element(env, element3, context, \"bind-attr\", [], {\"class\": \":btn :btn-sm :btn-warning model.isCancelling:disabled\"});\n            element(env, element3, context, \"action\", [\"stopCurrentJob\"], {});\n            block(env, morph0, context, \"if\", [get(env, context, \"model.isCancelling\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"type\",\"button\");\n            dom.setAttribute(el1,\"class\",\"btn btn-sm btn-danger kill-session\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element2 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element2,-1,-1);\n            element(env, element2, context, \"action\", [\"killSession\"], {});\n            inline(env, morph0, context, \"t\", [\"buttons.killSession\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"toolbox\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"type\",\"button\");\n          var el3 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"type\",\"button\");\n          dom.setAttribute(el2,\"class\",\"btn btn-sm btn-default save-query-as\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          dom.setAttribute(el2,\"type\",\"button\");\n          dom.setAttribute(el2,\"class\",\"btn btn-sm btn-primary  pull-right\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element5 = dom.childAt(fragment, [2]);\n          var element6 = dom.childAt(element5, [2]);\n          var element7 = dom.childAt(element5, [4]);\n          var element8 = dom.childAt(element5, [8]);\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          var morph1 = dom.createMorphAt(element5,0,1);\n          var morph2 = dom.createMorphAt(element6,0,1);\n          var morph3 = dom.createMorphAt(element7,-1,-1);\n          var morph4 = dom.createMorphAt(element5,5,6);\n          var morph5 = dom.createMorphAt(element5,6,7);\n          var morph6 = dom.createMorphAt(element8,-1,-1);\n          inline(env, morph0, context, \"render\", [\"open-queries\"], {});\n          block(env, morph1, context, \"if\", [get(env, context, \"canExecute\")], {}, child0, child1);\n          element(env, element6, context, \"bind-attr\", [], {\"class\": \":btn :btn-sm :btn-default canExecute::disabled\"});\n          element(env, element6, context, \"action\", [\"explainQuery\"], {});\n          inline(env, morph2, context, \"t\", [\"buttons.explain\"], {});\n          element(env, element7, context, \"action\", [\"saveQuery\"], {});\n          inline(env, morph3, context, \"t\", [\"buttons.saveAs\"], {});\n          inline(env, morph4, context, \"render\", [\"insert-udfs\"], {});\n          block(env, morph5, context, \"if\", [get(env, context, \"canKillSession\")], {}, child2, null);\n          element(env, element8, context, \"action\", [\"addQuery\"], {});\n          inline(env, morph6, context, \"t\", [\"buttons.newQuery\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"progress-widget\", [], {\"value\": get(env, context, \"jobProgressService.currentJob.totalProgress\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"jobProgressService.currentJob.stages.length\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"              \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              var el2 = dom.createTextNode(\"\\n                \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"label\");\n              dom.setAttribute(el2,\"class\",\"col-sm-3 control-label\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n                  \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"div\");\n              dom.setAttribute(el2,\"class\",\"col-sm-9\");\n              var el3 = dom.createTextNode(\"\\n                    \");\n              dom.appendChild(el2, el3);\n              var el3 = dom.createTextNode(\"\\n                  \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n              \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, content = hooks.content, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element1 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),-1,-1);\n              var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n              element(env, element1, context, \"bind-attr\", [], {\"class\": \":form-group param.value:has-success:has-error\"});\n              content(env, morph0, context, \"param.name\");\n              inline(env, morph1, context, \"input\", [], {\"value\": get(env, context, \"param.value\"), \"placeholder\": \"value\", \"class\": \"form-control\"});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"form-horizontal\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"          \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n            block(env, morph0, context, \"each\", [get(env, context, \"queryParams\")], {\"keyword\": \"param\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"panel-widget\", [], {\"headingTranslation\": \"titles.query.parameters\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              content(env, morph0, context, \"outlet\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"tabs-widget\", [], {\"tabs\": get(env, context, \"queryProcessTabs\"), \"selectedTab\": get(env, context, \"selectedQueryProcessTab\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"panel-widget\", [], {\"heading\": get(env, context, \"queryProcessTitle\"), \"isLoading\": get(env, context, \"content.isRunning\"), \"menuItems\": get(env, context, \"downloadMenu\"), \"menuHeadingTranslation\": \"titles.download\", \"classNames\": \"query-process-results-panel\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child4 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"ul\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"li\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),-1,-1);\n          var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),-1,-1);\n          var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),-1,-1);\n          inline(env, morph0, context, \"t\", [\"popover.queryEditorHelp.content.line1\"], {});\n          inline(env, morph1, context, \"t\", [\"popover.queryEditorHelp.content.line2\"], {});\n          inline(env, morph2, context, \"t\", [\"popover.queryEditorHelp.content.line3\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"index-content\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"main-content\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"aside\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"query-menu\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, inline = hooks.inline, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element9 = dom.childAt(fragment, [1]);\n        var element10 = dom.childAt(element9, [1]);\n        var element11 = dom.childAt(element10, [1]);\n        var element12 = dom.childAt(element10, [3]);\n        var element13 = dom.childAt(element9, [4]);\n        var morph0 = dom.createMorphAt(element11,0,1);\n        var morph1 = dom.createMorphAt(element12,0,1);\n        var morph2 = dom.createMorphAt(element12,1,2);\n        var morph3 = dom.createMorphAt(element12,2,3);\n        var morph4 = dom.createMorphAt(element12,3,4);\n        var morph5 = dom.createMorphAt(element9,2,3);\n        var morph6 = dom.createMorphAt(element13,0,1);\n        var morph7 = dom.createMorphAt(element13,1,2);\n        element(env, element11, context, \"bind-attr\", [], {\"class\": \"isDatabaseExplorerVisible:col-md-3:no-width :col-xs-3 :no-padding\"});\n        inline(env, morph0, context, \"render\", [\"databases\"], {});\n        element(env, element12, context, \"bind-attr\", [], {\"class\": \"isDatabaseExplorerVisible:col-md-9:col-md-12 :col-xs-9 :query-container\"});\n        block(env, morph1, context, \"panel-widget\", [], {\"headingTranslation\": \"titles.query.editor\", \"classNames\": \"query-editor-panel\", \"iconActions\": get(env, context, \"queryPanelActions\")}, child0, null);\n        block(env, morph2, context, \"if\", [get(env, context, \"displayJobTabs\")], {}, child1, null);\n        block(env, morph3, context, \"if\", [get(env, context, \"queryParams\")], {}, child2, null);\n        block(env, morph4, context, \"if\", [get(env, context, \"displayJobTabs\")], {}, child3, null);\n        inline(env, morph5, context, \"outlet\", [\"overlay\"], {});\n        block(env, morph6, context, \"popover-widget\", [], {\"classNames\": \"fa fa-info-circle queries-icon\", \"titleTranslation\": \"popover.queryEditorHelp.title\"}, child4, null);\n        inline(env, morph7, context, \"render\", [\"query-tabs\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/index/history-query/explain', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"tree-view\", [], {\"content\": get(env, context, \"header.contents\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"expander-widget\", [], {\"heading\": get(env, context, \"header.text\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"formattedExplain\")], {\"keyword\": \"header\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/index/history-query/logs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        inline(env, morph0, context, \"log-helper\", [get(env, context, \"model.log\")], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/index/history-query/results', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"th\");\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n            content(env, morph0, context, \"column.name\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"              \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"td\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n              content(env, morph0, context, \"item\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"          \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"tr\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"          \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n            block(env, morph0, context, \"each\", [get(env, context, \"row\")], {\"keyword\": \"item\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"query-results-tools\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"pull-right\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"button\");\n          dom.setAttribute(el3,\"type\",\"button\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"button\");\n          dom.setAttribute(el3,\"type\",\"button\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"table\");\n          dom.setAttribute(el1,\"class\",\"table table-expandable\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"thead\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"tr\");\n          var el4 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"        \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"tbody\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, element = hooks.element, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [2]);\n          var element2 = dom.childAt(element1, [1]);\n          var element3 = dom.childAt(element1, [3]);\n          var element4 = dom.childAt(fragment, [3]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          var morph1 = dom.createMorphAt(element2,-1,-1);\n          var morph2 = dom.createMorphAt(element3,-1,-1);\n          var morph3 = dom.createMorphAt(dom.childAt(element4, [1, 1]),0,1);\n          var morph4 = dom.createMorphAt(dom.childAt(element4, [3]),0,1);\n          inline(env, morph0, context, \"extended-input\", [], {\"type\": \"text\", \"class\": \"pull-left input-sm form-control\", \"placeholderTranslation\": \"placeholders.search.results\", \"valueChanged\": \"filterResults\"});\n          element(env, element2, context, \"action\", [\"getPreviousPage\"], {});\n          element(env, element2, context, \"bind-attr\", [], {\"class\": \":btn :btn-sm :btn-default disablePrevious:disabled\"});\n          inline(env, morph1, context, \"t\", [\"buttons.previousPage\"], {});\n          element(env, element3, context, \"action\", [\"getNextPage\"], {});\n          element(env, element3, context, \"bind-attr\", [], {\"class\": \":btn :btn-sm :btn-default disableNext:disabled\"});\n          inline(env, morph2, context, \"t\", [\"buttons.nextPage\"], {});\n          block(env, morph3, context, \"each\", [get(env, context, \"formattedResults.columns\")], {\"keyword\": \"column\"}, child0, null);\n          block(env, morph4, context, \"each\", [get(env, context, \"formattedResults.rows\")], {\"keyword\": \"row\"}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"error\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"query-results\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"if\", [get(env, context, \"results\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/insert-udfs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"a\");\n              dom.setAttribute(el1,\"tabindex\",\"-1\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n              content(env, morph0, context, \"item.file.name\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"a\");\n              dom.setAttribute(el1,\"tabindex\",\"-1\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n              inline(env, morph0, context, \"tb-helper\", [get(env, context, \"item.name\")], {});\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"                  \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                content(env, morph0, context, \"udf.name\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"              \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"li\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"              \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n              block(env, morph0, context, \"no-bubbling\", [], {\"click\": \"insertUdf\", \"data\": get(env, context, \"udf\"), \"tagName\": \"a\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"li\");\n            dom.setAttribute(el1,\"class\",\"dropdown dropdown-submenu\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"          \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"ul\");\n            dom.setAttribute(el2,\"class\",\"dropdown-menu\");\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"          \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element0,0,1);\n            var morph1 = dom.createMorphAt(dom.childAt(element0, [2]),0,1);\n            block(env, morph0, context, \"if\", [get(env, context, \"item.file\")], {}, child0, child1);\n            block(env, morph1, context, \"each\", [get(env, context, \"item.udfs\")], {\"keyword\": \"udf\"}, child2, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"dropdown insert-udfs\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"a\");\n          dom.setAttribute(el2,\"role\",\"button\");\n          dom.setAttribute(el2,\"data-toggle\",\"dropdown\");\n          dom.setAttribute(el2,\"class\",\"btn btn-default btn-sm\");\n          dom.setAttribute(el2,\"data-target\",\"#\");\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"span\");\n          dom.setAttribute(el3,\"class\",\"caret\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"ul\");\n          dom.setAttribute(el2,\"class\",\"dropdown-menu pull-right\");\n          dom.setAttribute(el2,\"role\",\"menu\");\n          dom.setAttribute(el2,\"aria-labelledby\",\"dropdownMenu\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n          inline(env, morph0, context, \"t\", [\"placeholders.select.udfs\"], {});\n          block(env, morph1, context, \"each\", [get(env, context, \"this\")], {\"keyword\": \"item\"}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"if\", [get(env, context, \"this.length\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/loading', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"spinner\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/logs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        inline(env, morph0, context, \"log-helper\", [get(env, context, \"model.log\")], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/message', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"a\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          element(env, element0, context, \"action\", [\"expand\"], {\"target\": \"view\"});\n          content(env, morph0, context, \"view.notification.message\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"view.notification.message\");\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"pre\");\n          dom.setAttribute(el1,\"class\",\"message-body\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          inline(env, morph0, context, \"preformatted-string\", [get(env, context, \"view.notification.body\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"close\");\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        var el4 = dom.createTextNode(\"×\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"i\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [1]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(element1, [3]);\n        var morph0 = dom.createMorphAt(element1,4,5);\n        var morph1 = dom.createMorphAt(element1,5,-1);\n        element(env, element1, context, \"bind-attr\", [], {\"class\": \":alert :notification view.typeClass\"});\n        element(env, element2, context, \"action\", [\"close\"], {\"target\": \"view\"});\n        element(env, element3, context, \"bind-attr\", [], {\"class\": \":fa view.typeIcon\"});\n        block(env, morph0, context, \"if\", [get(env, context, \"view.notification.body\")], {}, child0, child1);\n        block(env, morph1, context, \"if\", [get(env, context, \"view.isExpanded\")], {}, child2, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/messages', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"button\");\n            dom.setAttribute(el1,\"class\",\"btn btn-danger btn-xs\");\n            var el2 = dom.createElement(\"i\");\n            dom.setAttribute(el2,\"class\",\"fa fa-minus\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\" Clear All\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            element(env, element0, context, \"action\", [\"removeAllMessages\"], {});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"view\", [\"message\"], {\"notification\": get(env, context, \"message\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"messages-controls\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"messages.length\")], {}, child0, null);\n          block(env, morph1, context, \"each\", [get(env, context, \"messages\")], {\"keyword\": \"message\"}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"messages\");\n        dom.setAttribute(el1,\"class\",\"index-overlay\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"panel-widget\", [], {\"headingTranslation\": \"titles.query.messages\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/modal-delete', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"tb-helper\", [get(env, context, \"text\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"modal-widget\", [], {\"heading\": get(env, context, \"heading\"), \"close\": \"close\", \"ok\": \"delete\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/modal-save-query', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"label label-warning\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n            inline(env, morph0, context, \"tb-helper\", [get(env, context, \"message\")], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[2]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n          inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"class\": \"form-control\", \"value\": get(env, context, \"text\")});\n          block(env, morph1, context, \"if\", [get(env, context, \"showMessage\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"modal-widget\", [], {\"heading\": get(env, context, \"heading\"), \"close\": \"close\", \"ok\": \"save\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/modal-save', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"input\", [], {\"type\": get(env, context, \"type\"), \"class\": \"form-control\", \"value\": get(env, context, \"text\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"modal-widget\", [], {\"heading\": get(env, context, \"heading\"), \"close\": \"close\", \"ok\": \"save\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/notification', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        dom.setAttribute(el2,\"type\",\"button\");\n        dom.setAttribute(el2,\"class\",\"close\");\n        var el3 = dom.createElement(\"span\");\n        dom.setAttribute(el3,\"aria-hidden\",\"true\");\n        var el4 = dom.createTextNode(\"×\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"i\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element0, [3]);\n        var morph0 = dom.createMorphAt(element0,4,5);\n        element(env, element0, context, \"bind-attr\", [], {\"class\": \":alert :notification view.typeClass\"});\n        element(env, element1, context, \"action\", [\"close\"], {\"target\": \"view\"});\n        element(env, element2, context, \"bind-attr\", [], {\"class\": \":fa view.typeIcon\"});\n        content(env, morph0, context, \"view.notification.message\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/open-queries', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, get = hooks.get;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n          inline(env, morph0, context, \"outlet\", [\"overlay\"], {});\n          inline(env, morph1, context, \"query-editor\", [], {\"tables\": get(env, context, \"selectedTables\"), \"query\": get(env, context, \"currentQuery.fileContent\"), \"editor\": get(env, context, \"view.editor\"), \"highlightedText\": get(env, context, \"highlightedText\"), \"columnsNeeded\": \"getColumnsForAutocomplete\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"tabs-widget\", [], {\"tabs\": get(env, context, \"queryTabs\"), \"removeClicked\": \"removeQueryTab\", \"canRemove\": true, \"onActiveTitleClick\": \"changeTabTitle\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/queries', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"column-filter-widget\", [], {\"class\": \"pull-left\", \"column\": get(env, context, \"column\"), \"filterValue\": get(env, context, \"column.filterValue\"), \"sortAscending\": get(env, context, \"controller.sortAscending\"), \"sortProperties\": get(env, context, \"controller.sortProperties\"), \"columnSorted\": \"sort\", \"columnFiltered\": \"filter\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"            \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            content(env, morph0, context, \"column.caption\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"th\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"column.caption\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                  \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, content = hooks.content;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                  content(env, morph0, context, \"query.shortQuery\");\n                  return fragment;\n                }\n              };\n            }());\n            var child1 = (function() {\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                  \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, content = hooks.content;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                  content(env, morph0, context, \"query.title\");\n                  return fragment;\n                }\n              };\n            }());\n            var child2 = (function() {\n              var child0 = (function() {\n                return {\n                  isHTMLBars: true,\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"                        \");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createElement(\"li\");\n                    var el2 = dom.createElement(\"a\");\n                    dom.appendChild(el1, el2);\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    var hooks = env.hooks, get = hooks.get, element = hooks.element, inline = hooks.inline;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    var element0 = dom.childAt(fragment, [1]);\n                    var morph0 = dom.createMorphAt(dom.childAt(element0, [0]),-1,-1);\n                    element(env, element0, context, \"action\", [\"executeAction\", get(env, context, \"link\"), get(env, context, \"query\")], {});\n                    inline(env, morph0, context, \"tb-helper\", [get(env, context, \"link\")], {});\n                    return fragment;\n                  }\n                };\n              }());\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                  \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"div\");\n                  dom.setAttribute(el1,\"class\",\"btn-group pull-right\");\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"span\");\n                  dom.setAttribute(el2,\"data-toggle\",\"dropdown\");\n                  var el3 = dom.createTextNode(\"\\n                      \");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createElement(\"a\");\n                  dom.setAttribute(el3,\"class\",\"fa fa-gear\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                    \");\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createElement(\"ul\");\n                  dom.setAttribute(el2,\"class\",\"dropdown-menu\");\n                  dom.setAttribute(el2,\"role\",\"menu\");\n                  var el3 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el2, el3);\n                  var el3 = dom.createTextNode(\"                    \");\n                  dom.appendChild(el2, el3);\n                  dom.appendChild(el1, el2);\n                  var el2 = dom.createTextNode(\"\\n                  \");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 3]),0,1);\n                  block(env, morph0, context, \"each\", [get(env, context, \"controller.links\")], {\"keyword\": \"link\"}, child0, null);\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"            \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"tr\");\n                var el2 = dom.createTextNode(\"\\n              \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"td\");\n                var el3 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createTextNode(\"              \");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n\\n              \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"td\");\n                var el3 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createTextNode(\"              \");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n\\n              \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"td\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n\\n              \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"td\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n\\n              \");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createElement(\"td\");\n                var el3 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el2, el3);\n                var el3 = dom.createTextNode(\"              \");\n                dom.appendChild(el2, el3);\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"\\n            \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element1 = dom.childAt(fragment, [1]);\n                var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,1);\n                var morph1 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n                var morph2 = dom.createMorphAt(dom.childAt(element1, [5]),-1,-1);\n                var morph3 = dom.createMorphAt(dom.childAt(element1, [7]),-1,-1);\n                var morph4 = dom.createMorphAt(dom.childAt(element1, [9]),0,1);\n                block(env, morph0, context, \"link-to\", [\"index.savedQuery\", get(env, context, \"query\")], {}, child0, null);\n                block(env, morph1, context, \"link-to\", [\"index.savedQuery\", get(env, context, \"query\")], {}, child1, null);\n                content(env, morph2, context, \"query.dataBase\");\n                content(env, morph3, context, \"query.owner\");\n                block(env, morph4, context, \"unless\", [get(env, context, \"query.isNew\")], {}, child2, null);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              block(env, morph0, context, \"unless\", [get(env, context, \"query.isNew\")], {}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"each\", [get(env, context, \"this\")], {\"keyword\": \"query\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"tr\");\n            var el2 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"td\");\n            dom.setAttribute(el2,\"colspan\",\"5\");\n            var el3 = dom.createTextNode(\"\\n            \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"h4\");\n            dom.setAttribute(el3,\"class\",\"empty-list\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),-1,-1);\n            inline(env, morph0, context, \"t\", [\"emptyList.savedQueries.noMatches\"], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"model.length\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"tr\");\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"td\");\n          dom.setAttribute(el2,\"colspan\",\"5\");\n          var el3 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"h4\");\n          dom.setAttribute(el3,\"class\",\"empty-list\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]),-1,-1);\n          inline(env, morph0, context, \"t\", [\"emptyList.savedQueries.noItems\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"table\");\n        dom.setAttribute(el1,\"class\",\"table\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"thead\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"tr\");\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"button\");\n        dom.setAttribute(el5,\"type\",\"btn\");\n        dom.setAttribute(el5,\"class\",\"btn btn-sm btn-warning pull-right clear-filters\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"tbody\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [1]);\n        var element3 = dom.childAt(element2, [1, 1]);\n        var element4 = dom.childAt(element3, [2, 1]);\n        var morph0 = dom.createMorphAt(element3,0,1);\n        var morph1 = dom.createMorphAt(element4,-1,-1);\n        var morph2 = dom.createMorphAt(dom.childAt(element2, [3]),0,1);\n        block(env, morph0, context, \"each\", [get(env, context, \"columns\")], {\"keyword\": \"column\"}, child0, null);\n        element(env, element4, context, \"action\", [\"clearFilters\"], {});\n        inline(env, morph1, context, \"t\", [\"buttons.clearFilters\"], {});\n        block(env, morph2, context, \"if\", [get(env, context, \"queries.length\")], {}, child1, child2);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/query-tabs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"span\");\n            dom.setAttribute(el1,\"class\",\"badge\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n            content(env, morph0, context, \"tab.badge\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            content(env, morph0, context, \"tab.text\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"span\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          if (this.cachedFragment) { dom.repairClonedNode(element0,[1]); }\n          var morph0 = dom.createMorphAt(element0,0,1);\n          var morph1 = dom.createMorphAt(element0,1,2);\n          element(env, element0, context, \"action\", [get(env, context, \"tab.action\"), get(env, context, \"tab\")], {});\n          element(env, element0, context, \"bind-attr\", [], {\"class\": \":query-menu-tab tabClassNames tab.iconClass tab.active:active tab.flash:flash\", \"title\": \"tab.tooltip\", \"id\": \"tab.id\"});\n          block(env, morph0, context, \"if\", [get(env, context, \"tab.badge\")], {}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"tab.text\")], {}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[1]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"tabs\")], {\"keyword\": \"tab\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/redirect', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/settings', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"button\");\n          dom.setAttribute(el1,\"class\",\"btn btn-danger btn-xs\");\n          var el2 = dom.createElement(\"i\");\n          dom.setAttribute(el2,\"class\",\"fa fa-minus\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" Remove All\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element4 = dom.childAt(fragment, [1]);\n          element(env, element4, context, \"action\", [\"removeAll\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                  \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"select-widget\", [], {\"items\": get(env, context, \"setting.key.values\"), \"labelPath\": \"value\", \"selectedValue\": get(env, context, \"setting.selection\"), \"defaultLabelTranslation\": \"placeholders.select.value\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"                  \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            inline(env, morph0, context, \"input\", [], {\"class\": \"input-sm form-control\", \"placeholderTranslation\": \"placeholders.select.value\", \"value\": get(env, context, \"setting.selection.value\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"setting col-md-12 col-sm-12\");\n          var el2 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"form\");\n          var el3 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"form-group\");\n          var el4 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"input-group\");\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"div\");\n          dom.setAttribute(el5,\"class\",\"input-group-addon\");\n          var el6 = dom.createTextNode(\"\\n\\n              \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"div\");\n          dom.setAttribute(el6,\"class\",\"typeahead-container\");\n          var el7 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"\\n              \");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createElement(\"div\");\n          var el6 = dom.createTextNode(\"\\n              \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"div\");\n          dom.setAttribute(el6,\"class\",\"setting-input-value\");\n          var el7 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el6, el7);\n          var el7 = dom.createTextNode(\"              \");\n          dom.appendChild(el6, el7);\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n\\n              \");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createElement(\"span\");\n          dom.setAttribute(el6,\"class\",\"fa fa-times-circle remove pull-right\");\n          dom.appendChild(el5, el6);\n          var el6 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el5, el6);\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1, 1, 1, 1]);\n          var element1 = dom.childAt(element0, [1, 1]);\n          var element2 = dom.childAt(element0, [3]);\n          var element3 = dom.childAt(element2, [3]);\n          var morph0 = dom.createMorphAt(element1,0,1);\n          var morph1 = dom.createMorphAt(dom.childAt(element2, [1]),0,1);\n          element(env, element1, context, \"bind-attr\", [], {\"keyname\": \"setting.key.name\"});\n          inline(env, morph0, context, \"typeahead-widget\", [], {\"options\": get(env, context, \"predefinedSettings\"), \"excluded\": get(env, context, \"excluded\"), \"optionLabelPath\": \"name\", \"optionValuePath\": \"name\", \"plugins\": \"remove_button,restore_on_backspace\", \"selection\": get(env, context, \"setting.key\"), \"safeValue\": get(env, context, \"setting.key.name\"), \"create\": \"addKey\"});\n          element(env, element2, context, \"bind-attr\", [], {\"class\": \":input-group-addon setting.valid::has-error\"});\n          block(env, morph1, context, \"if\", [get(env, context, \"setting.key.values\")], {}, child0, child1);\n          element(env, element3, context, \"action\", [\"remove\", get(env, context, \"setting\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"editor-overlay settings-container fadeIn\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"settings-controls\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-success btn-xs\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-plus\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" Add\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"btn btn-success btn-xs pull-right\");\n        var el4 = dom.createElement(\"i\");\n        dom.setAttribute(el4,\"class\",\"fa fa-plus\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\" Save Default Settings\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element5 = dom.childAt(fragment, [1]);\n        var element6 = dom.childAt(element5, [1]);\n        var element7 = dom.childAt(element6, [1]);\n        var element8 = dom.childAt(element6, [4]);\n        var morph0 = dom.createMorphAt(element6,2,3);\n        var morph1 = dom.createMorphAt(element5,2,-1);\n        element(env, element7, context, \"action\", [\"add\"], {});\n        block(env, morph0, context, \"if\", [get(env, context, \"settings.length\")], {}, child0, null);\n        element(env, element8, context, \"action\", [\"saveDefaultSettings\"], {});\n        block(env, morph1, context, \"each\", [get(env, context, \"settings\")], {\"keyword\": \"setting\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/tez-ui', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"iframe\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            element(env, element0, context, \"bind-attr\", [], {\"src\": get(env, context, \"dagURL\")});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"alert alert-danger\");\n              dom.setAttribute(el1,\"role\",\"alert\");\n              var el2 = dom.createElement(\"strong\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]),-1,-1);\n              inline(env, morph0, context, \"tb-helper\", [get(env, context, \"error\")], {});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"alert alert-danger\");\n              dom.setAttribute(el1,\"role\",\"alert\");\n              var el2 = dom.createElement(\"strong\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]),-1,-1);\n              inline(env, morph0, context, \"tb-helper\", [\"tez.errors.no.dag\"], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"error\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"dagURL\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"tez-ui\");\n        dom.setAttribute(el1,\"class\",\"index-overlay\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"panel-widget\", [], {\"headingTranslation\": \"titles.query.tez\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/udfs', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"        \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"th\");\n          var el2 = dom.createTextNode(\"\\n          \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n          inline(env, morph0, context, \"column-filter-widget\", [], {\"class\": \"pull-left\", \"column\": get(env, context, \"column\"), \"filterValue\": get(env, context, \"column.filterValue\"), \"sortAscending\": get(env, context, \"controller.sortAscending\"), \"sortProperties\": get(env, context, \"controller.sortProperties\"), \"columnSorted\": \"sort\", \"columnFiltered\": \"filter\"});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"udf-tr-view\", [], {\"udf\": get(env, context, \"udf\"), \"fileResources\": get(env, context, \"fileResources\"), \"columns\": get(env, context, \"columns\"), \"onAddFileResource\": \"handleAddFileResource\", \"onDeleteFileResource\": \"handleDeleteFileResource\", \"onSaveUdf\": \"handleSaveUdf\", \"onDeleteUdf\": \"handleDeleteUdf\"});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"table\");\n        dom.setAttribute(el1,\"class\",\"table\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"thead\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"tr\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createElement(\"div\");\n        dom.setAttribute(el5,\"class\",\"pull-right\");\n        var el6 = dom.createTextNode(\"\\n          \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"button\");\n        dom.setAttribute(el6,\"type\",\"button\");\n        dom.setAttribute(el6,\"class\",\"btn btn-sm btn-warning clear-filters\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n          \");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createElement(\"button\");\n        dom.setAttribute(el6,\"type\",\"button\");\n        dom.setAttribute(el6,\"class\",\"btn btn-sm btn-success add-udf\");\n        dom.appendChild(el5, el6);\n        var el6 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el5, el6);\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"tbody\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline, get = hooks.get, block = hooks.block, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var element1 = dom.childAt(element0, [1, 1]);\n        var element2 = dom.childAt(element1, [4, 1]);\n        var element3 = dom.childAt(element2, [1]);\n        var element4 = dom.childAt(element2, [3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),-1,-1);\n        var morph1 = dom.createMorphAt(element1,2,3);\n        var morph2 = dom.createMorphAt(element3,-1,-1);\n        var morph3 = dom.createMorphAt(element4,-1,-1);\n        var morph4 = dom.createMorphAt(dom.childAt(element0, [3]),0,1);\n        inline(env, morph0, context, \"t\", [\"columns.fileResource\"], {});\n        block(env, morph1, context, \"each\", [get(env, context, \"columns\")], {\"keyword\": \"column\"}, child0, null);\n        element(env, element3, context, \"action\", [\"clearFilters\"], {});\n        inline(env, morph2, context, \"t\", [\"buttons.clearFilters\"], {});\n        element(env, element4, context, \"action\", [\"add\"], {});\n        inline(env, morph3, context, \"t\", [\"buttons.newUdf\"], {});\n        block(env, morph4, context, \"each\", [get(env, context, \"this\")], {\"keyword\": \"udf\"}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/upload-table', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"render\", [\"messages\"], {});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"th\");\n              var el2 = dom.createTextNode(\" \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n              inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"class\": \"form-control\", \"value\": get(env, context, \"column.name\")});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"th\");\n              var el2 = dom.createTextNode(\" \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n      \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n              inline(env, morph0, context, \"typeahead-widget\", [], {\"content\": get(env, context, \"dataTypes\"), \"selection\": get(env, context, \"column.type\")});\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"      \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"td\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n                content(env, morph0, context, \"item\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"    \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"tr\");\n              var el2 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"    \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n              block(env, morph0, context, \"each\", [get(env, context, \"row.row\")], {\"keyword\": \"item\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"  \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"query-results-tools\");\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"pull-right\");\n            var el3 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"button\");\n            dom.setAttribute(el3,\"type\",\"button\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n  \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\\n  \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-3\");\n            var el3 = dom.createTextNode(\"Database :\\n      \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-3\");\n            var el3 = dom.createTextNode(\"Table Name : \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"col-md-3\");\n            var el3 = dom.createTextNode(\"Is First Row Header? :\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n  \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"id\",\"upload-table\");\n            var el2 = dom.createTextNode(\"\\n  \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"table\");\n            dom.setAttribute(el2,\"class\",\"table table-expandable\");\n            var el3 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"thead\");\n            var el4 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"tr\");\n            var el5 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createTextNode(\"    \");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createElement(\"tr\");\n            var el5 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el4, el5);\n            var el5 = dom.createTextNode(\"    \");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"tbody\");\n            var el4 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el3, el4);\n            var el4 = dom.createTextNode(\"    \");\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n  \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, inline = hooks.inline, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1, 1, 1]);\n            var element1 = dom.childAt(fragment, [3]);\n            var element2 = dom.childAt(fragment, [5, 1]);\n            var element3 = dom.childAt(element2, [1]);\n            var morph0 = dom.createMorphAt(element0,-1,-1);\n            var morph1 = dom.createMorphAt(dom.childAt(element1, [1]),0,1);\n            var morph2 = dom.createMorphAt(dom.childAt(element1, [3]),0,1);\n            var morph3 = dom.createMorphAt(dom.childAt(element1, [5]),0,1);\n            var morph4 = dom.createMorphAt(dom.childAt(element3, [1]),0,1);\n            var morph5 = dom.createMorphAt(dom.childAt(element3, [3]),0,1);\n            var morph6 = dom.createMorphAt(dom.childAt(element2, [3]),0,1);\n            element(env, element0, context, \"action\", [\"createTableAndUploadFile\"], {});\n            element(env, element0, context, \"bind-attr\", [], {\"class\": \":btn :btn-sm :btn-default\"});\n            inline(env, morph0, context, \"t\", [\"buttons.uploadTable\"], {});\n            inline(env, morph1, context, \"typeahead-widget\", [], {\"content\": get(env, context, \"controllers.databases.databases\"), \"optionValuePath\": \"id\", \"optionLabelPath\": \"name\", \"selection\": get(env, context, \"selectedDatabase\"), \"placeholder\": \"Select a Database\"});\n            inline(env, morph2, context, \"input\", [], {\"type\": \"text\", \"class\": \"form-control\", \"placeHolder\": \"Table Name\", \"value\": get(env, context, \"tableName\")});\n            inline(env, morph3, context, \"input\", [], {\"id\": \"isFirstRowHeader\", \"type\": \"checkbox\", \"class\": \"form-control\", \"checked\": get(env, context, \"isFirstRowHeader\")});\n            block(env, morph4, context, \"each\", [get(env, context, \"header\")], {\"keyword\": \"column\"}, child0, null);\n            block(env, morph5, context, \"each\", [get(env, context, \"header\")], {\"keyword\": \"column\"}, child1, null);\n            block(env, morph6, context, \"each\", [get(env, context, \"rows\")], {\"keyword\": \"row\"}, child2, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"<div class='fa query-menu-tab fa queries-icon query-context-tab fa-envelope'></div>\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, inline = hooks.inline, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,1);\n          var morph1 = dom.createMorphAt(fragment,3,4,contextualElement);\n          inline(env, morph0, context, \"file-upload\", [], {\"filesUploaded\": \"filesUploaded\"});\n          block(env, morph1, context, \"if\", [get(env, context, \"rows\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"pull-right\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"i\");\n        dom.setAttribute(el2,\"class\",\"query-menu-tab fa queries-icon query-context-tab fa-envelope\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"style\",\"width : 90%\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"main-content\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[5]); }\n        var element4 = dom.childAt(fragment, [1, 1]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [3, 1]),0,-1);\n        var morph1 = dom.createMorphAt(fragment,4,5,contextualElement);\n        element(env, element4, context, \"action\", [\"toggleErrors\"], {});\n        block(env, morph0, context, \"if\", [get(env, context, \"showErrors\")], {}, child0, null);\n        block(env, morph1, context, \"unless\", [get(env, context, \"showErrors\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/visual-explain', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"alert alert-danger\");\n              dom.setAttribute(el1,\"role\",\"alert\");\n              var el2 = dom.createElement(\"strong\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]),-1,-1);\n              inline(env, morph0, context, \"tb-helper\", [\"hive.errors.no.query\"], {});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"spinner\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"noquery\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"edge\");\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"edge-path\");\n            var el3 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element5 = dom.childAt(fragment, [1, 1]);\n            var morph0 = dom.createMorphAt(element5,0,1);\n            element(env, element5, context, \"bind-attr\", [], {\"style\": \"edge.style\"});\n            content(env, morph0, context, \"edge.type\");\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            var child0 = (function() {\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"                  \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createElement(\"p\");\n                  var el2 = dom.createElement(\"strong\");\n                  dom.appendChild(el1, el2);\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n                  \");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\\n\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, inline = hooks.inline, content = hooks.content;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]),-1,-1);\n                  var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n                  inline(env, morph0, context, \"t\", [\"labels.table\"], {});\n                  content(env, morph1, context, \"node.label\");\n                  return fragment;\n                }\n              };\n            }());\n            var child1 = (function() {\n              var child0 = (function() {\n                return {\n                  isHTMLBars: true,\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"                    \");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    var hooks = env.hooks, content = hooks.content;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                    content(env, morph0, context, \"node.label\");\n                    return fragment;\n                  }\n                };\n              }());\n              var child1 = (function() {\n                var child0 = (function() {\n                  var child0 = (function() {\n                    return {\n                      isHTMLBars: true,\n                      blockParams: 0,\n                      cachedFragment: null,\n                      hasRendered: false,\n                      build: function build(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode(\"                            \");\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode(\"\\n\");\n                        dom.appendChild(el0, el1);\n                        return el0;\n                      },\n                      render: function render(context, env, contextualElement) {\n                        var dom = env.dom;\n                        var hooks = env.hooks, content = hooks.content;\n                        dom.detectNamespace(contextualElement);\n                        var fragment;\n                        if (env.useFragmentCache && dom.canClone) {\n                          if (this.cachedFragment === null) {\n                            fragment = this.build(dom);\n                            if (this.hasRendered) {\n                              this.cachedFragment = fragment;\n                            } else {\n                              this.hasRendered = true;\n                            }\n                          }\n                          if (this.cachedFragment) {\n                            fragment = dom.cloneNode(this.cachedFragment, true);\n                          }\n                        } else {\n                          fragment = this.build(dom);\n                        }\n                        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                        content(env, morph0, context, \"section.statistics\");\n                        return fragment;\n                      }\n                    };\n                  }());\n                  var child1 = (function() {\n                    var child0 = (function() {\n                      return {\n                        isHTMLBars: true,\n                        blockParams: 0,\n                        cachedFragment: null,\n                        hasRendered: false,\n                        build: function build(dom) {\n                          var el0 = dom.createDocumentFragment();\n                          var el1 = dom.createTextNode(\"                            \");\n                          dom.appendChild(el0, el1);\n                          var el1 = dom.createElement(\"p\");\n                          var el2 = dom.createTextNode(\" \");\n                          dom.appendChild(el1, el2);\n                          dom.appendChild(el0, el1);\n                          var el1 = dom.createTextNode(\"\\n\");\n                          dom.appendChild(el0, el1);\n                          return el0;\n                        },\n                        render: function render(context, env, contextualElement) {\n                          var dom = env.dom;\n                          var hooks = env.hooks, content = hooks.content;\n                          dom.detectNamespace(contextualElement);\n                          var fragment;\n                          if (env.useFragmentCache && dom.canClone) {\n                            if (this.cachedFragment === null) {\n                              fragment = this.build(dom);\n                              if (this.hasRendered) {\n                                this.cachedFragment = fragment;\n                              } else {\n                                this.hasRendered = true;\n                              }\n                            }\n                            if (this.cachedFragment) {\n                              fragment = dom.cloneNode(this.cachedFragment, true);\n                            }\n                          } else {\n                            fragment = this.build(dom);\n                          }\n                          var element1 = dom.childAt(fragment, [1]);\n                          var morph0 = dom.createMorphAt(element1,-1,0);\n                          var morph1 = dom.createMorphAt(element1,0,-1);\n                          content(env, morph0, context, \"field.label\");\n                          content(env, morph1, context, \"field.value\");\n                          return fragment;\n                        }\n                      };\n                    }());\n                    return {\n                      isHTMLBars: true,\n                      blockParams: 0,\n                      cachedFragment: null,\n                      hasRendered: false,\n                      build: function build(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode(\"\");\n                        dom.appendChild(el0, el1);\n                        var el1 = dom.createTextNode(\"\");\n                        dom.appendChild(el0, el1);\n                        return el0;\n                      },\n                      render: function render(context, env, contextualElement) {\n                        var dom = env.dom;\n                        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                        dom.detectNamespace(contextualElement);\n                        var fragment;\n                        if (env.useFragmentCache && dom.canClone) {\n                          if (this.cachedFragment === null) {\n                            fragment = this.build(dom);\n                            if (this.hasRendered) {\n                              this.cachedFragment = fragment;\n                            } else {\n                              this.hasRendered = true;\n                            }\n                          }\n                          if (this.cachedFragment) {\n                            fragment = dom.cloneNode(this.cachedFragment, true);\n                          }\n                        } else {\n                          fragment = this.build(dom);\n                        }\n                        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n                        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                        block(env, morph0, context, \"if\", [get(env, context, \"field.value\")], {}, child0, null);\n                        return fragment;\n                      }\n                    };\n                  }());\n                  return {\n                    isHTMLBars: true,\n                    blockParams: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    build: function build(dom) {\n                      var el0 = dom.createDocumentFragment();\n                      var el1 = dom.createTextNode(\"                        \");\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createElement(\"p\");\n                      var el2 = dom.createTextNode(\"\\n\");\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createTextNode(\"                          \");\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createElement(\"strong\");\n                      var el3 = dom.createTextNode(\"\\n                            \");\n                      dom.appendChild(el2, el3);\n                      var el3 = dom.createTextNode(\". \");\n                      dom.appendChild(el2, el3);\n                      var el3 = dom.createTextNode(\"\\n                          \");\n                      dom.appendChild(el2, el3);\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createTextNode(\"\\n                          \");\n                      dom.appendChild(el1, el2);\n                      var el2 = dom.createTextNode(\"\\n                        \");\n                      dom.appendChild(el1, el2);\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createTextNode(\"\\n\\n\");\n                      dom.appendChild(el0, el1);\n                      var el1 = dom.createTextNode(\"\");\n                      dom.appendChild(el0, el1);\n                      return el0;\n                    },\n                    render: function render(context, env, contextualElement) {\n                      var dom = env.dom;\n                      var hooks = env.hooks, block = hooks.block, content = hooks.content, get = hooks.get;\n                      dom.detectNamespace(contextualElement);\n                      var fragment;\n                      if (env.useFragmentCache && dom.canClone) {\n                        if (this.cachedFragment === null) {\n                          fragment = this.build(dom);\n                          if (this.hasRendered) {\n                            this.cachedFragment = fragment;\n                          } else {\n                            this.hasRendered = true;\n                          }\n                        }\n                        if (this.cachedFragment) {\n                          fragment = dom.cloneNode(this.cachedFragment, true);\n                        }\n                      } else {\n                        fragment = this.build(dom);\n                      }\n                      if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }\n                      var element2 = dom.childAt(fragment, [1]);\n                      var element3 = dom.childAt(element2, [2]);\n                      var morph0 = dom.createMorphAt(element2,0,1);\n                      var morph1 = dom.createMorphAt(element3,0,1);\n                      var morph2 = dom.createMorphAt(element3,1,2);\n                      var morph3 = dom.createMorphAt(element2,3,4);\n                      var morph4 = dom.createMorphAt(fragment,2,3,contextualElement);\n                      block(env, morph0, context, \"popover-widget\", [], {\"classNames\": \"fa fa-info-circle\", \"titleTranslation\": \"popover.visualExplain.statistics\"}, child0, null);\n                      content(env, morph1, context, \"section.index\");\n                      content(env, morph2, context, \"section.title\");\n                      content(env, morph3, context, \"section.value\");\n                      block(env, morph4, context, \"each\", [get(env, context, \"section.fields\")], {\"keyword\": \"field\"}, child1, null);\n                      return fragment;\n                    }\n                  };\n                }());\n                return {\n                  isHTMLBars: true,\n                  blockParams: 0,\n                  cachedFragment: null,\n                  hasRendered: false,\n                  build: function build(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode(\"                    \");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createElement(\"div\");\n                    dom.setAttribute(el1,\"class\",\"node-heading\");\n                    var el2 = dom.createTextNode(\"\\n                      \");\n                    dom.appendChild(el1, el2);\n                    var el2 = dom.createElement(\"strong\");\n                    dom.appendChild(el1, el2);\n                    var el2 = dom.createTextNode(\"\\n                    \");\n                    dom.appendChild(el1, el2);\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n                    \");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createElement(\"div\");\n                    dom.setAttribute(el1,\"class\",\"node-content\");\n                    var el2 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el1, el2);\n                    var el2 = dom.createTextNode(\"                    \");\n                    dom.appendChild(el1, el2);\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n                    \");\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode(\"\\n\");\n                    dom.appendChild(el0, el1);\n                    return el0;\n                  },\n                  render: function render(context, env, contextualElement) {\n                    var dom = env.dom;\n                    var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block, inline = hooks.inline;\n                    dom.detectNamespace(contextualElement);\n                    var fragment;\n                    if (env.useFragmentCache && dom.canClone) {\n                      if (this.cachedFragment === null) {\n                        fragment = this.build(dom);\n                        if (this.hasRendered) {\n                          this.cachedFragment = fragment;\n                        } else {\n                          this.hasRendered = true;\n                        }\n                      }\n                      if (this.cachedFragment) {\n                        fragment = dom.cloneNode(this.cachedFragment, true);\n                      }\n                    } else {\n                      fragment = this.build(dom);\n                    }\n                    var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 1]),-1,-1);\n                    var morph1 = dom.createMorphAt(dom.childAt(fragment, [3]),0,1);\n                    var morph2 = dom.createMorphAt(fragment,4,5,contextualElement);\n                    content(env, morph0, context, \"node.label\");\n                    block(env, morph1, context, \"each\", [get(env, context, \"node.contents\")], {\"keyword\": \"section\"}, child0, null);\n                    inline(env, morph2, context, \"progress-widget\", [], {\"value\": get(env, context, \"node.progress\")});\n                    return fragment;\n                  }\n                };\n              }());\n              return {\n                isHTMLBars: true,\n                blockParams: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                build: function build(dom) {\n                  var el0 = dom.createDocumentFragment();\n                  var el1 = dom.createTextNode(\"\");\n                  dom.appendChild(el0, el1);\n                  var el1 = dom.createTextNode(\"\");\n                  dom.appendChild(el0, el1);\n                  return el0;\n                },\n                render: function render(context, env, contextualElement) {\n                  var dom = env.dom;\n                  var hooks = env.hooks, get = hooks.get, block = hooks.block;\n                  dom.detectNamespace(contextualElement);\n                  var fragment;\n                  if (env.useFragmentCache && dom.canClone) {\n                    if (this.cachedFragment === null) {\n                      fragment = this.build(dom);\n                      if (this.hasRendered) {\n                        this.cachedFragment = fragment;\n                      } else {\n                        this.hasRendered = true;\n                      }\n                    }\n                    if (this.cachedFragment) {\n                      fragment = dom.cloneNode(this.cachedFragment, true);\n                    }\n                  } else {\n                    fragment = this.build(dom);\n                  }\n                  if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n                  var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                  block(env, morph0, context, \"if\", [get(env, context, \"node.isOutputNode\")], {}, child0, child1);\n                  return fragment;\n                }\n              };\n            }());\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"              \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"div\");\n                var el2 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el1, el2);\n                var el2 = dom.createTextNode(\"              \");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var element4 = dom.childAt(fragment, [1]);\n                var morph0 = dom.createMorphAt(element4,0,1);\n                element(env, element4, context, \"bind-attr\", [], {\"class\": \"node.isTableNode:table-node node.isOutputNode:output-node :node\", \"title\": \"node.id\"});\n                block(env, morph0, context, \"if\", [get(env, context, \"node.isTableNode\")], {}, child0, child1);\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              block(env, morph0, context, \"each\", [get(env, context, \"group.contents\")], {\"keyword\": \"node\"}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"            \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"node\");\n              var el2 = dom.createTextNode(\"\\n              \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n            \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              var morph0 = dom.createMorphAt(element0,0,1);\n              element(env, element0, context, \"bind-attr\", [], {\"title\": \"group.label\"});\n              content(env, morph0, context, \"group.label\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"        \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"node-container\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"        \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,1);\n            block(env, morph0, context, \"if\", [get(env, context, \"group.contents\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"no-visual-explain-graph\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"visual-explain-graph\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"nodes\");\n          var el3 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element6 = dom.childAt(fragment, [4]);\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          var morph1 = dom.createMorphAt(element6,0,1);\n          var morph2 = dom.createMorphAt(dom.childAt(element6, [2]),0,1);\n          block(env, morph0, context, \"unless\", [get(env, context, \"json\")], {}, child0, null);\n          block(env, morph1, context, \"each\", [get(env, context, \"view.edges\")], {\"keyword\": \"edge\"}, child1, null);\n          block(env, morph2, context, \"each\", [get(env, context, \"view.verticesGroups\")], {\"keyword\": \"group\"}, child2, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"visual-explain\");\n        dom.setAttribute(el1,\"class\",\"index-overlay\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"panel-widget\", [], {\"headingTranslation\": \"titles.query.visualExplain\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/templates/visualization-ui', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"alert alert-danger\");\n            dom.setAttribute(el1,\"role\",\"alert\");\n            var el2 = dom.createElement(\"strong\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1, 0]),-1,-1);\n            content(env, morph0, context, \"error\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createTextNode(\"\\n\");\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"max-rows\");\n              var el2 = dom.createTextNode(\"\\n          \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"label\");\n              var el3 = dom.createTextNode(\"Maximum Row Count: \");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\" \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n          \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"button\");\n              var el3 = dom.createTextNode(\"OK\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline, element = hooks.element, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              if (this.cachedFragment) { dom.repairClonedNode(fragment,[3]); }\n              var element0 = dom.childAt(fragment, [1]);\n              var element1 = dom.childAt(element0, [4]);\n              var morph0 = dom.createMorphAt(element0,2,3);\n              var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n              inline(env, morph0, context, \"input\", [], {\"value\": get(env, context, \"selectedRowCount\"), \"placeholder\": get(env, context, \"selectedRowCount\")});\n              element(env, element1, context, \"action\", [\"changeRowCount\"], {});\n              block(env, morph1, context, \"visualization-tabs-widget\", [], {\"tabs\": get(env, context, \"visualizationTabs\")}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"alert alert-danger\");\n              dom.setAttribute(el1,\"role\",\"alert\");\n              var el2 = dom.createElement(\"strong\");\n              var el3 = dom.createTextNode(\"An unknown error occurred! Please try again later.\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            block(env, morph0, context, \"if\", [get(env, context, \"polestarUrl\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          block(env, morph0, context, \"if\", [get(env, context, \"error\")], {}, child0, child1);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"id\",\"visualization\");\n        dom.setAttribute(el1,\"class\",\"index-overlay\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,-1);\n        block(env, morph0, context, \"panel-widget\", [], {\"headingTranslation\": \"titles.query.visualization\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('hive/tests/blanket-options', function () {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /*globals blanket, module */\n\n  var options = {\n    modulePrefix: \"hive\",\n    filter: \"//.*hive/.*/\",\n    antifilter: \"//.*(tests|template).*/\",\n    loaderExclusions: ['ember-cli-jquery-ui', 'hive/config/environment'],\n    enableCoverage: true,\n    cliOptions: {\n      reporters: ['json']\n    }\n  };\n\n  if (typeof exports === 'undefined') {\n    blanket.options(options);\n  } else {\n    module.exports = options;\n  }\n\n});","define('hive/tests/helpers/api-mock', ['exports', 'hive/adapters/database'], function (exports, applicationAdapter) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = function() {\n    var baseUrl = applicationAdapter['default'].create().buildURL();\n    var databases = ['db1', 'db2', 'db3'];\n\n    this.get(baseUrl + '/resources/ddl/database', function (req) {\n      var db = {\n        databases: databases\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(db)];\n    });\n\n    this.get(baseUrl + '/resources/ddl/database/db1/table.page', function (req) {\n      var tables = {\n        rows: [\n          ['table1'],\n          ['table2'],\n          ['table3']\n        ]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(tables)];\n    });\n\n    this.get(baseUrl + '/resources/ddl/database/db1/table', function (req) {\n      var tables = {\n        tables: [\n          ['table1'],\n          ['table2'],\n          ['table3']\n        ],\n        database: 'db1'\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(tables)];\n    });\n\n    this.get(baseUrl + '/resources/ddl/database/db1/table/table1.page', function (req) {\n      var columns = {\n        rows: [\n          ['column1', 'STRING'],\n          ['column2', 'STRING'],\n          ['column3', 'STRING']\n        ]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(columns)];\n    });\n\n    this.get(baseUrl + '/udfs', function (req) {\n      var udf = {\n        \"udfs\": [{\n          \"name\": \"TestColumn\",\n          \"classname\": \"TestClassName\",\n          \"fileResource\": 1,\n          \"id\": 1,\n          \"owner\": \"owner1\"\n        },\n        {\n          \"name\": \"Test2Columns\",\n          \"classname\": \"Test2ClassName\",\n          \"fileResource\": 1,\n          \"id\": 2,\n          \"owner\": \"owner2\"\n        }]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(udf)];\n    });\n\n    this.post(baseUrl + '/jobs', function (req) {\n      var job = {\n        \"job\": {\n          \"status\":\"Finished\",\n          \"dataBase\":\"db1\",\n          \"dateSubmitted\":1421677418,\n          \"logFile\":\"job1/logs\",\n          \"properties\":{},\n          \"fileResources\":[],\n          \"statusDir\":\"job1\",\n          \"id\":1,\n          \"title\":\"Worksheet\",\n          \"duration\":2,\n          \"forcedContent\":\"\",\n          \"owner\":\"admin\",\n          \"confFile\":\"job1/conf\",\n          \"queryId\":null,\n          \"queryFile\":\"job1.hql\"\n        }\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(job)];\n    });\n\n    this.get(baseUrl + '/resources/file/job1.hql', function (req) {\n      var file = {\n        \"file\": {\n          \"filePath\": \"job1.hql\",\n          \"fileContent\": \"select * from big\",\n          \"hasNext\": false,\n          \"page\": 0,\n          \"pageCount\": 1\n        }\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(file)];\n    });\n\n    this.get(baseUrl + '/savedQueries', function(req) {\n      var savedQueries = {\n        \"savedQueries\": [{\n          \"queryFile\": \"saved1.hql\",\n          \"dataBase\": \"db1\",\n          \"title\": \"saved1\",\n          \"shortQuery\": \"\",\n          \"id\": 1,\n          \"owner\": \"owner1\"\n        }, {\n          \"queryFile\": \"saved2.hql\",\n          \"dataBase\": \"db2\",\n          \"title\": \"saved2\",\n          \"shortQuery\": \"select count(field_0) from big;\",\n          \"id\": 2,\n          \"owner\": \"owner2\"\n        }]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(savedQueries)];\n    });\n\n    this.get(baseUrl + '/savedQueries/defaultSettings', function (req) {\n      var defaultSettings = {\n        \"defaultSettings\" : []\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(defaultSettings)];\n    });\n\n    this.get(baseUrl + '/resources/file/saved1.hql', function (req) {\n      var file = {\n        \"file\": {\n          \"filePath\": \"saved1.hql\",\n          \"fileContent\": \"select * from saved1\",\n          \"hasNext\": false,\n          \"page\": 0,\n          \"pageCount\": 0\n        }\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(file)];\n    });\n\n    this.get(baseUrl + '/jobs', function (req) {\n      var jobs = {\n        \"jobs\": [\n          {\n            \"title\": \"Query1\",\n            \"queryFile\": \"saved1.hql\",\n            \"statusDir\": \"statusdir\",\n            \"dateSubmitted\": 1421240048,\n            \"duration\": 97199,\n            \"status\": \"Finished\",\n            \"forcedContent\": \"\",\n            \"id\": 1,\n            \"owner\": \"admin\",\n            \"logFile\": \"logs1\",\n            \"confFile\": \"conf1\"\n          },\n          {\n            \"title\": \"Query2\",\n            \"queryFile\": \"saved1.hql\",\n            \"statusDir\": \"statusdir\",\n            \"dateSubmitted\": 1421240048,\n            \"duration\": 97199,\n            \"status\": \"Finished\",\n            \"forcedContent\": \"\",\n            \"id\": 2,\n            \"owner\": \"admin\",\n            \"logFile\": \"logs2\",\n            \"confFile\": \"conf2\"\n          },\n          {\n            \"title\": \"Query3\",\n            \"queryFile\": \"saved1.hql\",\n            \"statusDir\": \"statusdir\",\n            \"dateSubmitted\": 1421240048,\n            \"duration\": 97199,\n            \"status\": \"Running\",\n            \"forcedContent\": \"\",\n            \"id\": 3,\n            \"owner\": \"admin\",\n            \"logFile\": \"logs3\",\n            \"confFile\": \"conf3\"\n          },\n          {\n            \"title\": \"Query4\",\n            \"queryFile\": \"saved1.hql\",\n            \"statusDir\": \"statusdir\",\n            \"dateSubmitted\": 1421240048,\n            \"duration\": 97199,\n            \"status\": \"Error\",\n            \"forcedContent\": \"\",\n            \"id\": 4,\n            \"owner\": \"admin\",\n            \"logFile\": \"logs4\",\n            \"confFile\": \"con51\"\n          }\n        ]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(jobs)];\n    });\n\n    this.get(baseUrl + '/fileResources', function (req) {\n      var files = {\n        \"fileResources\": [\n          {\n            \"name\": \"TestName\",\n            \"path\": \"TestPath\",\n            \"id\": 1,\n            \"owner\": \"owner1\"\n          }\n        ]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(files)];\n    });\n\n    this.get(baseUrl + '/fileResources/1', function (req) {\n      var files = {\n        \"fileResources\": [\n          {\n            \"name\": \"TestName\",\n            \"path\": \"TestPath\",\n            \"id\": 1,\n            \"owner\": \"owner1\"\n          }\n        ]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(files)];\n    });\n\n    this.get(baseUrl + '/api/v1/views/TEZ', function (req) {\n      var data = {\n        versions: [\n          {\n            href: baseUrl + '/api/v1/view/TEZ/instanceURL'\n          }\n        ]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(data)];\n    });\n\n    this.get(baseUrl + '/api/v1/views/TEZ/instanceURL', function (req) {\n      var data = {\n        instances: [\n          {\n            ViewInstanceInfo: {\n              instance_name: 'tez',\n              version: 1\n            }\n          }\n        ]\n      };\n\n      return [200, {\"Content-Type\": \"application/json\"}, JSON.stringify(data)];\n    });\n  }\n\n});","define('hive/tests/helpers/resolver', ['exports', 'ember/resolver', 'hive/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('hive/tests/helpers/start-app', ['exports', 'ember', 'hive/app', 'hive/router', 'hive/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  function startApp(attrs) {\n    var App;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Router['default'].reopen({\n      location: 'none'\n    });\n\n    Ember['default'].run(function() {\n      App = Application['default'].create(attributes);\n      App.setupForTesting();\n      App.injectTestHelpers();\n    });\n\n    // App.reset(); // this shouldn't be needed, i want to be able to \"start an app at a specific URL\"\n\n    return App;\n  }\n  exports['default'] = startApp;\n\n});","define('hive/tests/integration/database-test', ['ember', 'ember-qunit', 'hive/tests/helpers/start-app', 'hive/tests/helpers/api-mock'], function (Ember, ember_qunit, startApp, api) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var App;\n  var server;\n\n  module('Integration: Databases', {\n    setup: function() {\n      App = startApp['default']();\n      /* global Pretender: true */\n      server = new Pretender(api['default']);\n    },\n    teardown: function() {\n      Ember['default'].run(App, App.destroy);\n      server.shutdown();\n    }\n  });\n\n  ember_qunit.test('Database Explorer is displayed and populated with databases from server.', function (assert) {\n    assert.expect(2);\n\n    visit('/');\n\n    andThen(function() {\n      equal(find('.database-explorer').length, 1, 'Databases panel is visible.');\n      equal(find('.database-explorer .databases').children().length, 3, 'Databases are listed.');\n    });\n  });\n\n  ember_qunit.test('Expanding a database will retrieve the first page of tables for that database.', function () {\n    expect(1);\n\n    visit('/');\n\n    andThen(function () {\n      var targetDB = find('.fa-database').first();\n\n      click(targetDB);\n\n      andThen(function () {\n        equal(find('.fa-table').length, 3);\n      });\n    });\n  });\n\n  ember_qunit.test('Expanding a table will retrieve the first page of columns for that table.', function () {\n    expect(2);\n\n    visit('/');\n\n    andThen(function () {\n      var targetDB = find('.fa-database').first();\n\n      click(targetDB);\n\n      andThen(function () {\n        var targetTable = find('.fa-table').first();\n\n        click(targetTable);\n\n        andThen(function () {\n          equal(find('.columns').length, 1, 'Columns container was loaded.');\n          equal(find('.columns strong').length, 3, '3 columns were loaded for selected table.');\n        });\n      });\n    });\n  });\n\n  ember_qunit.test('Searching for a table will display table results and column search field', function () {\n    expect(2);\n\n    visit('/');\n\n    andThen(function () {\n      fillIn(find('input').first(), 'table');\n      keyEvent(find('input').first(), 'keyup', 13);\n\n      andThen(function () {\n        equal(find('input').length, 2, 'Columns search input has been rendered.');\n        equal(find('.nav-tabs li').length, 2, 'Results tab has been redendered.');\n      });\n    });\n  });\n\n});","define('hive/tests/integration/history-test', ['ember', 'ember-qunit', 'hive/tests/helpers/start-app', 'hive/tests/helpers/api-mock'], function (Ember, ember_qunit, startApp, api) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var App;\n  var server;\n\n  module('Integration: History', {\n    setup: function() {\n      App = startApp['default']();\n      /* global Pretender: true */\n      server = new Pretender(api['default']);\n    },\n\n    teardown: function() {\n      Ember['default'].run(App, App.destroy);\n      server.shutdown();\n    }\n  });\n\n  ember_qunit.test('Save Queries should list saved queries', function() {\n    expect(1);\n\n    visit(\"/history\");\n\n    andThen(function() {\n      equal(find('#content .table tbody tr').length, 4);\n    });\n  });\n\n  ember_qunit.test('User should be able to filter the jobs', function() {\n    expect(4);\n\n    visit(\"/history\");\n\n    fillIn('column-filter input[placeholder=title]', \"Query1\");\n    keyEvent('column-filter input[placeholder=title]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 1, 'User is able to filter by title');\n    });\n\n    click('.clear-filters');\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 4);\n    });\n\n\n    fillIn('column-filter input[placeholder=status]', \"Finished\");\n    keyEvent('column-filter input[placeholder=status]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 2, 'User is able to filter by status');\n    });\n\n    click('.clear-filters');\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 4);\n    });\n  });\n\n  ember_qunit.test('A query item should expand to show the HQL', function() {\n    expect(3);\n    visit(\"/history\");\n\n    andThen(function() {\n      equal(find('.table-expandable tbody .secondary-row').length, 0, 'All queries are collapsed');\n    });\n\n    click('.table-expandable tbody tr:first-child');\n\n    andThen(function() {\n      equal(find('.table-expandable tbody .secondary-row').length, 1, 'One query is expanded');\n      ok(find('.table-expandable tbody tr:first-child').next().hasClass('secondary-row'), 'Clicked query is expanded');\n    });\n  });\n\n});","define('hive/tests/integration/query-editor-test', ['ember', 'ember-qunit', 'hive/tests/helpers/start-app', 'hive/tests/helpers/api-mock'], function (Ember, ember_qunit, startApp, api) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var App;\n  var server;\n\n  module('Integration: Query Editor', {\n    setup: function() {\n      App = startApp['default']();\n      /* global Pretender: true */\n      server = new Pretender(api['default']);\n    },\n\n    teardown: function() {\n      Ember['default'].run(App, App.destroy);\n      server.shutdown();\n    }\n  });\n\n  ember_qunit.test('Query Editor is visible', function() {\n    expect(1);\n\n    visit(\"/\");\n\n    andThen(function() {\n      equal(find('.query-editor-panel').length, 1, 'Query Editor is visible');\n    });\n  });\n\n  ember_qunit.test('Can execute query either with full or partial selection', function() {\n    expect(3);\n\n    var query1 = \"select count(*) from table1;\",\n        query2 = \"select color from z;\",\n        query3 = \"select fruit from z;\",\n        query4 = query2 + \"\\n\" + query3,\n        editor;\n\n    visit(\"/\");\n\n    Ember['default'].run(function() {\n      editor = find('.CodeMirror').get(0).CodeMirror;\n      editor.setValue(query1);\n    });\n\n    click('.execute-query');\n\n    andThen(function() {\n      equal(find('.query-process-results-panel').length, 1, 'Job tabs are visible.');\n    });\n\n    Ember['default'].run(function() {\n      editor.setValue(query4);\n      editor.setSelection({ line: 1, ch: 0 }, { line: 1, ch: 20 });\n    });\n\n    click('.execute-query');\n\n    andThen(function() {\n      equal(editor.getValue(), query4, 'Editor value didn\\'t change');\n      equal(editor.getSelection(), query3, 'Query 3 is selected');\n    });\n  });\n\n\n  ember_qunit.test('Can save query', function() {\n    expect(2);\n\n    visit(\"/\");\n\n    andThen(function() {\n      equal(find('.modal-dialog').length, 0, 'Modal dialog is hidden');\n    });\n\n    Ember['default'].run(function() {\n      find('.CodeMirror').get(0).CodeMirror.setValue('select count(*) from table1');\n    });\n\n    click('.save-query-as');\n\n    andThen(function() {\n      equal(find('.modal-dialog').length, 1, 'Modal dialog is shown');\n    });\n\n    click('.modal-footer .btn-danger');\n  });\n\n});","define('hive/tests/integration/saved-queries-test', ['ember', 'ember-qunit', 'hive/tests/helpers/start-app', 'hive/tests/helpers/api-mock'], function (Ember, ember_qunit, startApp, api) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var App;\n  var server;\n\n  module('Integration: Saved Queries', {\n    setup: function() {\n      App = startApp['default']();\n      /* global Pretender: true */\n      server = new Pretender(api['default']);\n    },\n\n    teardown: function() {\n      Ember['default'].run(App, App.destroy);\n      server.shutdown();\n    }\n  });\n\n  ember_qunit.test('Save Queries should list saved queries', function() {\n    expect(1);\n\n    visit(\"/queries\");\n\n\n    andThen(function() {\n      equal(find('#content .table tbody tr').length, 2);\n    });\n  });\n\n  ember_qunit.test('User should be able to filter the queries', function() {\n    expect(8);\n\n    visit(\"/queries\");\n\n    fillIn('column-filter input[placeholder=preview]', \"select count\");\n    keyEvent('column-filter input[placeholder=preview]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 1, 'User is able to filter by short query form.');\n    });\n\n    click('.clear-filters');\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 2);\n    });\n\n    fillIn('column-filter input[placeholder=title]', \"saved1\");\n    keyEvent('column-filter input[placeholder=title]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 1, 'User is able to filter by title');\n    });\n\n    click('.clear-filters');\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 2);\n    });\n\n    fillIn('column-filter input[placeholder=database]', \"db1\");\n    keyEvent('column-filter input[placeholder=database]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 1, 'User is able to filter by database');\n    });\n\n    click('.clear-filters');\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 2);\n    });\n\n    fillIn('column-filter input[placeholder=owner]', \"owner1\");\n    keyEvent('column-filter input[placeholder=owner]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 1, 'User is able to filter by owner');\n    });\n\n    click('.clear-filters');\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 2);\n    });\n  });\n\n  ember_qunit.test('User is able to load a query from saved queries', function() {\n    expect(1);\n\n    visit(\"/queries\");\n    click('#content .table tbody tr:first-child td:first-child a');\n\n    andThen(function() {\n      equal(currentURL(), \"/queries/1\", 'User is redirected');\n    });\n  });\n\n  ember_qunit.test('Saved Query options menu', function() {\n    expect(2);\n\n    visit(\"/queries\");\n    click('.fa-gear');\n\n    andThen(function() {\n      equal(find('.dropdown-menu:visible').length, 1, 'Query menu is visible');\n      equal(find('.dropdown-menu:visible li').length, 2, 'Query menu has 2 options');\n    });\n  });\n\n});","define('hive/tests/integration/tez-ui-test', ['ember', 'ember-qunit', 'hive/tests/helpers/start-app', 'hive/tests/helpers/api-mock'], function (Ember, ember_qunit, startApp, api) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var App;\n  var server;\n\n  module('Integration: Tez UI', {\n    setup: function() {\n      App = startApp['default']();\n      /* global Pretender: true */\n      server = new Pretender(api['default']);\n    },\n\n    teardown: function() {\n      Ember['default'].run(App, App.destroy);\n      server.shutdown();\n    }\n  });\n\n  ember_qunit.test('An error is show when there is no dag', function() {\n    expect(1);\n\n    visit(\"/\");\n    click('#tez-icon');\n\n    andThen(function() {\n      ok(find('.panel .alert .alert-danger'), 'Error is visible');\n    });\n  });\n\n});","define('hive/tests/integration/udfs-test', ['ember', 'ember-qunit', 'hive/tests/helpers/start-app', 'hive/tests/helpers/api-mock'], function (Ember, ember_qunit, startApp, api) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var App;\n  var server;\n\n  module('Integration: Udfs', {\n    setup: function() {\n      App = startApp['default']();\n      /* global Pretender: true */\n      server = new Pretender(api['default']);\n    },\n\n    teardown: function() {\n      Ember['default'].run(App, App.destroy);\n      server.shutdown();\n    }\n  });\n\n  ember_qunit.test('Save Queries should list saved queries', function() {\n    expect(1);\n\n    visit(\"/udfs\");\n\n    andThen(function() {\n      equal(find('#content .table tbody tr').length, 2);\n    });\n  });\n\n  ember_qunit.test('User should be able to filter the udfs', function() {\n    expect(4);\n\n    visit(\"/udfs\");\n\n    fillIn('column-filter input[placeholder=\"udf name\"]', \"TestColumn\");\n    keyEvent('column-filter input[placeholder=\"udf name\"]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 1, 'User is able to filter by name');\n    });\n\n    click('.clear-filters');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 2);\n    });\n\n    fillIn('column-filter input[placeholder=\"udf class name\"]', \"TestClassName\");\n    keyEvent('column-filter input[placeholder=\"udf class name\"]', 'keyup');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 1, 'User is able to filter by class name');\n    });\n\n    click('.clear-filters');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr:visible').length, 2);\n    });\n  });\n\n  ember_qunit.test('User is able to add udf', function() {\n    expect(1);\n\n    visit(\"/udfs\");\n    click('.add-udf');\n\n    andThen(function() {\n      equal(find('#content .table tbody tr').length, 3);\n    });\n  });\n\n});","define('hive/tests/test-helper', ['hive/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.setResolver(resolver['default']);\n\n});","define('hive/tests/unit/adapters/application', ['ember-qunit', 'hive/utils/constants'], function (ember_qunit, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('adapter:application', 'ApplicationAdapter', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('X-Requested-By header is set.', function() {\n    expect(1);\n\n    var adapter = this.subject();\n\n    ok(adapter.get('headers.X-Requested-By'), 'X-Requested-By is set to a truthy value.');\n  });\n\n  ember_qunit.test('buildUrl returns an url with default values for version and instance paramters if not running within an Ambari instance.', function () {\n    expect(1);\n\n    var adapter = this.subject();\n\n    var url = adapter.buildURL();\n\n    equal(url, constants['default'].adapter.apiPrefix + constants['default'].adapter.version + constants['default'].adapter.instancePrefix + 'Hive');\n  });\n\n});","define('hive/tests/unit/adapters/file', ['ember-qunit', 'hive/utils/constants'], function (ember_qunit, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('adapter:file', 'FileAdapter', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  ember_qunit.test('pathForType returns correct path.', function() {\n    expect(1);\n\n    var adapter = this.subject();\n    var type = 'dummy';\n\n    equal(adapter.pathForType(type), constants['default'].adapter.resourcePrefix + type);\n  });\n\n});","define('hive/tests/unit/components/alert-message-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('alert-message-widget', 'AlertMessageWidgetComponent', {\n    needs: []\n  });\n\n  ember_qunit.test('isExpanded is toggled on click', function() {\n    expect(2);\n\n    var message = Ember['default'].Object.create({ isExpanded: false});\n\n    var component = this.subject({\n      message: message\n    });\n\n    Ember['default'].run(function() {\n      component.send('toggleMessage');\n    });\n\n    equal(component.get('message.isExpanded'), true, 'isExpanded is set to true');\n\n    Ember['default'].run(function() {\n      component.send('toggleMessage');\n    });\n\n    equal(component.get('message.isExpanded'), false, 'isExpanded is set to false');\n  });\n\n  ember_qunit.test('removeLater should be called when the message is toggled', function() {\n    expect(1);\n\n    var message = Ember['default'].Object.create({ isExpanded: false});\n\n    var targetObject = {\n      removeLater: function() {\n        ok(true, 'External removeLater called');\n      }\n    };\n\n    var component = this.subject({\n      targetObject: targetObject,\n      removeLater: 'removeLater',\n      message: message\n    });\n\n    Ember['default'].run(function() {\n      component.send('toggleMessage');\n    });\n\n    Ember['default'].run(function() {\n      component.send('toggleMessage');\n    });\n  });\n\n  ember_qunit.test('remove action should call external removeMessage', function() {\n    expect(1);\n\n    var targetObject = {\n      removeMessage: function() {\n        ok(true, 'External removeMessage called');\n      }\n    };\n\n    var component = this.subject({\n      targetObject: targetObject,\n      removeMessage: 'removeMessage'\n    });\n\n    Ember['default'].run(function() {\n      component.send('remove', {});\n    });\n  });\n\n});","define('hive/tests/unit/components/collapsible-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  ember_qunit.moduleForComponent('collapsible-widget', 'CollapsibleWidgetComponent', {\n    unit: true\n  });\n\n  ember_qunit.test('Component expand/collapse toggle action', function () {\n    expect(1);\n\n    var targetObject = {\n      expanded: function() {\n        ok(true, 'External expanded called');\n      }\n    };\n\n    var component = this.subject({\n      targetObject: targetObject,\n      isExpanded: 'isExpanded',\n      expanded: 'expanded'\n    });\n\n    var $component = this.render();\n\n    Ember['default'].run(function() {\n      component.set('isExpanded', false);\n      component.send('toggle', {});\n     });\n  });\n\n});","define('hive/tests/unit/components/column-filter-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('column-filter-widget', 'ColumnFilterWidgetComponent', {\n    needs: ['component:extended-input']\n  });\n\n  ember_qunit.test('if a filterValue is set when the element is inserted, an action is being sent announcing a filter change', function () {\n    expect(1);\n\n    var column = Ember['default'].Object.create({\n      caption: 'missing.translation'\n    });\n\n    var component = this.subject({ column: column });\n\n    Ember['default'].run(function () {\n      component.set('filterValue', 'initial filter value');\n    });\n\n    var targetObject = {\n      externalAction: function(){\n        ok(true, 'initial filterValue set. Action has been sent.');\n      }\n    };\n\n    component.set('columnFiltered', 'externalAction');\n    component.set('targetObject', targetObject);\n\n    var $component = this.$();\n  });\n\n  ember_qunit.test('isSorted returns true if the table is sorted by this column property', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var column = Ember['default'].Object.create({\n      property: 'some prop'\n    });\n\n    Ember['default'].run(function () {\n      component.set('column', column);\n      component.set('sortProperties', [column.property]);\n    });\n\n    ok(component.get('isSorted'));\n  });\n\n  ember_qunit.test('isSorted returns false if the table is sorted by some other column', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var column = Ember['default'].Object.create({\n      property: 'some prop'\n    });\n\n    Ember['default'].run(function () {\n      component.set('column', column);\n      component.set('sortProperties', ['other prop']);\n    });\n\n    ok(!component.get('isSorted'));\n  });\n\n  ember_qunit.test('isSorted returns false if the table is not sorted by any column', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var column = Ember['default'].Object.create({\n      property: 'some prop'\n    });\n\n    Ember['default'].run(function () {\n      component.set('column', column);\n      component.set('sortProperties', []);\n    });\n\n    ok(!component.get('isSorted'));\n  });\n\n  ember_qunit.test('when sendSort gets called, the columnSorted action gets sent.', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var targetObject = {\n      externalAction: function(){\n        ok(true, 'columnSorted action has been intercepted.');\n      }\n    };\n\n    Ember['default'].run(function () {\n      component.set('targetObject', targetObject);\n      component.set('columnSorted', 'externalAction');\n\n      component.send('sendSort');\n    });\n  });\n\n  ember_qunit.test('when sendFilter gets called, the columnFiltered action gets sent.', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var targetObject = {\n      externalAction: function(){\n        ok(true, 'columnFiltered action has been intercepted.');\n      }\n    };\n\n    Ember['default'].run(function () {\n      component.set('targetObject', targetObject);\n      component.set('columnFiltered', 'externalAction');\n\n      component.send('sendFilter');\n    });\n  });\n\n});","define('hive/tests/unit/components/date-range-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /* global moment */\n\n  ember_qunit.moduleForComponent('date-range-widget', 'DateRangeWidgetComponent', {\n    needs: ['component:extended-input']\n  });\n\n  ember_qunit.test('Date fields are set correctly', function() {\n    expect(2);\n\n    var component = this.subject();\n\n    var min = moment('04/11/2014', 'DD/MM/YYYY');\n    var max = moment('04/12/2014', 'DD/MM/YYYY');\n    var from = moment('04/11/2014', 'DD/MM/YYYY');\n    var to = moment('04/12/2014', 'DD/MM/YYYY');\n\n    var dateRange = Ember['default'].Object.create({\n      from: from.toString(),\n      to: to.toString(),\n      min: min.toString(),\n      max: max.toString()\n    });\n\n    component.set('dateRange', Ember['default'].Object.create());\n\n    var $component = this.$();\n\n    Ember['default'].run(function() {\n      component.set('dateRange', dateRange);\n    });\n\n    equal($component.find('.fromDate').val(), moment(from).format('MM/DD/YYYY'), \"From date is set correctly\");\n    equal($component.find('.toDate').val(), moment(to).format('MM/DD/YYYY'), \"To date is set correctly\");\n  });\n\n  ember_qunit.test('Date fields updates when the date is changed', function() {\n    expect(2);\n\n    var component = this.subject();\n\n    var min = moment('04/11/2014', 'DD/MM/YYYY');\n    var max = moment('04/12/2014', 'DD/MM/YYYY');\n    var from = moment('04/11/2014', 'DD/MM/YYYY');\n    var to = moment('04/12/2014', 'DD/MM/YYYY');\n\n    var dateRange = Ember['default'].Object.create({\n      from: from.toString(),\n      to: to.toString(),\n      min: min.toString(),\n      max: max.toString()\n    });\n\n    Ember['default'].run(function() {\n      component.set('dateRange', dateRange);\n    });\n\n    var $component = this.$();\n    $component.find('.fromDate').datepicker('setDate', '10/10/2014');\n    $component.find('.toDate').datepicker('setDate', '11/11/2014');\n\n    equal($component.find('.fromDate').val(), '10/10/2014', \"From date field is updated\");\n    equal($component.find('.toDate').val(), '11/11/2014', \"To date field is updated\");\n  });\n\n  ember_qunit.test('Display dates are formatted correctly', function(){\n    expect(2);\n\n    var component = this.subject();\n\n    var min = moment('04/11/2014', 'DD/MM/YYYY');\n    var max = moment('04/12/2014', 'DD/MM/YYYY');\n    var from = moment('04/11/2014', 'DD/MM/YYYY');\n    var to = moment('04/12/2014', 'DD/MM/YYYY');\n\n    var dateRange = Ember['default'].Object.create({\n      from: from.toString(),\n      to: to.toString(),\n      min: min.toString(),\n      max: max.toString()\n    });\n\n    Ember['default'].run(function () {\n      component.set('dateRange', dateRange);\n    });\n\n    equal(component.get('displayFromDate'), '11/04/2014', \"displayFromDate is formatted correctly\");\n    equal(component.get('displayToDate'), '12/04/2014', \"displayToDate is formatted correctly\");\n  });\n\n  ember_qunit.test('If from/to are not passed they are set to min/max', function() {\n    expect(2);\n\n    var component = this.subject();\n\n    var min = moment('04/11/2014', 'DD/MM/YYYY');\n    var max = moment('04/12/2014', 'DD/MM/YYYY');\n\n    var dateRange = Ember['default'].Object.create({\n      min: min.toString(),\n      max: max.toString()\n    });\n\n    Ember['default'].run(function () {\n      component.set('dateRange', dateRange);\n    });\n\n    var $component = this.$();\n\n    equal(component.get('dateRange.from'), min.toString(), \"From date is to min date\");\n    equal(component.get('dateRange.to'), max.toString(), \"To date is set to max date\");\n  });\n\n});","define('hive/tests/unit/components/expander-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('expander-widget', 'ExpanderWidgetComponent', {\n    unit: true\n  });\n\n  ember_qunit.test('should set the heading when provided.', function () {\n    expect(2);\n\n    var component = this.subject();\n    var $component = this.$();\n    var heading = 'some header';\n\n    equal($component.find('.accordion-toggle').text(), '');\n\n    Ember['default'].run(function () {\n      component.set('heading', heading);\n    });\n\n    equal($component.find('.accordion-toggle').text(), heading);\n  });\n\n  ember_qunit.test('should correctly toggle isExpanded property.', function () {\n    expect(2);\n\n    var component = this.subject();\n    this.$();\n\n    Ember['default'].run(function(){\n      component.send('toggle');\n    });\n\n    equal(component.get('isExpanded'), true);\n\n    Ember['default'].run(function(){\n      component.send('toggle');\n    });\n\n    equal(component.get('isExpanded'), false);\n  });\n\n});","define('hive/tests/unit/components/extended-input-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('extended-input', 'ExtendedInputComponent', {\n    unit: true\n  });\n\n  ember_qunit.test('Component has dynamicValue and dynamicContext', function () {\n    expect(1);\n\n    var component = this.subject({\n      dynamicValue: 'dynamicValue',\n      dynamicContext: Ember['default'].Object.create({ 'dynamicValue' : 'test' })\n    });\n\n    var $component = this.$();\n\n    equal(component.get('value'), 'test', 'Value is set to dynamicValue value');\n  });\n\n\n  ember_qunit.test('Component has no dynamicValue and dynamicContext', function () {\n    expect(1);\n\n    var component = this.subject();\n    var $component = this.$();\n\n    ok(!component.get('value'), 'Value is not set as dynamicValue value');\n  });\n\n  ember_qunit.test(\"Component's dynamicValue is set\", function () {\n    expect(1);\n\n    var component = this.subject({\n      dynamicValue: 'dynamicValue',\n      dynamicContext: Ember['default'].Object.create({ 'dynamicValue' : 'test' })\n    });\n\n    var $component = this.$();\n\n    Ember['default'].run(function() {\n      component.sendValueChanged();\n\n      equal(component.get('value'), component.dynamicContext.get('dynamicValue'), \"Value is set and dynamicValue is set\");\n    });\n  });\n\n  ember_qunit.test(\"Component's dynamicValue is not set\", function () {\n    expect(1);\n\n    var component = this.subject({\n      dynamicValue: 'dynamicValue',\n      dynamicContext: Ember['default'].Object.create({ })\n    });\n\n    var $component = this.$();\n\n    Ember['default'].run(function() {\n      component.sendValueChanged();\n\n      equal(component.get('value'), undefined, \"Value is not set\");\n    });\n  });\n\n});","define('hive/tests/unit/components/job-tr-view-test', ['ember', 'hive/utils/constants', 'ember-qunit'], function (Ember, constants, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('job-tr-view', 'JobTrViewComponent', {\n    unit: true\n  });\n\n  ember_qunit.test('Statuses are computed correctly', function (assert) {\n    assert.expect(5);\n\n    var component = this.subject();\n\n    Ember['default'].run(function() {\n      component.set('job', Ember['default'].Object.create());\n      component.set('job.status', constants['default'].statuses.running);\n    });\n\n    assert.equal(component.get('canStop'), true, 'Status is running canStop returns true');\n\n    Ember['default'].run(function() {\n      component.set('job.status', constants['default'].statuses.initialized);\n    });\n\n    assert.equal(component.get('canStop'), true, 'Status is initialized canStop returns true');\n\n    Ember['default'].run(function() {\n      component.set('job.status', constants['default'].statuses.pending);\n    });\n\n    assert.equal(component.get('canStop'), true, 'Status is pending canStop returns true');\n\n    Ember['default'].run(function() {\n      component.set('job.status', constants['default'].statuses.canceled);\n    });\n\n    assert.equal(component.get('canStop'), false, 'Status is canceled canStop returns false');\n\n    Ember['default'].run(function() {\n      component.set('job.status', constants['default'].statuses.unknown);\n    });\n\n    assert.equal(component.get('canStop'), false, 'Status is unknown canStop returns false');\n  });\n\n});","define('hive/tests/unit/components/modal-widget-test', ['ember', 'hive/utils/constants', 'ember-qunit'], function (Ember, constants, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('modal-widget', 'ModalWidgetComponent', {\n    needs: ['helper:tb-helper']\n  });\n\n  ember_qunit.test('It send ok action on keyPress enter', function(assert) {\n    assert.expect(1);\n\n    Ember['default'].run.debounce = function(target, func) {\n      func.call(target);\n    };\n\n    var component = this.subject({\n      ok: 'ok',\n      targetObject: {\n        ok: function() {\n          assert.ok(1, 'OK action sent');\n        }\n      }\n    });\n\n    var $component = this.$();\n\n    component.keyPress({ which: 13 });\n    Ember['default'].$('.modal-backdrop').remove(); // remove overlay\n  });\n\n  ember_qunit.test('It send close action on keyPress escape', function(assert) {\n    assert.expect(1);\n\n    Ember['default'].run.debounce = function(target, func) {\n      func.call(target);\n    };\n\n    var component = this.subject({\n      close: 'close',\n      targetObject: {\n        close: function() {\n          assert.ok(1, 'Close action sent');\n        }\n      }\n    });\n\n    var $component = this.$();\n\n    component.keyPress({ which: 27 });\n    Ember['default'].$('.modal-backdrop').remove(); // remove overlay\n  });\n\n});","define('hive/tests/unit/components/no-bubbling-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('no-bubbling', 'NoBubblingWidgetComponent', {\n    unit: true\n  });\n\n\n  ember_qunit.test('External actions', function() {\n    expect(2);\n\n    var component = this.subject({\n      targetObject: {\n        click: function(data) {\n          ok(true, 'External click action called');\n          equal(data, 'data', 'Data is sent with the action');\n        }\n      },\n      click: 'click',\n      data: 'data'\n    });\n\n    var $component = this.$();\n\n    $component.trigger('click');\n  });\n\n});","define('hive/tests/unit/components/number-range-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /* global moment */\n\n  ember_qunit.moduleForComponent('number-range-widget', 'NumberRangeWidgetComponent', {\n    needs: ['component:extended-input']\n  });\n\n\n  ember_qunit.test('Component is initialized correctly', function() {\n    expect(2);\n\n    var numberRange = Ember['default'].Object.create({\n      max: 1,\n      min: 0\n    });\n\n    var component = this.subject({ numberRange: numberRange });\n    var $component = this.$();\n\n    equal(component.get('numberRange.from'), numberRange.get('min'), 'from is set to min');\n    equal(component.get('numberRange.to'), numberRange.get('max'), 'to is set to max');\n\n  });\n\n  ember_qunit.test('external change action is called', function() {\n    expect(1);\n\n    var targetObject = {\n      rangeChanged: function() {\n        ok(true, 'rangeChanged external action called');\n      }\n    };\n\n    var numberRange = Ember['default'].Object.create({\n      max: 1,\n      min: 0\n    });\n\n    var component = this.subject({\n      numberRange: numberRange,\n      targetObject: targetObject,\n      rangeChanged: 'rangeChanged'\n    });\n\n    var $component = this.$();\n\n    Ember['default'].run(function() {\n      $component.find('.slider').slider('value', 1);\n    });\n  });\n\n});","define('hive/tests/unit/components/popover-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('popover-widget', 'PopoverWidgetComponent', {\n    unit: true\n  });\n\n  ember_qunit.test('Component initializes correctly', function () {\n    expect(2);\n\n    var component = this.subject({\n      template: Ember['default'].Handlebars.compile(\"test\")\n    });\n    var $component = this.$();\n\n    ok($component, \"Popover element is initialized\");\n    equal($component.attr('data-content').trim(), \"test\", \"data-content is populated\");\n  });\n\n});","define('hive/tests/unit/components/progress-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('progress-widget', 'ProgressWidgetComponent', {\n    unit: true\n  });\n\n  ember_qunit.test('Percentage is updated on value change', function() {\n    var component = this.subject({\n      value: 0\n    });\n\n    this.$();\n\n    equal(component.get('percentage'), '0%', 'Progress is at 0%');\n\n    Ember['default'].run(function() {\n      component.set('value', 50);\n    });\n\n    equal(component.get('percentage'), '50%', 'Progress is at 50%');\n  });\n\n});","define('hive/tests/unit/components/query-editor-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('query-editor', 'QueryEditorComponent', {\n    unit: true\n  });\n\n  ember_qunit.test('initEditor sets the editor on didInsertElement', function () {\n    expect(2);\n\n    var component = this.subject();\n\n    equal(component.get('editor'), undefined, 'element not rendered. Editor not set.');\n\n    this.$();\n\n    ok(component.get('editor'), 'element rendered. Editor set.');\n  });\n\n  ember_qunit.test('updateValue sets the query value on the editor.', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var query = 'select something';\n\n    this.$();\n\n    Ember['default'].run(function () {\n      component.set(('query'), query);\n    });\n\n    equal(component.get('editor').getValue(), query, 'set query property. Updated editor value property.');\n  });\n\n});","define('hive/tests/unit/components/select-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('select-widget', 'SelectWidgetComponent', {\n    needs: ['helper:path-binding']\n  });\n\n  ember_qunit.test('selectedLabel returns the selectedValue property indicated by labelPath if selectedValue and labelPath are set.', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var selectedValue = Ember['default'].Object.extend({\n      label: 'db'\n    }).create();\n\n    var labelPath = 'label';\n\n    Ember['default'].run(function () {\n      component.set('labelPath', labelPath);\n      component.set('selectedValue', selectedValue);\n    });\n\n    equal(component.get('selectedLabel'), selectedValue.label, 'selectedValue and labelPath are set. selectedLabel returns selectedValue[labelPath].');\n  });\n\n  ember_qunit.test('selectedLabel returns defaultLabel if selectedValue is falsy and defaultLabel is set.', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    var defaultLabel = 'select...';\n\n    Ember['default'].run(function () {\n      component.set('defaultLabel', defaultLabel);\n    });\n\n    equal(component.get('selectedLabel'), defaultLabel, 'selectedValue falsy and defaultLabel set. selectedLabel returns defaultLabel.');\n  });\n\n  ember_qunit.test('selectedLabel returns undefined if neither selectedValue nor defaultLabel are set.', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    equal(component.get('selectedLabel'), undefined, 'selectedValue and defaultLabel are falsy. selectedLabel returns undefined.');\n  });\n\n  ember_qunit.test('selectedLabel is computed when selectedValue changes.', function () {\n    expect(2);\n\n    var component = this.subject();\n\n    var selectedValue = Ember['default'].Object.extend({\n      label: 'db'\n    }).create();\n\n    var labelPath = 'label';\n\n    equal(component.get('selectedLabel'), undefined, 'selectedValue and defaultLabel are falsy. selectedLabel returns undefined.');\n\n    Ember['default'].run(function () {\n      component.set('labelPath', labelPath);\n      component.set('selectedValue', selectedValue);\n    });\n\n    equal(component.get('selectedLabel'), selectedValue.label, 'selectedValue and labelPath are set. selectedLabel returns selectedValue[labelPath].');\n  });\n\n  ember_qunit.test('renders an li tag for each item in the items collection.', function () {\n    expect(2);\n\n    var component = this.subject();\n    var $component = this.$();\n\n    equal($component.find('li').length, 0, 'items collection is not set. No li tags are rendered.');\n\n    Ember['default'].run(function() {\n      var items = Ember['default'].ArrayProxy.create({ content: Ember['default'].A([Ember['default'].Object.create(), Ember['default'].Object.create()])});\n      component.set('labelPath', 'name');\n      component.set('items', items);\n    });\n\n    equal($component.find('li').length, 2, 'items collection is set containing one item. One li tag is rendered.');\n  });\n\n  ember_qunit.test('if no selected item nor defaultLabel set the selected value with first item', function () {\n    expect(1);\n\n    var items = [\n      'item1',\n      'item2'\n    ];\n\n    var component = this.subject({ items: items });\n    var $component = this.$();\n\n    equal(component.get('selectedValue'), 'item1', 'selectedValue is set to first item')\n  });\n\n  ember_qunit.test('component actions', function() {\n    expect(7);\n\n    var targetObject = {\n      itemAdded: function() {\n        ok(true, 'External action itemAdded called')\n      },\n      itemEdited: function(item) {\n        ok(true, 'External action itemEdited called');\n        equal(item, 'editedItem', 'Data is sent with action');\n      },\n      itemRemoved: function(item) {\n        ok(true, 'External action itemRemoved called');\n        equal(item, 'removedItem', 'Data is sent with action');\n      }\n    };\n    var component = this.subject({\n      items: ['item'],\n      itemAdded: 'itemAdded',\n      itemEdited: 'itemEdited',\n      itemRemoved: 'itemRemoved',\n      targetObject: targetObject\n    });\n\n    var $component = this.$();\n\n    equal(component.get('selectedValue'), 'item', 'selectedValue is set to first item');\n\n    Ember['default'].run(function() {\n      component.send('select', 'newItem');\n      component.send('add');\n      component.send('edit', 'editedItem');\n      component.send('remove', 'removedItem');\n    });\n\n    equal(component.get('selectedValue'), 'newItem', 'selectedValue is set to newItem');\n\n\n\n  });\n\n});","define('hive/tests/unit/components/tabs-wiget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('tabs-widget', 'TabsWidgetComponent', {\n    needs: []\n  });\n\n  ember_qunit.test('First tab active by default', function() {\n    expect(2);\n\n    var tabs = Ember['default'].ArrayProxy.create({content: Ember['default'].A([\n      Ember['default'].Object.create(),\n      Ember['default'].Object.create()\n    ])});\n\n    var component = this.subject({ tabs: tabs });\n    var $component = this.$();\n\n    ok(component.get('tabs.firstObject.active'), 'First tab is active');\n    ok(!component.get('tabs.lastObject.active'), 'Second tab is not active');\n  });\n\n\n  ember_qunit.test('Set active tab on init', function() {\n    expect(2);\n\n    var tabs = Ember['default'].ArrayProxy.create({content: Ember['default'].A([\n      Ember['default'].Object.create(),\n      Ember['default'].Object.create(),\n      Ember['default'].Object.create({ active: true })\n    ])});\n\n    var component = this.subject({ tabs: tabs });\n\n    ok(!component.get('tabs.firstObject.active'), 'First tab is not active');\n    ok(component.get('tabs.lastObject.active'), 'Last tab is active');\n  });\n\n\n  ember_qunit.test('Set active tab', function() {\n    expect(3);\n\n    var tabs = Ember['default'].ArrayProxy.create({content: Ember['default'].A([\n      Ember['default'].Object.create(),\n      Ember['default'].Object.create(),\n      Ember['default'].Object.create({ active: true })\n    ])});\n\n    var component = this.subject({ tabs: tabs });\n\n    ok(!component.get('tabs.firstObject.active'), 'First tab is not active');\n    ok(component.get('tabs.lastObject.active'), 'Last tab is active');\n\n    Ember['default'].run(function() {\n      component.send('selectTab', tabs.objectAt(1));\n    });\n\n    ok(component.get('tabs').objectAt(1).get('active'), 'Second tab is active');\n  });\n\n  ember_qunit.test('removeEnabled tabs', function() {\n    expect(2);\n\n    var tabs = Ember['default'].ArrayProxy.create({content: Ember['default'].A([\n      Ember['default'].Object.create(),\n      Ember['default'].Object.create(),\n      Ember['default'].Object.create({ active: true })\n    ])});\n\n    var component = this.subject({ tabs: tabs, canRemove: true });\n\n    ok(component.get('removeEnabled'), 'More than one tab removeEnabled returns true');\n\n    Ember['default'].run(function() {\n      component.get('tabs').popObject();\n      component.get('tabs').popObject();\n    });\n\n    ok(!component.get('removeEnabled'), 'Only one tab removeEnabled returns false');\n  });\n\n  ember_qunit.test('remove tab', function () {\n    expect(1);\n\n    var targetObject = {\n      removeTabAction: function() {\n        ok(true, 'External remove tab action called');\n      }\n    };\n\n    var component = this.subject({\n      'removeClicked': 'removeTabAction',\n      'targetObject': targetObject\n    });\n\n    Ember['default'].run(function() {\n      component.send('remove', {});\n    });\n  });\n\n});","define('hive/tests/unit/components/typeahead-widget-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleForComponent('typeahead-widget', 'TypeaheadWidgetComponent', {\n    needs: ['component:ember-selectize']\n  });\n\n  ember_qunit.test('Component is initialized correctly', function () {\n    expect(2);\n\n    var items = [\n      {name: 'item 1', id: 1},\n      {name: 'item 2', id: 2},\n      {name: 'item 3', id: 3},\n      {name: 'item 4', id: 4}\n    ];\n\n    var component = this.subject({\n      content: items,\n      optionValuePath: 'content.id',\n      optionLabelPath: 'content.name'\n    });\n\n    this.$();\n\n    equal(component.get('content.length'), items.length, 'Items are set');\n    equal(component.get('selection'), items[0], 'First object is set as default value');\n  });\n\n});","define('hive/tests/unit/controllers/databases-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var controller;\n  var store;\n\n  ember_qunit.moduleFor('controller:databases', 'DatabasesController', {\n    needs: [ 'adapter:database',\n             'service:database',\n             'service:notify',\n             'model:database' ],\n\n    setup: function () {\n      //mock getDatabases which is called on controller init\n      this.container.lookup('service:database').getDatabases = function () {\n        var defer = Ember['default'].RSVP.defer();\n\n        defer.resolve();\n\n        return defer.promise;\n      };\n\n      //mock getDatabasesFromServer which is called by the poller\n      this.container.lookup('service:database').getDatabasesFromServer = function () {\n       var defer = Ember['default'].RSVP.defer();\n\n       var databases = [ \"database_a\", \"database_b\"];\n\n       defer.resolve(databases);\n       return defer.promise;\n       };\n\n      store = this.container.lookup('store:main');\n      controller = this.subject();\n      controller.store = store;\n\n    },\n\n    teardown: function () {\n      Ember['default'].run(controller, controller.destroy);\n    }\n  });\n\n  ember_qunit.test('controller is initialized properly.', function () {\n    expect(5);\n\n    var controller = this.subject();\n\n    ok(controller.get('tableSearchResults'), 'table search results collection was initialized.');\n    ok(controller.get('tabs'), 'tabs collection was initialized.');\n    equal(controller.get('tabs.length'), 2, 'tabs collection contains two tabs');\n    equal(controller.get('tabs').objectAt(0).get('name'), Ember['default'].I18n.t('titles.explorer'), 'first tab is database explorer.');\n    equal(controller.get('tabs').objectAt(1).get('name'), Ember['default'].I18n.t('titles.results'), 'second tab is search results');\n  });\n\n  ember_qunit.test('setTablePageAvailability sets canGetNextPage true if given database hasNext flag is true.', function () {\n    expect(1);\n\n    var database = Ember['default'].Object.create( { hasNext: true } );\n\n    controller.setTablePageAvailability(database);\n\n    equal(database.get('canGetNextPage'), true);\n  });\n\n  ember_qunit.test('setTablePageAvailability sets canGetNextPage true if given database has more loaded tables than the visible ones.', function () {\n    expect(1);\n\n    var database = Ember['default'].Object.create({\n      tables: [1],\n      visibleTables: []\n    });\n\n    controller.setTablePageAvailability(database);\n\n    equal(database.get('canGetNextPage'), true);\n  });\n\n  ember_qunit.test('setTablePageAvailability sets canGetNextPage falsy if given database hasNext flag is falsy and all loaded tables are visible.', function () {\n    expect(1);\n\n    var database = Ember['default'].Object.create({\n      tables: [1],\n      visibleTables: [1]\n    });\n\n    controller.setTablePageAvailability(database);\n\n    ok(!database.get('canGetNextPage'));\n  });\n\n  ember_qunit.test('setColumnPageAvailability sets canGetNextPage true if given table hasNext flag is true.', function () {\n    expect(1);\n\n    var table = Ember['default'].Object.create( { hasNext: true } );\n\n    controller.setColumnPageAvailability(table);\n\n    equal(table.get('canGetNextPage'), true);\n  });\n\n  ember_qunit.test('setColumnPageAvailability sets canGetNextPage true if given table has more loaded columns than the visible ones.', function () {\n    expect(1);\n\n    var table = Ember['default'].Object.create({\n      columns: [1],\n      visibleColumns: []\n    });\n\n    controller.setColumnPageAvailability(table);\n\n    equal(table.get('canGetNextPage'), true);\n  });\n\n  ember_qunit.test('setColumnPageAvailability sets canGetNextPage true if given database hasNext flag is falsy and all loaded columns are visible.', function () {\n    expect(1);\n\n    var table = Ember['default'].Object.create({\n      columns: [1],\n      visibleColumns: [1]\n    });\n\n    controller.setColumnPageAvailability(table);\n\n    ok(!table.get('canGetNextPage'));\n  });\n\n  ember_qunit.test('getTables sets the visibleTables as the first page of tables if they are already loaded', function () {\n    expect(2);\n\n    var database = Ember['default'].Object.create({\n      name: 'test_db',\n      tables: [1, 2, 3]\n    });\n\n    controller.get('databases').pushObject(database);\n    controller.set('pageCount', 2);\n\n    controller.send('getTables', 'test_db');\n\n    equal(database.get('visibleTables.length'), controller.get('pageCount'), 'there are 2 visible tables out of 3.');\n    equal(database.get('canGetNextPage'), true, 'user can get next tables page.');\n  });\n\n  ember_qunit.test('getColumns sets the visibleColumns as the first page of columns if they are already loaded.', function () {\n    expect(2);\n\n    var table = Ember['default'].Object.create({\n      name: 'test_table',\n      columns: [1, 2, 3]\n    });\n\n    var database = Ember['default'].Object.create({\n      name: 'test_db',\n      tables: [ table ],\n      visibleTables: [ table ]\n    });\n\n    controller.set('pageCount', 2);\n\n    controller.send('getColumns', 'test_table', database);\n\n    equal(table.get('visibleColumns.length'), controller.get('pageCount'), 'there are 2 visible columns out of 3.');\n    equal(table.get('canGetNextPage'), true, 'user can get next columns page.');\n  });\n\n  ember_qunit.test('showMoreTables pushes more tables to visibleTables if there are still hidden tables loaded.', function () {\n    expect(2);\n\n    var database = Ember['default'].Object.create({\n      name: 'test_db',\n      tables: [1, 2, 3],\n      visibleTables: [1]\n    });\n\n    controller.get('databases').pushObject(database);\n    controller.set('pageCount', 1);\n\n    controller.send('showMoreTables', database);\n\n    equal(database.get('visibleTables.length'), controller.get('pageCount') * 2, 'there are 2 visible tables out of 3.');\n    equal(database.get('canGetNextPage'), true, 'user can get next tables page.');\n  });\n\n  ember_qunit.test('showMoreColumns pushes more columns to visibleColumns if there are still hidden columns loaded.', function () {\n    expect(2);\n\n    var table = Ember['default'].Object.create({\n      name: 'test_table',\n      columns: [1, 2, 3],\n      visibleColumns: [1]\n    });\n\n    var database = Ember['default'].Object.create({\n      name: 'test_db',\n      tables: [ table ],\n      visibleTables: [ table ]\n    });\n\n    controller.set('pageCount', 1);\n\n    controller.send('showMoreColumns', table, database);\n\n    equal(table.get('visibleColumns.length'), controller.get('pageCount') * 2, 'there are 2 visible columns out of 3.');\n    equal(table.get('canGetNextPage'), true, 'user can get next columns page.');\n  });\n\n  ember_qunit.test('syncDatabases pushed more databases when new databases are added in the backend', function() {\n    expect(3);\n\n    var databaseA = {\n      id: \"database_a\",\n      name: \"database_a\"\n    };\n\n    Ember['default'].run(function() {\n      store.createRecord('database', databaseA);\n      controller.syncDatabases();\n    });\n\n    var latestDbNames = store.all('database').mapBy('name');\n    equal(latestDbNames.length, 2, \"There is 1 additional database added to hive\");\n    equal(latestDbNames.contains(\"database_a\"), true, \"New database list should contain the old database name.\");\n    equal(latestDbNames.contains(\"database_b\"), true, \"New database list should contain the new database name.\");\n  });\n\n  ember_qunit.test('syncDatabases removed database when old databases are removed in the backend', function() {\n    expect(4);\n\n    var latestDbNames;\n\n    var databaseA = {\n      id: \"database_a\",\n      name: \"database_a\"\n    };\n    var databaseB = {\n      id: \"database_b\",\n      name: \"database_b\"\n    };\n    var databaseC = {\n      id: \"database_c\",\n      name: \"database_c\"\n    };\n\n    Ember['default'].run(function() {\n      store.createRecord('database', databaseA);\n      store.createRecord('database', databaseB);\n      store.createRecord('database', databaseC);\n      controller.syncDatabases();\n    });\n\n    latestDbNames = store.all('database').mapBy('name');\n    equal(latestDbNames.length, 2, \"One database is removed from hive\");\n    equal(latestDbNames.contains(\"database_a\"), true, \"New database list should contain the old database name.\");\n    equal(latestDbNames.contains(\"database_b\"), true, \"New database list should contain the old database name.\");\n    equal(latestDbNames.contains(\"database_c\"), false, \"New database list should not contain the database name removed in the backend.\");\n\n  });\n\n});","define('hive/tests/unit/controllers/history-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:history', 'HistoryController', {\n    needs: [ 'service:file', 'service:job' ]\n  });\n\n  ember_qunit.test('controller is initialized correctly', function () {\n    expect(1);\n\n    var component = this.subject();\n\n    equal(component.get('columns.length'), 4, 'Columns are initialized');\n  });\n\n  ember_qunit.test('date range is set correctly', function () {\n    expect(2);\n\n    var component = this.subject();\n    var min = parseInt(Date.now() / 1000) - (60 * 60 * 24 * 60);\n    var max = parseInt(Date.now() / 1000);\n\n    var history = Ember['default'].ArrayProxy.create({ content: [\n      Ember['default'].Object.create({\n        dateSubmittedTimestamp: min\n      }),\n      Ember['default'].Object.create({\n        dateSubmittedTimestamp: max\n      })\n    ]});\n\n    Ember['default'].run(function() {\n      component.set('history', history);\n    });\n\n    var dateColumn = component.get('columns').find(function (column) {\n      return column.get('caption') === 'columns.date';\n    });\n\n    equal(dateColumn.get('dateRange.min'), min, 'Min date is set correctly');\n    equal(dateColumn.get('dateRange.max'), max, 'Max date is set correctly');\n  });\n\n  ember_qunit.test('interval duration is set correctly', function () {\n    expect(2);\n\n    var component = this.subject();\n\n    var history = Ember['default'].ArrayProxy.create({ content: [\n      Ember['default'].Object.create({\n        duration: 20\n      }),\n      Ember['default'].Object.create({\n        duration: 300\n      })\n    ]});\n\n    Ember['default'].run(function() {\n      component.set('history', history);\n    });\n\n    var durationColumn = component.get('columns').find(function (column) {\n      return column.get('caption') === 'columns.duration';\n    });\n\n    equal(durationColumn.get('numberRange.min'), 20, 'Min value is set correctly');\n    equal(durationColumn.get('numberRange.max'), 300, 'Max value is set correctly');\n  });\n\n  ember_qunit.test('history filtering', function() {\n    expect(2);\n\n    var component = this.subject();\n\n    var history = Ember['default'].ArrayProxy.create({\n      content: [\n        Ember['default'].Object.create({\n          name: 'HISTORY',\n          status: 1\n        }),\n        Ember['default'].Object.create({\n          name: '1HISTORY',\n          status: 2\n        })\n      ]\n    });\n\n    Ember['default'].run(function() {\n      component.set('history', history);\n    });\n\n    equal(component.get('model.length'), 2, 'No filters applied we have 2 models');\n\n    Ember['default'].run(function() {\n      component.filterBy('name', 'HISTORY', true);\n    });\n\n    equal(component.get('model.length'), 1, 'Filter by name we have 1 filtered model');\n  });\n\n});","define('hive/tests/unit/controllers/index-test', ['ember', 'ember-qunit', 'hive/utils/constants'], function (Ember, ember_qunit, constants) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:index', 'IndexController', {\n    needs: [\n            'controller:open-queries',\n            'controller:udfs',\n            'controller:index/history-query/logs',\n            'controller:index/history-query/results',\n            'controller:index/history-query/explain',\n            'controller:settings',\n            'controller:visual-explain',\n            'controller:tez-ui',\n            'service:job',\n            'service:file',\n            'service:database',\n            'service:notify',\n            'service:job-progress',\n            'service:session',\n            'service:settings',\n            'adapter:application',\n            'adapter:database'\n          ]\n  });\n\n  ember_qunit.test('modelChanged calls update on the open-queries cotnroller.', function () {\n    expect(1);\n\n    var controller = this.subject();\n\n    controller.set('openQueries.update', function () {\n      var defer = Ember['default'].RSVP.defer();\n\n      ok(true, 'index model has changed. update was called on open-queries controller.');\n\n      defer.resolve();\n\n      return defer.promise;\n    });\n\n    Ember['default'].run(function () {\n      controller.set('model', Ember['default'].Object.create());\n    });\n  });\n\n  ember_qunit.test('bindQueryParams replaces param placeholder with values', function() {\n    expect(1);\n\n    var controller = this.subject();\n    var queryParams = [\n      { name: '$what', value: 'color' },\n      { name: '$where', value: 'z'}\n    ];\n\n    var query = \"select $what from $where\";\n    var replacedQuery = \"select color from z\";\n\n    Ember['default'].run(function() {\n      controller.get('queryParams').setObjects(queryParams);\n    });\n\n    equal(controller.bindQueryParams(query), replacedQuery, 'Params replaced correctly');\n  });\n\n  ember_qunit.test('bindQueryParams replaces same param multiple times', function() {\n    expect(1);\n\n    var controller = this.subject();\n    var queryParams = [\n      { name: '$what', value: 'color' },\n      { name: '$where', value: 'z'}\n    ];\n\n    var query = \"select $what from $where as $what\";\n    var replacedQuery = \"select color from z as color\";\n\n    Ember['default'].run(function() {\n      controller.get('queryParams').setObjects(queryParams);\n    });\n\n    equal(controller.bindQueryParams(query), replacedQuery, 'Params replaced correctly');\n  });\n\n  ember_qunit.test('parseQueryParams sets queryParams when query changes', function() {\n    expect(4);\n\n\n    var query = Ember['default'].Object.create({\n      id: 1,\n      fileContent: \"select $what from $where\"\n    });\n    var updatedQuery = \"select $what from $where and $where\";\n\n    var controller = this.subject({\n      model: query\n    });\n\n    Ember['default'].run(function() {\n      controller.set('openQueries.queryTabs', [query]);\n      controller.set('openQueries.currentQuery', query);\n    });\n\n    equal(controller.get('queryParams.length'), 2, '2 queryParams parsed');\n    equal(controller.get('queryParams').objectAt(0).name, '$what', 'First param parsed correctly');\n    equal(controller.get('queryParams').objectAt(1).name, '$where', 'Second param parsed correctly');\n\n    Ember['default'].run(function() {\n      controller.set('openQueries.currentQuery.fileContent', updatedQuery);\n    });\n\n    equal(controller.get('queryParams.length'), 2, 'Can use same param multiple times');\n  });\n\n  ember_qunit.test('canExecute return false if query is executing', function() {\n    expect(2);\n    var controller = this.subject();\n\n    Ember['default'].run(function() {\n      controller.set('openQueries.update', function () {\n        var defer = Ember['default'].RSVP.defer();\n        defer.resolve();\n        return defer.promise;\n      });\n\n      controller.set('model', Ember['default'].Object.create({ 'isRunning': false }));\n      controller.set('queryParams', []);\n    });\n\n    ok(controller.get('canExecute'), 'Query is not executing => canExecute return true');\n\n    Ember['default'].run(function() {\n      controller.set('model', Ember['default'].Object.create({ 'isRunning': true }));\n    });\n\n    ok(!controller.get('canExecute'), 'Query is executing => canExecute return false');\n  });\n\n  ember_qunit.test('canExecute return false if queryParams doesnt\\'t have values', function() {\n    expect(2);\n    var controller = this.subject();\n\n    var paramsWithoutValues = [\n      { name: '$what', value: '' },\n      { name: '$where', value: '' }\n    ];\n\n    var paramsWithValues = [\n      { name: '$what', value: 'value1' },\n      { name: '$where', value: 'value2' }\n    ];\n\n    Ember['default'].run(function() {\n      controller.set('openQueries.update', function () {\n        var defer = Ember['default'].RSVP.defer();\n        defer.resolve();\n        return defer.promise;\n      });\n      controller.set('model', Ember['default'].Object.create({ 'isRunning': false }));\n      controller.get('queryParams').setObjects(paramsWithoutValues);\n    });\n\n    ok(!controller.get('canExecute'), 'Params without value => canExecute return false');\n\n    Ember['default'].run(function() {\n      controller.get('queryParams').setObjects(paramsWithValues);\n    });\n\n    ok(controller.get('canExecute'), 'Params with values => canExecute return true');\n  });\n\n  ember_qunit.test('Execute EXPLAIN type query', function() {\n    expect(1);\n\n    var query = Ember['default'].Object.create({\n      id: 1,\n      fileContent: \"explain select 1\" // explain type query\n    });\n\n    var controller = this.subject({\n      model: query,\n      _executeQuery: function (referer) {\n        equal(referer, constants['default'].jobReferrer.explain, 'Explain type query successful.');\n        return {then: function() {}};\n      }\n    });\n\n    Ember['default'].run(function() {\n        controller.set('openQueries.queryTabs', [query]);\n        controller.set('openQueries.currentQuery', query);\n        controller.send('executeQuery');\n    });\n\n  });\n\n  ember_qunit.test('Execute non EXPLAIN type query', function() {\n    expect(1);\n\n    var query = Ember['default'].Object.create({\n      id: 1,\n      fileContent: \"select 1\" //non explain type query\n    });\n\n    var controller = this.subject({\n      model: query,\n      _executeQuery: function (referer) {\n        equal(referer, constants['default'].jobReferrer.job , 'non Explain type query successful.');\n        return {then: function() {}};\n      }\n    });\n\n    Ember['default'].run(function() {\n        controller.set('openQueries.queryTabs', [query]);\n        controller.set('openQueries.currentQuery', query);\n        controller.send('executeQuery');\n    });\n\n  });\n\n\n  ember_qunit.test('csvUrl returns if the current query is not a job', function() {\n    expect(1);\n    var content = Ember['default'].Object.create({\n        constructor: {\n          typeKey: 'notJob'\n        }\n    });\n\n    var controller = this.subject({ content: content });\n    ok(!controller.get('csvUrl'), 'returns if current query is not a job');\n  });\n\n  ember_qunit.test('csvUrl returns is status in not SUCCEEDED', function() {\n    expect(1);\n    var content= Ember['default'].Object.create({\n        constructor: {\n          typeKey: 'job'\n        },\n        status: 'notSuccess'\n    });\n\n    var controller = this.subject({ content: content });\n    ok(!controller.get('csvUrl'), 'returns if current status is not success');\n  });\n\n  ember_qunit.test('csvUrl return the download results as csv link', function() {\n    expect(1);\n    var content = Ember['default'].Object.create({\n        constructor: {\n          typeKey: 'job'\n        },\n        status: 'SUCCEEDED',\n        id: 1\n    });\n\n    var controller = this.subject({ content: content });\n    ok(controller.get('csvUrl'));\n  });\n\n  ember_qunit.test('donwloadMenu returns null if status is not succes and results are not visible ', function() {\n    expect(1);\n    var content = Ember['default'].Object.create({\n        status: 'notSuccess',\n        queryProcessTabs: [{\n          path: 'index.historyQuery.results',\n          visible: false\n        }]\n    });\n\n    var controller = this.subject({ content: content });\n    ok(!controller.get('downloadMenu'), 'Returns null');\n  });\n\n  ember_qunit.test('donwloadMenu returns only saveToHDFS if csvUrl is false', function() {\n    expect(1);\n    var content = Ember['default'].Object.create({\n        constructor: {\n          typeKey: 'notjob'\n        },\n        status: 'SUCCEEDED',\n    });\n\n    var controller = this.subject({ content: content });\n    Ember['default'].run(function() {\n      var tabs = controller.get('queryProcessTabs');\n      var results = tabs.findBy('path', 'index.historyQuery.results');\n      results.set('visible', true);\n    });\n\n    equal(controller.get('downloadMenu.length'), 1, 'Returns only saveToHDFS');\n  });\n\n  ember_qunit.test('donwloadMenu returns saveToHDFS and csvUrl', function() {\n    expect(1);\n    var content = Ember['default'].Object.create({\n        constructor: {\n          typeKey: 'job'\n        },\n        status: 'SUCCEEDED',\n    });\n\n    var controller = this.subject({ content: content });\n    Ember['default'].run(function() {\n      var tabs = controller.get('queryProcessTabs');\n      var results = tabs.findBy('path', 'index.historyQuery.results');\n      results.set('visible', true);\n    });\n\n    equal(controller.get('downloadMenu.length'), 2, 'Returns saveToHDFS and csvUrl');\n  });\n\n});","define('hive/tests/unit/controllers/insert-udfs-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:insert-udfs', 'InsertUdfsController', {\n    needs: 'controller:udfs'\n  });\n\n  ember_qunit.test('controller is initialized correctly', function () {\n    expect(1);\n\n    var udfs = Ember['default'].A([\n      Ember['default'].Object.create({ fileResource: { id: 1 } }),\n      Ember['default'].Object.create({ fileResource: { id: 1 } }),\n      Ember['default'].Object.create({ fileResource: { id: 2 } }),\n      Ember['default'].Object.create({ fileResource: { id: 2 } })\n    ]);\n\n    var component = this.subject();\n\n    Ember['default'].run(function() {\n      component.set('udfs', udfs);\n    });\n\n    equal(component.get('length'), 2, 'should contain unique file resources');\n  });\n\n  ember_qunit.test('controller updates on new udfs', function () {\n    expect(2);\n\n    var udfs = Ember['default'].A([\n      Ember['default'].Object.create({ fileResource: { id: 1 } }),\n      Ember['default'].Object.create({ fileResource: { id: 2 } }),\n    ]);\n\n    var component = this.subject();\n\n    Ember['default'].run(function() {\n      component.set('udfs', udfs);\n    });\n\n    equal(component.get('length'), 2, '');\n\n    var newUdf = Ember['default'].Object.create({ isNew: true, fileResource: { id: 3 } });\n\n    Ember['default'].run(function() {\n      component.get('udfs').pushObject(newUdf);\n    });\n\n    equal(component.get('length'), 3, '');\n  });\n\n});","define('hive/tests/unit/controllers/messages-test', ['ember', 'hive/utils/constants', 'ember-qunit'], function (Ember, constants, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:messages', 'MessagesController', {\n  });\n\n  ember_qunit.test('Controller is initialized', function() {\n    var controller = this.subject();\n\n    ok(controller, 'Controller is initialized');\n  });\n\n  ember_qunit.test('Controller action', function() {\n    var controller = this.subject({\n      notifyService: Ember['default'].Object.create({\n        removeMessage: function(message) {\n          ok(1, 'removeMessage action called');\n        },\n        removeAllMessages: function() {\n          ok(1, 'removeAllMessages action called');\n        },\n        markMessagesAsSeen: function(message) {\n          ok(1, 'markMessagesAsSeen action called');\n        }\n      })\n    });\n\n    Ember['default'].run(function() {\n      controller.send('removeMessage');\n      controller.send('removeAllMessages');\n      controller.send('markMessagesAsSeen');\n    });\n\n  });\n\n});","define('hive/tests/unit/controllers/open-queries-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:open-queries', 'OpenQueriesController', {\n    needs: [ 'controller:index/history-query/results',\n             'controller:index/history-query/explain',\n             'controller:index',\n             'controller:settings',\n             'service:file',\n             'service:database'\n           ]\n  });\n\n  ember_qunit.test('when initialized, controller sets the queryTabs.', function () {\n    expect(1);\n\n    var controller = this.subject();\n\n    ok(controller.get('queryTabs', 'queryTabs is initialized.'));\n  });\n\n  ember_qunit.test('pushObject override creates a new queryFile mock and adds it to the collection if none provided.', function () {\n    expect(3);\n\n    var controller = this.subject();\n\n    var model = Ember['default'].Object.create({\n      id: 5\n    });\n\n    controller.pushObject(null, model);\n\n    equal(controller.get('length'), 1, 'a new object was added to the open queries collection.');\n    equal(controller.objectAt(0).id, model.get('id'), 'the object id was set to the model id.');\n    equal(controller.objectAt(0).get('fileContent'), '', 'the object fileContent is initialized with empty string.');\n  });\n\n  ember_qunit.test('getTabForModel retrieves the tab that has the id and the type equal to the ones of the given model.', function () {\n    expect(1);\n\n    var controller = this.subject();\n\n    var model = Ember['default'].Object.create({\n      id: 1\n    });\n\n    controller.get('queryTabs').pushObject(Ember['default'].Object.create({\n      id: model.get('id')\n    }));\n\n    equal(controller.getTabForModel(model), controller.get('queryTabs').objectAt(0), 'retrieves correct tab for the given model.');\n  });\n\n  ember_qunit.test('getQueryForModel retrieves the query by id equality if a new record is given', function () {\n    expect(1);\n\n    var controller = this.subject();\n\n    var model = Ember['default'].Object.create({\n      id: 1,\n      isNew: true\n    });\n\n    controller.pushObject(null, model);\n\n    equal(controller.getQueryForModel(model).get('id'), model.get('id'), 'a new record was given, the method retrieves the query by id equality');\n  });\n\n  ember_qunit.test('getQueryForModel retrieves the query by record id equality with model queryFile path if a saved record is given', function () {\n    expect(1);\n\n    var controller = this.subject();\n\n    var model = Ember['default'].Object.create({\n      id: 1,\n      queryFile: 'some/path'\n    });\n\n    controller.pushObject(Ember['default'].Object.create({\n      id: model.get('queryFile')\n    }));\n\n    equal(controller.getQueryForModel(model).get('id'), model.get('queryFile'), 'a saved record was given, the method retrieves the query by id equality with record queryFile path.');\n  });\n\n});","define('hive/tests/unit/controllers/queries-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:queries', 'QueriesController', {\n    needs: [\n      'controller:history',\n      'controller:open-queries'\n    ]\n  });\n\n  ember_qunit.test('controller is initialized', function() {\n    expect(1);\n\n    var component = this.subject();\n\n    equal(component.get('columns.length'), 4, 'Columns are initialized correctly');\n  });\n\n});","define('hive/tests/unit/controllers/settings-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:settings', 'SettingsController', {\n    needs: [\n      'controller:databases',\n      'controller:index',\n      'controller:open-queries',\n      'controller:index/history-query/results',\n      'controller:index/history-query/explain',\n      'controller:udfs',\n      'controller:index/history-query/logs',\n      'controller:visual-explain',\n      'controller:tez-ui',\n      'adapter:database',\n      'adapter:application',\n      'service:settings',\n      'service:notify',\n      'service:database',\n      'service:file',\n      'service:session',\n      'service:job',\n      'service:job-progress'\n    ]\n  });\n\n  ember_qunit.test('can add a setting', function() {\n    var controller = this.subject();\n\n    ok(!controller.get('settings.length'), 'No initial settings');\n\n    Ember['default'].run(function() {\n      controller.send('add');\n    });\n\n    equal(controller.get('settings.length'), 1, 'Can add settings');\n  });\n\n  ember_qunit.test('validate', function() {\n    var predefinedSettings = [\n      {\n        name: 'some.key',\n        validate: new RegExp(/^\\d+$/) // digits\n      }\n    ];\n\n    var controller = this.subject({\n      predefinedSettings: predefinedSettings\n    });\n\n    controller.set('openQueries.update', function () {\n      var defer = Ember['default'].RSVP.defer();\n      defer.resolve();\n\n      return defer.promise;\n    });\n\n    var settings = [\n      Ember['default'].Object.create({key: { name: 'some.key' }, value: 'value'}),\n      Ember['default'].Object.create({key: { name: 'some.key' }, value: '123'})\n    ];\n\n    Ember['default'].run(function() {\n      controller.set('settings', settings);\n    });\n\n    var currentSettings = controller.get('settings');\n    ok(!currentSettings.get('firstObject.valid'), \"First setting doesn\\' pass validataion\");\n    ok(currentSettings.get('lastObject.valid'), 'Second setting passes validation');\n  });\n\n  ember_qunit.test('Actions', function(assert) {\n    assert.expect(5);\n\n    var settingsService = Ember['default'].Object.create({\n      add: function() {\n        assert.ok(true, 'add called');\n      },\n      remove: function(setting) {\n        assert.ok(setting, 'Setting param is sent');\n      },\n      createKey: function(name) {\n        assert.ok(name, 'Name param is sent');\n      },\n      removeAll: function() {\n        assert.ok(true, 'removeAll called');\n      },\n      saveDefaultSettings: function() {\n        assert.ok(true, 'saveDefaultSettings called');\n      }\n    });\n\n    var controller = this.subject();\n    controller.set('settingsService', settingsService);\n\n    Ember['default'].run(function() {\n      controller.send('add');\n      controller.send('remove', {});\n      controller.send('addKey', {});\n      controller.send('removeAll');\n      controller.send('saveDefaultSettings');\n    });\n  });\n\n\n  ember_qunit.test('Excluded settings', function(assert) {\n    var controller = this.subject();\n\n    console.log(controller.get('predefinedSettings'));\n    assert.equal(controller.get('excluded').length, 0, 'Initially there are no excluded settings');\n\n    Ember['default'].run(function() {\n      controller.get('settings').pushObject(Ember['default'].Object.create({ key: { name: 'hive.tez.container.size' }}));\n      controller.get('settings').pushObject(Ember['default'].Object.create({ key: { name: 'hive.prewarm.enabled' }}));\n    });\n\n    assert.equal(controller.get('excluded').length, 2, 'Two settings are excluded');\n  });\n\n});","define('hive/tests/unit/controllers/tez-ui-test', ['ember', 'ember-data', 'ember-qunit'], function (Ember, DS, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var container;\n\n  ember_qunit.moduleFor('controller:tez-ui', 'TezUIController', {\n    needs: [\n      'controller:index',\n      'service:job',\n      'service:file',\n      'controller:open-queries',\n      'controller:databases',\n      'controller:udfs',\n      'controller:index/history-query/logs',\n      'controller:index/history-query/results',\n      'controller:index/history-query/explain',\n      'controller:settings',\n      'controller:visual-explain',\n      'adapter:database',\n      'service:database',\n      'service:notify',\n      'service:job-progress',\n      'service:session',\n      'service:settings'\n    ],\n\n    setup: function() {\n      container = new Ember['default'].Container();\n      container.register('store:main', Ember['default'].Object.extend({\n        find: Ember['default'].K\n      }));\n    }\n  });\n\n  ember_qunit.test('controller is initialized properly.', function () {\n    expect(1);\n\n    var controller = this.subject();\n\n    ok(controller);\n  });\n\n  ember_qunit.test('dagId returns false if there is  no tez view available', function() {\n    var controller = this.subject();\n\n    ok(!controller.get('dagId'), 'dagId is false without a tez view available');\n  });\n\n  // test('dagId returns the id if there is view available', function() {\n  //   var controller = this.subject({\n  //   });\n\n  //   Ember.run(function() {\n  //     controller.set('index.model', Ember.Object.create({\n  //       id: 2,\n  //       dagId: 3\n  //     }));\n\n  //     controller.set('isTezViewAvailable', true);\n  //   });\n\n  //   equal(controller.get('dagId'), 3, 'dagId is truthy');\n  // });\n\n  ember_qunit.test('dagURL returns false if no dag id is available', function() {\n    var controller = this.subject();\n\n    ok(!controller.get('dagURL'), 'dagURL is false');\n  });\n\n  ember_qunit.test('dagURL returns the url if dag id is available', function() {\n    var controller = this.subject({\n      tezViewURL: '1',\n      tezDagPath: '2',\n      dagId: '3'\n    });\n\n    equal(controller.get('dagURL'), '123');\n  });\n\n});","define('hive/tests/unit/controllers/udfs-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('controller:udfs', 'UdfsController', {});\n\n  ember_qunit.test('controller is initialized', function() {\n    expect(3);\n\n    var component = this.subject();\n\n    equal(component.get('columns.length'), 2, 'Columns are initialized correctly');\n    ok(component.get('sortAscending'), 'Sort ascending is true');\n    equal(component.get('sortProperties.length'), 0, 'sortProperties is empty');\n  });\n\n  ember_qunit.test('sort', function() {\n   expect(2);\n\n    var component = this.subject();\n\n    Ember['default'].run(function () {\n      component.send('sort', 'prop');\n    });\n\n    ok(component.get('sortAscending'), 'New sort prop sortAscending is set to true');\n    equal(component.get('sortProperties').objectAt(0), \"prop\", 'sortProperties is set to prop');\n  });\n\n  ember_qunit.test('add', function() {\n    expect(1);\n\n    var store = {\n      createRecord: function(name) {\n        ok(name, 'store.createRecord called');\n      }\n    };\n    var component = this.subject({ store: store });\n\n    Ember['default'].run(function () {\n      component.send('add');\n    });\n  });\n\n});","define('hive/tests/unit/helpers/path-binding-test', ['hive/helpers/path-binding', 'ember'], function (path_binding, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  module('PathBindingHelper');\n\n  // Replace this with your real tests.\n  test('it should retrieve property value for a given object.', function() {\n    var obj = Ember['default'].Object.extend({\n      name: 'some name'\n    }).create();\n\n    var result = path_binding.pathBinding(obj, 'name');\n    equal(result, obj.get('name'));\n  });\n\n});","define('hive/tests/unit/services/notify-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('service:notify', 'NotifyService');\n\n  ember_qunit.test('Service initialized correctly', function () {\n    expect(3);\n\n    var service = this.subject();\n    service.removeAllMessages();\n    service.markMessagesAsSeen();\n\n    equal(service.get('messages.length'), 0, 'No messages');\n    equal(service.get('notifications.length'), 0, 'No notifications');\n    equal(service.get('unseenMessages.length'), 0, 'No unseenMessages');\n  });\n\n  ember_qunit.test('Can add notification', function() {\n    expect(3);\n    var service = this.subject();\n\n    service.add('notif', 'message', 'body');\n\n    equal(service.get('messages.length'), 1, 'one message added');\n    equal(service.get('notifications.length'), 1, 'one notifications added');\n    equal(service.get('unseenMessages.length'), 1, 'one unseenMessages added');\n  });\n\n  ember_qunit.test('Can add info notification', function() {\n    expect(1);\n    var service = this.subject();\n\n    service.info('message', 'body');\n    equal(service.get('messages.lastObject.type.typeClass'), 'alert-info', 'Info notification added');\n  });\n\n  ember_qunit.test('Can add warn notification', function() {\n    expect(1);\n    var service = this.subject();\n\n    service.warn('message', 'body');\n    equal(service.get('messages.lastObject.type.typeClass'), 'alert-warning', 'Warn notification added');\n  });\n\n  ember_qunit.test('Can add error notification', function() {\n    expect(1);\n    var service = this.subject();\n\n    service.error('message', 'body');\n    equal(service.get('messages.lastObject.type.typeClass'), 'alert-danger', 'Error notification added');\n  });\n\n  ember_qunit.test('Can add success notification', function() {\n    expect(1);\n    var service = this.subject();\n\n    service.success('message', 'body');\n    equal(service.get('messages.lastObject.type.typeClass'), 'alert-success', 'Success notification added');\n  });\n\n  ember_qunit.test('Can format message body', function() {\n    expect(3);\n\n    var objectBody = {\n      k1: 'v1',\n      k2: 'v2'\n    };\n    var formatted = \"\\n\\nk1:\\nv1\\n\\nk2:\\nv2\";\n    var service = this.subject();\n\n    ok(!service.formatMessageBody(), 'Return nothing if no body is passed');\n    equal(service.formatMessageBody('some string'), 'some string', 'Return the body if it is a string');\n    equal(service.formatMessageBody(objectBody), formatted, 'Parse the keys and return a string if it is an object');\n  });\n\n  ember_qunit.test('Can removeMessage', function() {\n    expect(4);\n\n    var service = this.subject();\n    var messagesCount = service.get('messages.length');\n    var notificationCount = service.get('notifications.length');\n\n    service.add('type', 'message', 'body');\n\n    equal(service.get('messages.length'), messagesCount + 1, 'Message added');\n    equal(service.get('notifications.length'), notificationCount + 1, 'Notification added');\n\n    var message = service.get('messages.lastObject');\n    service.removeMessage(message);\n\n    equal(service.get('messages.length'), messagesCount, 'Message removed');\n    equal(service.get('notifications.length'), notificationCount, 'Notification removed');\n  });\n\n  ember_qunit.test('Can removeNotification', function() {\n    expect(2);\n\n    var service = this.subject();\n    var notificationCount = service.get('notifications.length');\n\n    service.add('type', 'message', 'body');\n\n    equal(service.get('notifications.length'), notificationCount + 1, 'Notification added');\n\n    var notification = service.get('notifications.lastObject');\n    service.removeNotification(notification);\n\n    equal(service.get('notifications.length'), notificationCount, 'Notification removed');\n  });\n\n  ember_qunit.test('Can removeAllMessages', function() {\n    expect(2);\n\n    var service = this.subject();\n\n    service.add('type', 'message', 'body');\n    service.add('type', 'message', 'body');\n    service.add('type', 'message', 'body');\n\n    ok(service.get('messages.length'), 'Messages are present');\n    service.removeAllMessages();\n    equal(service.get('messages.length'), 0, 'No messages found');\n  });\n\n  ember_qunit.test('Can markMessagesAsSeen', function() {\n    expect(2);\n\n    var service = this.subject();\n\n    service.add('type', 'message', 'body');\n    service.add('type', 'message', 'body');\n    service.add('type', 'message', 'body');\n\n    ok(service.get('unseenMessages.length'), 'There are unseen messages');\n    service.markMessagesAsSeen();\n    equal(service.get('unseenMessages.length'), 0, 'No unseen messages');\n  });\n\n});","define('hive/tests/unit/services/settings-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  ember_qunit.moduleFor('service:settings', 'SettingsService');\n\n  ember_qunit.test('Init', function(assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n\n  ember_qunit.test('Can create a setting object', function(assert) {\n    assert.expect(2);\n\n    var service = this.subject();\n\n    var setting = service._createSetting('sName', 'sValue');\n\n    assert.equal(setting.get('key.name'), 'sName', 'Settign has the correct name');\n    assert.equal(setting.get('value'), 'sValue', 'Settign has the correct value');\n\n    service.removeAll();\n  });\n\n  ember_qunit.test('Can create default settings', function(assert) {\n    assert.expect(2);\n\n    var service = this.subject();\n\n    var settings = {\n      'sName1': 'sValue1',\n      'sName2': 'sValue2',\n      'sName3': 'sValue3'\n    };\n\n    service._createDefaultSettings();\n\n    assert.equal(service.get('settings.length'), 0, '0 settings created');\n\n    service._createDefaultSettings(settings);\n\n    assert.equal(service.get('settings.length'), 3, '3 settings created');\n\n    service.removeAll();\n  });\n\n  ember_qunit.test('Can add a setting', function(assert) {\n    assert.expect(2);\n\n    var service = this.subject();\n    assert.equal(service.get('settings.length'), 0, 'No settings');\n    service.add();\n    service.add();\n    assert.equal(service.get('settings.length'), 2, '2 settings added');\n\n    service.removeAll();\n  });\n\n  ember_qunit.test('Can remove a setting', function(assert) {\n    assert.expect(2);\n\n    var service = this.subject();\n\n    service.add();\n    service.add();\n\n    assert.equal(service.get('settings.length'), 2, '2 settings added');\n    var firstSetting = service.get('settings.firstObject');\n    service.remove(firstSetting);\n    assert.equal(service.get('settings.length'), 1, 'Setting removed');\n\n    service.removeAll();\n  });\n\n  ember_qunit.test('Can create key', function(assert) {\n    assert.expect(2);\n    var service = this.subject();\n\n    assert.ok(!service.get('predefinedSettings').findBy('name', 'new.key.name'), 'Key doesn\\'t exist');\n\n    var setting = service._createSetting();\n    setting.set('key', null);\n    service.get('settings').pushObject(setting);\n    service.createKey('new.key.name');\n\n    assert.ok(service.get('predefinedSettings').findBy('name', 'new.key.name'), 'Key created');\n\n    service.removeAll();\n  });\n\n  ember_qunit.test('Can get settings string', function(assert) {\n    var service = this.subject();\n\n    var noSettings = service.getSettings();\n    assert.equal(noSettings, \"\", 'An empty string is returned if there are no settings');\n\n    var settings = {\n      'sName1': 'sValue1',\n      'sName2': 'sValue2'\n    };\n\n    service._createDefaultSettings(settings);\n\n    var expectedWithSettings = \"set sName1=sValue1;\\nset sName2=sValue2;\\n--Global Settings--\\n\\n\";\n    var withSettings = service.getSettings();\n\n    assert.equal(withSettings, expectedWithSettings, 'Returns correct string');\n  });\n\n  ember_qunit.test('It can parse global settings', function(assert) {\n    var service = this.subject();\n\n    assert.ok(!service.parseGlobalSettings(), 'It returns if query or model is not passed');\n\n    var settings = {\n      'sName1': 'sValue1',\n      'sName2': 'sValue2'\n    };\n\n\n    var globalSettingsString = \"set sName1=sValue1;\\nset sName2=sValue2;\\n--Global Settings--\\n\\n\";\n\n    var model = Ember['default'].Object.create({\n      globalSettings: globalSettingsString\n    });\n\n    var query = Ember['default'].Object.create({\n      fileContent: globalSettingsString + \"{{match}}\"\n    });\n\n    assert.ok(!service.parseGlobalSettings(query, model), 'It returns if current settings don\\'t match models global settings');\n\n    service._createDefaultSettings(settings);\n\n    service.parseGlobalSettings(query, model);\n\n    assert.equal(query.get('fileContent'), \"{{match}}\", 'It parsed global settings');\n  });\n\n});","define('hive/tests/unit/views/visual-explain-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  var view;\n\n  ember_qunit.moduleFor('view:visual-explain', 'VisualExplainView', {\n    setup: function() {\n      var controller = Ember.Controller.extend({}).create();\n\n      view = this.subject({\n        controller: controller\n      });\n\n      Ember.run(function() {\n        view.appendTo('#ember-testing');\n      });\n    },\n\n    teardown: function() {\n      Ember.run(view, view.destroy);\n    },\n  });\n\n  //select count (*) from power\n  var selectCountJson = {\"STAGE PLANS\":{\"Stage-1\":{\"Tez\":{\"DagName:\":\"hive_20150608120000_b930a285-dc6a-49b7-86b6-8bee5ecdeacd:96\",\"Vertices:\":{\"Reducer 2\":{\"Reduce Operator Tree:\":{\"Group By Operator\":{\"mode:\":\"mergepartial\",\"aggregations:\":[\"count(VALUE._col0)\"],\"outputColumnNames:\":[\"_col0\"],\"children\":{\"Select Operator\":{\"expressions:\":\"_col0 (type: bigint)\",\"outputColumnNames:\":[\"_col0\"],\"children\":{\"File Output Operator\":{\"Statistics:\":\"Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\",\"compressed:\":\"false\",\"table:\":{\"serde:\":\"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\",\"input format:\":\"org.apache.hadoop.mapred.TextInputFormat\",\"output format:\":\"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\"}}},\"Statistics:\":\"Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\"}},\"Statistics:\":\"Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\"}}},\"Map 1\":{\"Map Operator Tree:\":[{\"TableScan\":{\"alias:\":\"power\",\"children\":{\"Select Operator\":{\"children\":{\"Group By Operator\":{\"mode:\":\"hash\",\"aggregations:\":[\"count()\"],\"outputColumnNames:\":[\"_col0\"],\"children\":{\"Reduce Output Operator\":{\"sort order:\":\"\",\"value expressions:\":\"_col0 (type: bigint)\",\"Statistics:\":\"Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\"}},\"Statistics:\":\"Num rows: 1 Data size: 8 Basic stats: COMPLETE Column stats: COMPLETE\"}},\"Statistics:\":\"Num rows: 0 Data size: 132960632 Basic stats: PARTIAL Column stats: COMPLETE\"}},\"Statistics:\":\"Num rows: 0 Data size: 132960632 Basic stats: PARTIAL Column stats: COMPLETE\"}}]}},\"Edges:\":{\"Reducer 2\":{\"parent\":\"Map 1\",\"type\":\"SIMPLE_EDGE\"}}}},\"Stage-0\":{\"Fetch Operator\":{\"limit:\":\"-1\",\"Processor Tree:\":{\"ListSink\":{}}}}},\"STAGE DEPENDENCIES\":{\"Stage-1\":{\"ROOT STAGE\":\"TRUE\"},\"Stage-0\":{\"DEPENDENT STAGES\":\"Stage-1\"}}};\n\n  //select power.adate, power.atime from power join power2 on power.adate = power2.adate\n  var joinJson = {\"STAGE PLANS\":{\"Stage-1\":{\"Tez\":{\"DagName:\":\"hive_20150608124141_acde7f09-6b72-4ad4-88b0-807d499724eb:107\",\"Vertices:\":{\"Reducer 2\":{\"Reduce Operator Tree:\":{\"Merge Join Operator\":{\"outputColumnNames:\":[\"_col0\",\"_col1\"],\"children\":{\"Select Operator\":{\"expressions:\":\"_col0 (type: string), _col1 (type: string)\",\"outputColumnNames:\":[\"_col0\",\"_col1\"],\"children\":{\"File Output Operator\":{\"Statistics:\":\"Num rows: 731283 Data size: 73128349 Basic stats: COMPLETE Column stats: NONE\",\"compressed:\":\"false\",\"table:\":{\"serde:\":\"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe\",\"input format:\":\"org.apache.hadoop.mapred.TextInputFormat\",\"output format:\":\"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat\"}}},\"Statistics:\":\"Num rows: 731283 Data size: 73128349 Basic stats: COMPLETE Column stats: NONE\"}},\"Statistics:\":\"Num rows: 731283 Data size: 73128349 Basic stats: COMPLETE Column stats: NONE\",\"condition map:\":[{\"\":\"Inner Join 0 to 1\"}],\"condition expressions:\":{\"1\":\"\",\"0\":\"{KEY.reducesinkkey0} {VALUE._col0}\"}}}},\"Map 1\":{\"Map Operator Tree:\":[{\"TableScan\":{\"filterExpr:\":\"adate is not null (type: boolean)\",\"alias:\":\"power2\",\"children\":{\"Filter Operator\":{\"predicate:\":\"adate is not null (type: boolean)\",\"children\":{\"Reduce Output Operator\":{\"Map-reduce partition columns:\":\"adate (type: string)\",\"sort order:\":\"+\",\"Statistics:\":\"Num rows: 664803 Data size: 66480316 Basic stats: COMPLETE Column stats: NONE\",\"key expressions:\":\"adate (type: string)\"}},\"Statistics:\":\"Num rows: 664803 Data size: 66480316 Basic stats: COMPLETE Column stats: NONE\"}},\"Statistics:\":\"Num rows: 1329606 Data size: 132960632 Basic stats: COMPLETE Column stats: NONE\"}}]},\"Map 3\":{\"Map Operator Tree:\":[{\"TableScan\":{\"filterExpr:\":\"adate is not null (type: boolean)\",\"alias:\":\"power\",\"children\":{\"Filter Operator\":{\"predicate:\":\"adate is not null (type: boolean)\",\"children\":{\"Reduce Output Operator\":{\"Map-reduce partition columns:\":\"adate (type: string)\",\"sort order:\":\"+\",\"value expressions:\":\"atime (type: string)\",\"Statistics:\":\"Num rows: 332402 Data size: 66480416 Basic stats: COMPLETE Column stats: NONE\",\"key expressions:\":\"adate (type: string)\"}},\"Statistics:\":\"Num rows: 332402 Data size: 66480416 Basic stats: COMPLETE Column stats: NONE\"}},\"Statistics:\":\"Num rows: 664803 Data size: 132960632 Basic stats: COMPLETE Column stats: NONE\"}}]}},\"Edges:\":{\"Reducer 2\":[{\"parent\":\"Map 1\",\"type\":\"SIMPLE_EDGE\"},{\"parent\":\"Map 3\",\"type\":\"SIMPLE_EDGE\"}]}}},\"Stage-0\":{\"Fetch Operator\":{\"limit:\":\"-1\",\"Processor Tree:\":{\"ListSink\":{}}}}},\"STAGE DEPENDENCIES\":{\"Stage-1\":{\"ROOT STAGE\":\"TRUE\"},\"Stage-0\":{\"DEPENDENT STAGES\":\"Stage-1\"}}};\n\n  // Replace this with your real tests.\n  ember_qunit.test('it renders dag when controller.json changes.', function (assert) {\n    assert.expect(1);\n\n    view.renderDag = function () {\n      assert.ok(true, 'dag rendering has been called on json set.');\n    };\n\n    view.set('controller.json', selectCountJson);\n  });\n\n  ember_qunit.test('renderDag generates correct number of nodes and edges.', function (assert) {\n    assert.expect(4);\n\n    Ember.run(function () {\n      view.set('controller.json', selectCountJson);\n\n      assert.equal(view.get('graph').nodes().length, 4);\n      assert.equal(view.get('graph').edges().length, 3);\n\n      view.set('controller.json', joinJson);\n\n      assert.equal(view.get('graph').nodes().length, 7);\n      assert.equal(view.get('graph').edges().length, 6);\n    });\n  });\n\n  ember_qunit.test('progress gets updated for each node.', function (assert) {\n    expect(2);\n\n    Ember.run(function () {\n      view.set('controller.json', selectCountJson);\n\n      var targetNode;\n      var verticesGroups = view.get('verticesGroups');\n\n      verticesGroups.some(function (verticesGroup) {\n        var node = verticesGroup.contents.findBy('label', 'Map 1');\n\n        if (node) {\n          targetNode = node;\n          return true;\n        }\n      });\n\n      assert.equal(targetNode.get('progress'), undefined, 'initial progress is falsy.');\n\n      view.set('controller.verticesProgress', [\n        Ember.Object.create({\n          name: 'Map 1',\n          value: 1\n        })\n      ]);\n\n      assert.equal(targetNode.get('progress'), 1, 'progress gets updated to given value.');\n    });\n  });\n\n});","define('hive/transforms/date', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = DS['default'].Transform.extend({\n\n    deserialize: function (serialized) {\n      var type = typeof serialized;\n\n      if (type === \"string\") {\n        return new Date(Ember['default'].Date.parse(serialized));\n      } else if (type === \"number\") {\n        return new Date(serialized);\n      } else if (serialized === null || serialized === undefined) {\n        // if the value is not present in the data,\n        // return undefined, not null.\n        return serialized;\n      } else {\n        return null;\n      }\n    },\n\n    serialize: function (date) {\n      if (date instanceof Date) {\n        // Serialize it as a number to maintain millisecond precision\n        return Number(date);\n      } else {\n        return null;\n      }\n    }\n\n  });\n\n});","define('hive/utils/constants', ['exports', 'ember', 'hive/utils/functions'], function (exports, Ember, helpers) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Object.create({\n    appTitle: 'Hive',\n\n    /**\n     * This should reflect the naming conventions accross the application.\n     * Changing one value also means changing the filenames for the chain of files\n     * represented by that value (routes, controllers, models etc).\n     * This dependency goes both ways.\n    */\n    namingConventions: {\n      routes: {\n        index: 'index',\n        savedQuery: 'savedQuery',\n        historyQuery: 'historyQuery',\n        queries: 'queries',\n        history: 'history',\n        udfs: 'udfs',\n        logs: 'logs',\n        results: 'results',\n        explain: 'explain',\n        uploadTable :'upload-table',\n        visualization: 'visualization'\n      },\n\n      subroutes: {\n        savedQuery: 'index.savedQuery',\n        historyQuery: 'index.historyQuery',\n        jobLogs: 'index.historyQuery.logs',\n        jobResults: 'index.historyQuery.results',\n        jobExplain: 'index.historyQuery.explain'\n      },\n\n      index: 'index',\n      udf: 'udf',\n      udfs: 'udfs',\n      udfInsertPrefix: 'create temporary function ',\n      fileInsertPrefix: 'add jar ',\n      explainPrefix: 'EXPLAIN ',\n      explainFormattedPrefix: 'EXPLAIN FORMATTED ',\n      insertUdfs: 'insert-udfs',\n      job: 'job',\n      jobs: 'jobs',\n      history: 'history',\n      savedQuery: 'saved-query',\n      database: 'database',\n      databases: 'databases',\n      openQueries: 'open-queries',\n      visualExplain: 'visual-explain',\n      notify: 'notify',\n      tezUI: 'tez-ui',\n      file: 'file',\n      fileResource: 'file-resource',\n      alerts: 'alerts',\n      logs: 'logs',\n      results: 'results',\n      jobResults: 'index/history-query/results',\n      jobLogs: 'index/history-query/logs',\n      jobExplain: 'index/history-query/explain',\n      databaseTree: 'databases-tree',\n      databaseSearch: 'databases-search-results',\n      settings: 'settings',\n      jobProgress: 'job-progress',\n      queryTabs: 'query-tabs',\n      session: 'session'\n    },\n\n    hiveParameters: [\n      {\n        name: 'hive.tez.container.size',\n        validate: helpers['default'].regexes.digits\n      },\n\n      {\n        name: 'hive.prewarm.enabled',\n        values: helpers['default'].validationValues.bool\n      },\n      {\n        name: 'hive.prewarm.numcontainers',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'hive.tez.auto.reducer.parallelism',\n        values: helpers['default'].validationValues.bool\n      },\n      {\n        name: 'hive.execution.engine',\n        values: helpers['default'].validationValues.execEngine\n      },\n      {\n        name: 'hive.vectorized.execution.enabled',\n        values: helpers['default'].validationValues.bool\n      },\n      {\n        name: 'hive.auto.convert.join',\n        values: helpers['default'].validationValues.bool\n      },\n      {\n        name: 'tez.am.resource.memory.mb',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'tez.am.container.idle.release-timeout-min.millis',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'tez.am.container.idle.release-timeout-max.millis',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'tez.queue.name',\n        validate: helpers['default'].regexes.name\n      },\n      {\n        name: 'tez.runtime.io.sort.mb',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'tez.runtime.sort.threads',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'tez.runtime.compress.codec',\n        validate: helpers['default'].regexes.dotPath\n      },\n      {\n        name: 'tez.grouping.min-size',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'tez.grouping.max-size',\n        validate: helpers['default'].regexes.digits\n      },\n      {\n        name: 'tez.generate.debug.artifacts',\n        values: helpers['default'].validationValues.bool\n      }\n    ],\n\n    jobReferrer: {\n      sample: 'sample',\n      explain: 'explain',\n      visualExplain: 'visualExplain',\n      job: 'job'\n    },\n\n    statuses: {\n      unknown: \"UNKNOWN\",\n      initialized: \"INITIALIZED\",\n      running: \"RUNNING\",\n      succeeded: \"SUCCEEDED\",\n      canceled: \"CANCELED\",\n      closed: \"CLOSED\",\n      error: \"ERROR\",\n      failed: 'FAILED',\n      killed: 'KILLED',\n      pending: \"PENDING\"\n    },\n\n    alerts: {\n      warning: 'warning',\n      error: 'danger',\n      success: 'success'\n    },\n\n    results: {\n      save: {\n        csv: 'Save as csv',\n        hdfs: 'Save to HDFS'\n      },\n      statuses: {\n        terminated: \"TERMINATED\",\n        runnable: \"RUNNABLE\"\n      }\n    },\n\n    //this can be replaced by a string.format implementation\n    adapter: {\n      version: '1.0.0',\n      instance: 'Hive',\n      apiPrefix: '/api/v1/views/HIVE/versions/',\n      instancePrefix: '/instances/',\n      resourcePrefix: 'resources/'\n    },\n\n    sampleDataQuery: 'SELECT * FROM %@ LIMIT 100;',\n\n    notify: {\n      ERROR:  {\n        typeClass : 'alert-danger',\n        typeIcon  : 'fa-exclamation-triangle'\n      },\n      WARN: {\n        typeClass : 'alert-warning',\n        typeIcon  : 'fa-times-circle'\n      },\n      SUCCESS: {\n        typeClass : 'alert-success',\n        typeIcon  : 'fa-check'\n      },\n      INFO: {\n        typeClass : 'alert-info',\n        typeIcon  : 'fa-info'\n      }\n    },\n\n    globalSettings: {\n      comment: \"--Global Settings--\\n\\n\"\n    },\n\n    defaultVisualizationRowCount: 10000\n\n  });\n\n});","define('hive/utils/dag-rules', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].ArrayProxy.create({\n    content: Ember['default'].A(\n      [\n        {\n          targetOperator: 'TableScan',\n          targetProperty: 'alias:',\n          label: 'Table Scan:',\n\n          fields: [\n            {\n              label: 'filterExpr:',\n              targetProperty: 'filterExpr:'\n            }\n          ]\n        },\n        {\n          targetOperator: 'Filter Operator',\n          targetProperty: 'predicate:',\n          label: 'Filter:',\n\n          fields: []\n        },\n        {\n          targetOperator: 'Map Join Operator',\n          label: 'Map Join',\n\n          fields: []\n        },\n        {\n          targetOperator: 'Merge Join Operator',\n          label: 'Merge Join',\n\n          fields: []\n        },\n        {\n          targetOperator: 'Select Operator',\n          label: 'Select',\n\n          fields: []\n        },\n        {\n          targetOperator: 'Reduce Output Operator',\n          label: 'Reduce',\n\n          fields: [\n            {\n              label: 'Partition columns:',\n              targetProperty: 'Map-reduce partition columns:'\n            },\n            {\n              label: 'Key expressions:',\n              targetProperty: 'key expressions:'\n            },\n            {\n              label: 'Sort order:',\n              targetProperty: 'sort order:'\n            }\n          ]\n        },\n        {\n          targetOperator: 'File Output Operator',\n          label: 'File Output Operator',\n\n          fields: []\n        },\n        {\n          targetOperator: 'Group By Operator',\n          label: 'Group By:',\n\n          fields: [\n            {\n              label: 'Aggregations:',\n              targetProperties: 'aggregations:'\n            },\n            {\n              label: 'Keys:',\n              targetProperty: 'keys:'\n            }\n          ]\n        },\n        {\n          targetOperator: 'Limit',\n          targetProperty: 'Number of rows:',\n          label: 'Limit:',\n\n          fields: []\n        },\n        {\n          targetOperator: 'Extract',\n          label: 'Extract',\n\n          fields: []\n        },\n        {\n          targetOperator: 'PTF Operator',\n          label: 'Partition Table Function',\n\n          fields: []\n        },\n        {\n          targetOperator: 'Dynamic Partitioning Event Operator',\n          labelel: 'Dynamic Partitioning Event',\n\n          fields: [\n            {\n              label: 'Target column:',\n              targetProperty: 'Target column:'\n            },\n            {\n              label: 'Target Vertex:',\n              targetProperty: 'Target Vertex:'\n            },\n            {\n              label: 'Partition key expr:',\n              targetProperty: 'Partition key expr:'\n            }\n          ]\n        }\n      ]\n    )\n  });\n\n});","define('hive/utils/functions', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].Object.create({\n    isInteger: function (x) {\n      return !isNaN(x);\n    },\n\n    isDate: function (date) {\n      return moment(date).isValid();\n    },\n\n    regexes: {\n      allUppercase: /^[^a-z]*$/,\n      whitespaces: /^(\\s*).*$/,\n      digits: /^\\d+$/,\n      name: /\\w+/ig,\n      dotPath: /[a-z.]+/i,\n      setSetting: /^set\\s+[\\w-.]+(\\s+|\\s?)=(\\s+|\\s?)[\\w-.]+(\\s+|\\s?);/gim\n    },\n\n    validationValues: {\n      bool: [\n        Ember['default'].Object.create({ value: 'true' }),\n        Ember['default'].Object.create({ value: 'false' })\n      ],\n\n      execEngine: [\n        Ember['default'].Object.create({ value: 'tez' }),\n        Ember['default'].Object.create({ value: 'mr' })\n      ]\n    },\n\n    insensitiveCompare: function (sourceString) {\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      if (!sourceString) {\n        return false;\n      }\n\n      return !!args.find(function (arg) {\n        return sourceString.match(new RegExp('^' + arg + '$', 'i'));\n      });\n    },\n\n    insensitiveContains: function (sourceString, destString) {\n      return sourceString.toLowerCase().indexOf(destString.toLowerCase()) > -1;\n    },\n\n    convertToArray : function (inputObj) {\n      var array = [];\n\n      for (var key in inputObj) {\n        if (inputObj.hasOwnProperty(key)) {\n          array.pushObject({\n            name: key,\n            value: inputObj[key]\n          });\n        }\n      }\n      return array;\n    },\n\n    /**\n     * Convert number of seconds into time object HH MM SS\n     *\n     * @param integer secs Number of seconds to convert\n     * @return object\n    */\n    secondsToHHMMSS: function (secs)\n     {\n      var hours = Math.floor(secs / (60 * 60));\n\n      var divisor_for_minutes = secs % (60 * 60);\n      var minutes = Math.floor(divisor_for_minutes / 60);\n\n      var divisor_for_seconds = divisor_for_minutes % 60;\n      var seconds = Math.ceil(divisor_for_seconds);\n\n      var obj = {\n        \"h\": hours,\n        \"m\": minutes,\n        \"s\": seconds\n      };\n      return  ((obj.h > 0) ? obj.h + ' hr ' : '') + ((obj.m > 0) ? obj.m + ' min ' : '') + ((obj.s >= 0) ? obj.m + ' sec ' : '');\n    }\n\n  });\n\n});","define('hive/views/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].View.extend({\n    didInsertElement: function() {\n      this._super();\n      Ember['default'].$('body').tooltip({\n        selector: '[data-toggle=\"tooltip\"]'\n      });\n    }\n  });\n\n});","define('hive/views/message', ['exports', 'ember', 'hive/views/notification'], function (exports, Ember, NotificationView) {\n\n  'use strict';\n\n    /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n  exports['default'] = NotificationView['default'].extend({\n    templateName : 'message',\n    removeLater  : Ember['default'].K,\n    isExpanded  : false,\n    removeMessage: 'removeMessage',\n\n    actions: {\n      expand: function () {\n        this.toggleProperty('isExpanded');\n      },\n\n      close: function () {\n        this.get('controller').send('removeMessage', this.get('notification'));\n      }\n    }\n  });\n\n});","define('hive/views/messages', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].View.extend({\n    didInsertElement: function () {\n      var target = this.$('#messages');\n      var panel = this.$('#messages .panel-body');\n\n      panel.css('min-height', $('.main-content').height());\n      target.animate({ width: $('.main-content').width() }, 'fast');\n    },\n\n    willDestroyElement: function () {\n      var target = this.$('#messages');\n      var panel = this.$('#messages .panel-body');\n\n      panel.css('min-height', 0);\n      target.css('width', 0);\n    }\n  });\n\n});","define('hive/views/notification', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].View.extend({\n    closeAfter         : 5000,\n    isHovering         : false,\n    templateName       : 'notification',\n    removeNotification : 'removeNotification',\n\n    setup: function () {\n      this.set('typeClass', this.get('notification.type.typeClass'));\n      this.set('typeIcon', this.get('notification.type.typeIcon'));\n    }.on('init'),\n\n    removeLater: function () {\n      Ember['default'].run.later(this, function () {\n        if (this.get('isHovering')) {\n          this.removeLater();\n        } else if (this.element) {\n          this.send('close');\n        }\n      }, this.get('closeAfter'));\n    }.on('didInsertElement'),\n\n    mouseEnter: function () { this.set('isHovering', true);  },\n    mouseLeave: function () { this.set('isHovering', false); },\n\n    actions: {\n      close: function () {\n        this.remove();\n        this.get('parentView').send('removeNotification', this.get('notification'));\n      }\n    }\n  });\n\n});","define('hive/views/tez-ui', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].View.extend({\n    didInsertElement: function () {\n      var target = this.$('#tez-ui');\n      var panel = this.$('#tez-ui .panel-body');\n\n      panel.css('min-height', $('.main-content').height());\n      target.animate({ width: $('.main-content').width() }, 'fast');\n    },\n\n    willDestroyElement: function () {\n      var target = this.$('#tez-ui');\n      var panel = this.$('#tez-ui .panel-body');\n\n      panel.css('min-height', 0);\n      target.css('width', 0);\n    }\n  });\n\n});","define('hive/views/visual-explain', ['exports', 'ember', 'hive/utils/dag-rules', 'hive/utils/functions'], function (exports, Ember, dagRules, utils) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /* globals dagre */\n\n  exports['default'] = Ember['default'].View.extend({\n    verticesGroups: [],\n    edges: [],\n\n    willInsertElement: function () {\n      this.set('graph', new dagre.graphlib.Graph());\n    },\n\n    didInsertElement: function () {\n      this._super();\n\n      var target = this.$('#visual-explain');\n      var panel = this.$('#visual-explain .panel-body');\n\n      panel.css('min-height', $('.main-content').height());\n      target.animate({ width: $('.main-content').width() }, 'fast');\n\n      this.$('#visual-explain-graph').draggable();\n\n      if (this.get('controller.rerender')) {\n        this.renderDag();\n      }\n    },\n\n    willDestroyElement: function () {\n      var target = this.$('#visual-explain');\n      var panel = this.$('#visual-explain .panel-body');\n\n      panel.css('min-height', 0);\n      target.css('width', 0);\n    },\n\n    updateProgress: function () {\n      var verticesProgress = this.get('controller.verticesProgress');\n      var verticesGroups = this.get('verticesGroups');\n\n      if (!verticesGroups || !verticesProgress || !verticesProgress.length) {\n        return;\n      }\n\n      verticesGroups.forEach(function (verticesGroup) {\n        verticesGroup.contents.forEach(function (node) {\n          var progress = verticesProgress.findBy('name', node.get('label'));\n\n          if (progress) {\n            node.set('progress', progress.get('value'));\n          }\n        });\n      });\n    }.observes('controller.verticesProgress.@each.value', 'verticesGroups'),\n\n    jsonChanged: function () {\n      var json = this.get('controller.json');\n      this.renderDag();\n    }.observes('controller.json'),\n\n    getOffset: function (el) {\n      var _x = 0;\n      var _y = 0;\n      var _w = el.offsetWidth|0;\n      var _h = el.offsetHeight|0;\n      while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {\n          _x += el.offsetLeft - el.scrollLeft;\n          _y += el.offsetTop - el.scrollTop;\n          el = el.offsetParent;\n      }\n      return { top: _y, left: _x, width: _w, height: _h };\n    },\n\n    addEdge: function (div1, div2, thickness, type) {\n      var off1 = this.getOffset(div1);\n      var off2 = this.getOffset(div2);\n      // bottom right\n      var x1 = off1.left + off1.width / 2;\n      var y1 = off1.top + off1.height;\n      // top right\n      var x2 = off2.left + off2.width / 2;\n      var y2 = off2.top;\n      // distance\n      var length = Math.sqrt(((x2-x1) * (x2-x1)) + ((y2-y1) * (y2-y1)));\n      // center\n      var cx = ((x1 + x2) / 2) - (length / 2);\n      var cy = ((y1 + y2) / 2) - (thickness / 2) - 73;\n      // angle\n      var angle = Math.round(Math.atan2((y1-y2), (x1-x2)) * (180 / Math.PI));\n\n      if (angle < -90) {\n        angle = 180 + angle;\n      }\n\n      var style = \"left: %@px; top: %@px; width: %@px; transform:rotate(%@4deg);\";\n      style = style.fmt(cx, cy, length, angle);\n\n      var edgeType;\n\n      if (type) {\n        if (type === 'BROADCAST_EDGE') {\n          edgeType = 'BROADCAST';\n        } else {\n          edgeType = 'SHUFFLE';\n        }\n      }\n\n      this.get('edges').pushObject({\n        style: style,\n        type: edgeType\n      });\n    },\n\n    getNodeContents: function (operator, contents, table, vertex) {\n      var currentTable = table,\n        contents = contents || [],\n        nodeName,\n        node,\n        ruleNode,\n        nodeLabelValue,\n        self = this;\n\n      if (operator.constructor === Array) {\n        operator.forEach(function (childOperator) {\n          self.getNodeContents(childOperator, contents, currentTable, vertex);\n        });\n\n        return contents;\n      } else {\n        nodeName = Object.getOwnPropertyNames(operator)[0];\n        node = operator[nodeName];\n        ruleNode = dagRules['default'].findBy('targetOperator', nodeName);\n\n        if (ruleNode) {\n          if (nodeName.indexOf('Map Join') > -1) {\n            nodeLabelValue = this.handleMapJoinNode(node, currentTable);\n            currentTable = null;\n          } else if (nodeName.indexOf('Merge Join') > -1) {\n            nodeLabelValue = this.handleMergeJoinNode(node, vertex);\n          } else {\n            nodeLabelValue = node[ruleNode.targetProperty];\n          }\n\n          contents.pushObject({\n            title: ruleNode.label,\n            statistics: node[\"Statistics:\"],\n            index: contents.length + 1,\n            value: nodeLabelValue,\n            fields: ruleNode.fields.map(function (field) {\n              var value = node[field.targetProperty || field.targetProperties];\n\n              return {\n                label: field.label,\n                value: value\n              };\n            })\n          });\n\n          if (node.children) {\n            return this.getNodeContents(node.children, contents, currentTable, vertex);\n          } else {\n            return contents;\n          }\n        } else {\n          return contents;\n        }\n      }\n    },\n\n    handleMapJoinNode: function (node, table) {\n      var rows = table || \"<rows from above>\";\n      var firstTable = node[\"input vertices:\"][0] || rows;\n      var secondTable = node[\"input vertices:\"][1] || rows;\n\n      var joinString = node[\"condition map:\"][0][\"\"];\n      joinString = joinString.replace(\"0\", firstTable);\n      joinString = joinString.replace(\"1\", secondTable);\n      joinString += \" on \";\n      joinString += node[\"keys:\"][0] + \"=\";\n      joinString += node[\"keys:\"][1];\n\n      return joinString;\n    },\n\n    handleMergeJoinNode: function (node, vertex) {\n      var graphData = this.get('controller.json')['STAGE PLANS']['Stage-1']['Tez'];\n      var edges = graphData['Edges:'];\n      var index = 0;\n      var joinString = node[\"condition map:\"][0][\"\"];\n\n      edges[vertex].toArray().forEach(function (edge) {\n        if (edge.type === \"SIMPLE_EDGE\") {\n          joinString.replace(String(index), edge.parent);\n          index++;\n        }\n      });\n\n      return joinString;\n    },\n\n    //sets operator nodes\n    setNodes: function (vertices) {\n      var g = this.get('graph');\n      var self = this;\n\n      vertices.forEach(function (vertex) {\n        var contents = [];\n        var operator;\n        var currentTable;\n\n        if (vertex.name.indexOf('Map') > -1) {\n          if (vertex.value && vertex.value['Map Operator Tree:']) {\n            operator = vertex.value['Map Operator Tree:'][0];\n            currentTable = operator[\"TableScan\"][\"alias:\"];\n          } else {\n            //https://hortonworks.jira.com/browse/BUG-36168\n            operator = \"None\";\n          }\n        } else if (vertex.name.indexOf('Reducer') > -1) {\n          operator = vertex.value['Reduce Operator Tree:'];\n        }\n\n        if (operator) {\n          contents = self.getNodeContents(operator, null, currentTable, vertex.name);\n\n          g.setNode(vertex.name, {\n            contents: contents,\n            id: vertex.name,\n            label: vertex.name\n          });\n        }\n      });\n\n      return this;\n    },\n\n    //sets edges between operator nodes\n    setEdges: function (edges) {\n      var g = this.get('graph');\n      var invalidEdges = [];\n      var edgesToBeRemoved = [];\n      var isValidEdgeType = function (type) {\n        return type === \"SIMPLE_EDGE\" ||\n               type === \"BROADCAST_EDGE\";\n      };\n\n      edges.forEach(function (edge) {\n        var parent;\n        var type;\n\n        if (edge.value.constructor === Array) {\n          edge.value.forEach(function (childEdge) {\n            parent = childEdge.parent;\n            type = childEdge.type;\n\n            if (isValidEdgeType(type)) {\n              g.setEdge(parent, edge.name);\n              g.edge({v: parent, w: edge.name}).type = type;\n            } else {\n              invalidEdges.pushObject({\n                vertex: edge.name,\n                edge: childEdge\n              });\n            }\n          });\n        } else {\n          parent = edge.value.parent;\n          type = edge.value.type;\n\n          if (isValidEdgeType(type)) {\n            g.setEdge(parent, edge.name);\n            g.edge({v: parent, w: edge.name}).type = type;\n          } else {\n            invalidEdges.pushObject({\n              vertex: edge.name,\n              edge: edge.name\n            });\n          }\n        }\n      });\n\n      invalidEdges.forEach(function (invalidEdge) {\n        var parent;\n        var targetEdge = g.edges().find(function (graphEdge) {\n          return graphEdge.v === invalidEdge.edge.parent ||\n                 graphEdge.w === invalidEdge.edge.parent;\n        });\n\n        var targetVertex;\n\n        if (targetEdge) {\n          edgesToBeRemoved.pushObject(targetEdge);\n\n          if (targetEdge.v === invalidEdge.edge.parent) {\n            targetVertex = targetEdge.w;\n          } else {\n            targetVertex = targetEdge.v;\n          }\n\n          parent = invalidEdge.vertex;\n\n          g.setEdge({v: parent, w: targetVertex});\n          g.setEdge({v: parent, w: targetVertex}).type = \"BROADCAST_EDGE\";\n        }\n      });\n\n      edgesToBeRemoved.uniq().forEach(function (edge) {\n        g.removeEdge(edge.v, edge.w, edge.name);\n      });\n\n      return this;\n    },\n\n    //sets nodes for tables and their edges\n    setTableNodesAndEdges: function (vertices) {\n      var g = this.get('graph');\n\n      vertices.forEach(function (vertex) {\n        var operator;\n        var table;\n        var id;\n\n        if (vertex.name.indexOf('Map') > -1 && vertex.value && vertex.value['Map Operator Tree:']) {\n          operator = vertex.value['Map Operator Tree:'][0];\n          for (var node in operator) {\n            table = operator[node]['alias:'];\n\n            //create unique identifier by using table + map pairs so that we have\n            //different nodes for the same table if it's a table connected to multiple Map operators\n            id = table + ' for ' + vertex.name;\n\n            g.setNode(id, { id: id, label: table, isTableNode: true });\n            g.setEdge(id, vertex.name);\n          }\n        }\n      });\n\n      dagre.layout(g);\n\n      return this;\n    },\n\n    createNodeGroups: function () {\n      var groupedNodes = [];\n      var g = this.get('graph');\n      var lastRowNode;\n      var fileOutputOperator;\n\n      g.nodes().forEach(function (value) {\n        var node = g.node(value);\n\n        if (node) {\n          var existentRow = groupedNodes.findBy('topOffset', node.y);\n\n          if (!existentRow) {\n             groupedNodes.pushObject({\n                topOffset: node.y,\n                contents: [ Ember['default'].Object.create(node) ]\n             });\n          } else {\n            existentRow.contents.pushObject(Ember['default'].Object.create(node));\n          }\n        }\n      });\n\n      groupedNodes = groupedNodes.sortBy('topOffset');\n      groupedNodes.forEach(function (group) {\n        group.contents = group.contents.sortBy('x');\n      });\n\n      lastRowNode = groupedNodes.get('lastObject.contents.lastObject');\n      fileOutputOperator = lastRowNode.contents.get('lastObject');\n\n      g.setNode(fileOutputOperator.title, { id: fileOutputOperator.title, label: fileOutputOperator.title, isOutputNode: true });\n      g.setEdge(fileOutputOperator.title, lastRowNode.id);\n\n      groupedNodes.pushObject({\n        contents: [ Ember['default'].Object.create(g.node(fileOutputOperator.title)) ]\n      });\n\n      lastRowNode.contents.removeObject(fileOutputOperator);\n\n      this.set('verticesGroups', groupedNodes);\n\n      return this;\n    },\n\n    renderEdges: function () {\n      var self = this;\n      var g = this.get('graph');\n\n      Ember['default'].run.later(function () {\n        g.edges().forEach(function (value) {\n          var firstNode = self.$(\"[title='\" + value.v + \"']\");\n          var secondNode = self.$(\"[title='\" + value.w + \"']\");\n\n          if (firstNode && secondNode) {\n            self.addEdge(firstNode[0], secondNode[0], 2, g.edge(value).type);\n          }\n\n        });\n      }, 400);\n    },\n\n    renderDag: function () {\n      var json = this.get('controller.json');\n      var isVisualExplain = json && (json['STAGE PLANS'] != undefined) &&  (json['STAGE PLANS']['Stage-1'] != undefined) && (json['STAGE PLANS']['Stage-1']['Tez'] != undefined);\n      if (isVisualExplain) {\n        this.set('edges', []);\n\n        // Create a new directed graph\n        var g = this.get('graph');\n\n        var graphData = json['STAGE PLANS']['Stage-1']['Tez'];\n        var vertices = utils['default'].convertToArray(graphData['Vertices:']);\n        var edges = utils['default'].convertToArray(graphData['Edges:']);\n\n        // Set an object for the graph label\n        g.setGraph({});\n\n        // Default to assigning a new object as a label for each new edge.\n        g.setDefaultEdgeLabel(function () { return {}; });\n\n        this.setNodes(vertices)\n          .setEdges(edges)\n          .setTableNodesAndEdges(vertices)\n          .createNodeGroups()\n          .renderEdges();\n      } else {\n\n        if(!this.get('controller.noquery')) {\n          $('#no-visual-explain-graph').html('Visual explain is not available.');\n        }\n\n      }\n\n    }\n  });\n\n});","define('hive/views/visualization-ui', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  /**\n   * Licensed to the Apache Software Foundation (ASF) under one\n   * or more contributor license agreements.  See the NOTICE file\n   * distributed with this work for additional information\n   * regarding copyright ownership.  The ASF licenses this file\n   * to you under the Apache License, Version 2.0 (the\n   * \"License\"); you may not use this file except in compliance\n   * with the License.  You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  exports['default'] = Ember['default'].View.extend({\n    didInsertElement: function () {\n      var target = this.$('#visualization');\n      var panel = this.$('#visualization .panel-body').first();\n\n      panel.css('min-height', $('.main-content').height());\n      target.animate({ width: $('.main-content').width() }, 'fast');\n    },\n\n    willDestroyElement: function () {\n      var target = this.$('#visualization');\n      var panel = this.$('#visualization .panel-body');\n\n      panel.css('min-height', 0);\n      target.css('width', 0);\n    }\n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('hive/config/environment', ['ember'], function(Ember) {\n  var prefix = 'hive';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"hive/tests/test-helper\");\n} else {\n  require(\"hive/app\")[\"default\"].create({\"LOG_ACTIVE_GENERATION\":true,\"LOG_VIEW_LOOKUPS\":true});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvFA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlbpttnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvpQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvjhrrSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtznvrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5hdncA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhhrrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzttpvlfnUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxpSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzhvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprlrvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtrtxUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"hive.js"}